/**
 * JPanelCallesAfectadas.java
 * © MINETUR, Government of Spain
 * This program is part of LocalGIS
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * JPanelCallesAfectadas.java
 *
 * Created on 30 de junio de 2005, 17:18
 */

package com.geopista.app.ocupaciones.panel;

import java.awt.Component;
import java.awt.Dimension;
import java.util.Enumeration;
import java.util.ResourceBundle;
import java.util.Vector;

import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.apache.log4j.Logger;

import com.geopista.app.ocupaciones.CMainOcupaciones;
import com.geopista.app.ocupaciones.CUtilidadesComponentes;
import com.geopista.app.ocupaciones.Estructuras;
import com.geopista.app.ocupaciones.IMultilingue;
import com.geopista.app.printer.FichasDisponibles;
import com.geopista.app.printer.GeopistaPrintableOcupaciones;
import com.geopista.app.utilidades.TextField;
import com.geopista.app.utilidades.estructuras.ComboBoxEstructuras;
import com.geopista.editor.GeopistaEditor;
import com.geopista.protocol.licencias.CExpedienteLicencia;
import com.geopista.protocol.licencias.CReferenciaCatastral;
import com.geopista.protocol.licencias.CSolicitudLicencia;
import com.geopista.protocol.licencias.CalleAfectada;

/**
 *
 * @author  angeles
 */
public class JPanelCallesAfectadas extends javax.swing.JPanel implements IMultilingue{
    private Logger logger=Logger.getLogger(JPanelCallesAfectadas.class); 
    /** Creates new form JPanelCallesAfectadas */
    private JFrame desktop;
    private ResourceBundle literales;
    private Vector callesAfectadas;
    private CalleAfectada afectadaSelected;
    private CExpedienteLicencia expediente;
    private CSolicitudLicencia solicitud;
    private GeopistaEditor geopistaEditor;
    private boolean consulta= false;
    public JPanelCallesAfectadas(JFrame padre, ResourceBundle literales)
    {
        this.desktop=padre;
        this.literales =literales;
        initComponents();
        renombrarComponentes(literales);
        setEnabled(false);
        setActiva(false);

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanelAlto = new javax.swing.JPanel();
        jScrollPaneCalles = new javax.swing.JScrollPane();
        jListCalles = new javax.swing.JList();
        jPanelBoAl = new javax.swing.JPanel();
        jButtonDelete = new javax.swing.JButton();
        jPanelBajo = new javax.swing.JPanel();
        jPanelDatos = new javax.swing.JPanel();
        jPanelDa = new javax.swing.JPanel();
        jLabelCalle = new javax.swing.JLabel();
        jTextFieldCalle = new TextField(50);
        //jTextFieldNumero = new JNumberTextField(JNumberTextField.NUMBER,new Integer(9999));
        jTextFieldNumero= new com.geopista.app.utilidades.TextField(8);
        jLabelNumero = new javax.swing.JLabel();
        jLabelComentario = new javax.swing.JLabel();
        jTextFieldComentario = new TextField(255);
        jPanelBotoDa = new javax.swing.JPanel();
        jButtonBuscar = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();
        jPanelBotonera = new javax.swing.JPanel();
        jButtonImprimir = new javax.swing.JButton();
        jLabelTipo= new javax.swing.JLabel();
        jComboBoxTipoVia =new ComboBoxEstructuras(com.geopista.app.ocupaciones.Estructuras.getListaTiposViaINE(), null, literales.getLocale().toString());


        setLayout(new java.awt.BorderLayout());

        jPanelAlto.setLayout(new java.awt.BorderLayout());
        jScrollPaneCalles.setViewportView(jListCalles);
        jPanelAlto.add(jScrollPaneCalles, java.awt.BorderLayout.CENTER);
        jButtonDelete.setIcon(CUtilidadesComponentes.iconoDeleteParcela);
        jButtonDelete.setSize(new Dimension(20,20));
        jButtonDelete.setPreferredSize(new Dimension(20,20));
        jPanelBoAl.add(jButtonDelete);
        jPanelAlto.add(jPanelBoAl, java.awt.BorderLayout.EAST);
        add(jPanelAlto, java.awt.BorderLayout.CENTER);
        jPanelBajo.setLayout(new java.awt.BorderLayout());
        jPanelDatos.setLayout(new java.awt.BorderLayout());
        jPanelDa.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanelDa.setPreferredSize(new java.awt.Dimension(350, 180));
        jPanelDa.add(jLabelTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));
        jPanelDa.add(jComboBoxTipoVia, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 100, -1));
        jPanelDa.add(jLabelCalle, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, -1, -1));
        jPanelDa.add(jTextFieldCalle, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 260, -1));
        jPanelDa.add(jTextFieldNumero, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 80, -1));
        jPanelDa.add(jLabelNumero, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, -1));
        jPanelDa.add(jLabelComentario, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, -1));
        jPanelDa.add(jTextFieldComentario, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 370, -1));
        jPanelDatos.add(jPanelDa, java.awt.BorderLayout.CENTER);
        jPanelBotoDa.setPreferredSize(new java.awt.Dimension(221, 50));
        jPanelBotoDa.add(jButtonBuscar);
        jPanelBotoDa.add(jButtonAdd);
        jPanelBotoDa.add(jButtonNew);
        jPanelDatos.add(jPanelBotoDa, java.awt.BorderLayout.SOUTH);
        jPanelBajo.add(jPanelDatos, java.awt.BorderLayout.CENTER);
        jPanelBotonera.add(jButtonImprimir);
        jPanelBajo.add(jPanelBotonera, java.awt.BorderLayout.SOUTH);
        jListCalles.setCellRenderer(new RendererCalles(literales.getLocale().toString()));

        add(jPanelBajo, java.awt.BorderLayout.SOUTH);
         jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevo();
            }
        });
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvar();
            }
        });
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrar();
            }
        });
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirInforme();
            }
        });
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscar();
            }
        });
        ListSelectionModel rowSM = jListCalles.getSelectionModel();
          rowSM.addListSelectionListener(new ListSelectionListener() {
              public void valueChanged(ListSelectionEvent e) {
                  seleccionar();
              }
          });



    }//GEN-END:initComponents
    public void buscar()
    {
        CAddressJDialog dialog = new CAddressJDialog(desktop, true);
        dialog.setLocation(20, 20);
        dialog.setResizable(false);
        dialog.show();
        if (dialog.getReferencias()==null|| dialog.getReferencias().size()<=0)
            return;
        CReferenciaCatastral referenciaCatastral =
                (CReferenciaCatastral) dialog.getReferencias().elements().nextElement();
        CalleAfectada aux= new CalleAfectada();
        aux.setNombre(referenciaCatastral.getNombreVia());
        aux.setNumero(referenciaCatastral.getPrimerNumero());
        try
        {
           aux.setTipoViaIne( Estructuras.getListaTiposViaINE().getDomainNodeByTraduccion(referenciaCatastral.getTipoVia()).getPatron());
        }catch(Exception e){}
        setEnabled(true);
        load(aux);

    }

    public void renombrarComponentes()
    {
        renombrarComponentes(CMainOcupaciones.literales);
    }


    public void renombrarComponentes(ResourceBundle literales)
    {
        try
        {
            this.literales=literales;
            jScrollPaneCalles.setBorder(new javax.swing.border.TitledBorder(literales.getString("jPanelCallesAfectadas.title")));//"Calles afectadas:"));
            jButtonImprimir.setText(literales.getString("jPanelCallesAfectadas.jButtonImprimir"));//"Imprimir informe");
            jButtonNew.setText(literales.getString("jPanelCallesAfectadas.jButtonNew"));//"Nueva");
            jButtonAdd.setText(literales.getString("jPanelCallesAfectadas.jButtonAdd"));//"A\u00f1adir");
            jButtonBuscar.setText(literales.getString("jPanelCallesAfectadas.jButtonBuscar"));//"Buscar");
            jLabelComentario.setText(literales.getString("jPanelCallesAfectadas.jLabelComentario"));//"Comentario:");
            jLabelNumero.setText(literales.getString("jPanelCallesAfectadas.jLabelNumero"));//"Numero:");
            jLabelCalle.setText(literales.getString("jPanelCallesAfectadas.jLabelCalle"));//"Nombre:");
            jLabelTipo.setText(literales.getString("jPanelCallesAfectadas.jLabelTipo"));//"Tipo via:");
            jPanelDa.setBorder(new javax.swing.border.TitledBorder(literales.getString("jPanelCallesAfectadas.jPanelDa")));//"Datos"));
            ((RendererCalles)jListCalles.getCellRenderer()).setLocale(literales.getLocale().toString());

            jButtonImprimir.setToolTipText(literales.getString("jPanelCallesAfectadas.jButtonImprimir"));
            jButtonNew.setToolTipText(literales.getString("jPanelCallesAfectadas.jButtonNew"));
            jButtonAdd.setToolTipText(literales.getString("jPanelCallesAfectadas.jButtonAdd"));
            jButtonBuscar.setToolTipText(literales.getString("jPanelCallesAfectadas.jButtonBuscar"));
            jButtonDelete.setToolTipText(literales.getString("jPanelCallesAfectadas.jButtonDelete"));
        }catch(Exception e)
        {
            logger.error("Excepcion al cargar los nombres",e);
        }
    }
    public void nuevo()
    {
        setEnabled(true);
        load(new CalleAfectada());
    }
    public void salvar()
    {
        if (afectadaSelected==null) return;
        if (!checkCampos())
        {
            new JOptionPane(literales.getString("jPanelCallesAfectadas.mensaje1"),
                    JOptionPane.INFORMATION_MESSAGE).createDialog(desktop,"INFORMATION").show();
            return;
        }
        if (callesAfectadas==null) callesAfectadas=new Vector();
        callesAfectadas.add(save());
        actualizarModelo(callesAfectadas);
        setEnabled(false);
    }
     public Vector getCallesAfectadas() {
        return callesAfectadas;
    }
    public void setCallesAfectadas(Vector callesAfectadas, CExpedienteLicencia expediente, CSolicitudLicencia solicitud, 
                                   GeopistaEditor geopistaEditor) {
        setCallesAfectadas(callesAfectadas, expediente, solicitud, geopistaEditor,true);
    }
    public void setCallesAfectadas(Vector callesAfectadas, CExpedienteLicencia expediente, CSolicitudLicencia solicitud,
                                   GeopistaEditor geopistaEditor, boolean activo) {
        this.callesAfectadas = callesAfectadas;
        this.expediente=expediente;
        this.solicitud=solicitud;
        this.geopistaEditor=geopistaEditor;
        actualizarModelo(callesAfectadas);
        load(null);
        setActiva(activo);
        /** Comprobamos que sea una operación de CONSULTA de Licencias de Ocupacion. */
        consulta= !activo;
    }
    private void actualizarModelo(Vector callesAfectadas)
    {
        DefaultListModel  listModel= new DefaultListModel();
        if (callesAfectadas!=null)
        {
            for (Enumeration e=callesAfectadas.elements();e.hasMoreElements();)
               listModel.addElement(e.nextElement());
        }
        jListCalles.setModel(listModel);
    }
     private void borrar()
     {
        if (afectadaSelected==null) return;
        int ok= JOptionPane.showConfirmDialog(this, literales.getString("Licencias.confirmarBorrado"), literales.getString("Licencias.tittle"), JOptionPane.YES_NO_OPTION);
        if (ok == JOptionPane.NO_OPTION) return;

        callesAfectadas.remove(afectadaSelected);
        actualizarModelo(callesAfectadas);
        load(null);
     }
     public void load(CalleAfectada afectada)
    {
        afectadaSelected=afectada;
        jTextFieldNumero.setText((afectada==null||afectada.getNumero()==null?"":afectada.getNumero().toString()));
        jTextFieldCalle.setText((afectada==null||afectada.getNombre()==null?"":afectada.getNombre()));
        jTextFieldComentario.setText((afectada==null||afectada.getComentario()==null?"":afectada.getComentario().toString()));
        if (afectada==null|| afectada.getTipoViaIne()==null)
            jComboBoxTipoVia.setSelectedIndex(0);
        else
            jComboBoxTipoVia.setSelectedPatron(afectada.getTipoViaIne());
    }
     public CalleAfectada save()
    {
        afectadaSelected.setNombre(jTextFieldCalle.getText());
        try{
        /*
        afectadaSelected.setNumero((jTextFieldNumero.getText().length()>0?
                new Integer((jTextFieldNumero.getNumber()).intValue()):null));
        */
        afectadaSelected.setNumero((jTextFieldNumero.getText().length()>0?
                jTextFieldNumero.getText():null));

        }catch(Exception e){}
        afectadaSelected.setComentario(jTextFieldComentario.getText());
        afectadaSelected.setTipoViaIne(jComboBoxTipoVia.getSelectedIndex()==0?null:jComboBoxTipoVia.getSelectedPatron());
        return afectadaSelected;
    }
    public boolean checkCampos()
    {
          return (jTextFieldCalle.getText().length()>0);
    }
    public void seleccionar()
    {
        setEnabled(false);
        int selectedRow = jListCalles.getMinSelectionIndex();
        if (selectedRow<0)return;
        ListModel auxList=jListCalles.getModel();
        CalleAfectada auxCalle=(CalleAfectada)auxList.getElementAt(selectedRow);
        load(auxCalle);
    }
    public void setEnabled(boolean bValue)
    {
        jTextFieldNumero.setEditable(bValue);
        jTextFieldCalle.setEditable(bValue);
        jTextFieldComentario.setEditable(bValue);
        jComboBoxTipoVia.setEnabled(bValue);
        /** Comprobamos que sea una operación de CONSULTA de Licencias de Ocupacion, en cuyo caso no sera editable. */
        if (consulta) jButtonNew.setEnabled(bValue); else jButtonNew.setEnabled(!bValue);
        jButtonAdd.setEnabled(bValue);
        /** Comprobamos que sea una operación de CONSULTA de Licencias de Ocupacion, en cuyo caso no sera editable. */
        if (consulta) jButtonDelete.setEnabled(bValue); else jButtonDelete.setEnabled(!bValue);
    }
    public void setActiva(boolean bValue) {
        jButtonNew.setEnabled(bValue);
        jButtonDelete.setEnabled(bValue);
        jButtonBuscar.setEnabled(bValue);
        jButtonAdd.setEnabled(false);
    }
    private void imprimirInforme()
    {
        try
        {
            if (expediente==null||callesAfectadas == null || callesAfectadas.size()==0)
            {
                new JOptionPane(literales.getString("JPanelInformes.mensaje2"),
                    JOptionPane.INFORMATION_MESSAGE).createDialog(desktop,"INFORMATION").show();
                return;
            }
            //Rellenamos los datos necesarios para impresion
            for (Enumeration e=callesAfectadas.elements();e.hasMoreElements();)
            {
                CalleAfectada auxCalle=(CalleAfectada)e.nextElement();
                auxCalle.setEstructuraTipoViaIne(Estructuras.getListaTiposViaINE());
                auxCalle.setLocale(literales.getLocale().toString());
            }
            expediente.setEstructuraEstado(Estructuras.getListaEstadosOcupacion());
            expediente.setEstructuraTipoOcupacion(Estructuras.getListaTipoOcupacion());
            expediente.setLocale(literales.getLocale().toString());
            expediente.setSolicitud(solicitud);
            expediente.setCallesAfec(callesAfectadas);
            new GeopistaPrintableOcupaciones().printObjeto(FichasDisponibles.fichacallesafectadas, expediente , CExpedienteLicencia.class, geopistaEditor.getLayerViewPanel(), GeopistaPrintableOcupaciones.FICHA_OCUPACIONES_UTILIDADES);
    } catch (Exception ex) {
        logger.error("Exception al mostrar las features: " ,ex);
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JLabel jLabelCalle;
    private javax.swing.JLabel jLabelComentario;
    private javax.swing.JLabel jLabelNumero;
    private javax.swing.JList jListCalles;
    private javax.swing.JPanel jPanelAlto;
    private javax.swing.JPanel jPanelBajo;
    private javax.swing.JPanel jPanelBoAl;
    private javax.swing.JPanel jPanelBotoDa;
    private javax.swing.JPanel jPanelBotonera;
    private javax.swing.JPanel jPanelDa;
    private javax.swing.JPanel jPanelDatos;
    private javax.swing.JScrollPane jScrollPaneCalles;
    private javax.swing.JTextField jTextFieldCalle;
    private javax.swing.JTextField jTextFieldComentario;
    //private JNumberTextField jTextFieldNumero;
    private com.geopista.app.utilidades.TextField jTextFieldNumero;
    private javax.swing.JLabel jLabelTipo;
    private ComboBoxEstructuras jComboBoxTipoVia;
    // End of variables declaration//GEN-END:variables
}

class RendererCalles extends DefaultListCellRenderer
{
    private String locale;
    public RendererCalles(String locale)
    {
         this.locale=locale;
    }

   public void setLocale(String locale) {
        this.locale = locale;
    }

    public Component getListCellRendererComponent(JList l,
           Object value, int i, boolean s, boolean f)
    {
            CalleAfectada calle = (CalleAfectada)value;
            String sTitulo=(calle.getTipoViaIne()==null?"":Estructuras.getListaTiposViaINE().getDomainNode(calle.getTipoViaIne()).getTerm(locale))
                    + " " + calle.getNombre()+
                    (calle.getNumero()!=null?", "+calle.getNumero():"")+
                    (calle.getComentario()!=null?" - "+calle.getComentario():"");
            JLabel label =(JLabel) super.getListCellRendererComponent(l,sTitulo,i, s, f);
            label.setIcon(CUtilidadesComponentes.iconoCalle);
            return label;
    }
}

