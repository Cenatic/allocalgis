/**
 * MapImageParametricPropertiesPanel.java
 * © MINETUR, Government of Spain
 * This program is part of LocalGIS
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * MapImageParametricPropertiesPanel.java
 *
 * Created on 3 de enero de 2008, 15:57
 */

package com.geopista.reports.gui;

import it.businesslogic.ireport.JRField;
import it.businesslogic.ireport.JRParameter;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.security.SecureRandom;
import java.util.Iterator;
import java.util.List;
import java.util.SortedMap;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

import nickyb.sqleonardo.querybuilder.QueryModel;
import nickyb.sqleonardo.querybuilder.syntax.QuerySpecification;
import nickyb.sqleonardo.querybuilder.syntax.QueryTokens;
import nickyb.sqleonardo.querybuilder.syntax.QueryTokens._Expression;
import nickyb.sqleonardo.querybuilder.syntax.QueryTokens._TableReference;
import nickyb.sqleonardo.querybuilder.syntax.SQLParser;

import com.geopista.app.reports.ReportsManager;
import com.geopista.app.reports.maps.MapImageConstants;
import com.geopista.app.reports.maps.MapImageExpressionManager;
import com.geopista.app.reports.maps.MapImageSettings;
import com.geopista.app.reports.maps.vo.SelectedColumnVO;
import com.geopista.app.reports.maps.vo.SelectedLayerVO;
import com.geopista.app.reports.maps.vo.SelectedMapVO;
import com.geopista.reports.parameters.IReportParameterManager;

/**
 * IMPORTANTE: La clase Java ya no esta sincronizada con el fichero .form asociado.
 * @author  jpolo
 */
public class MapImageParametricPropertiesPanel extends javax.swing.JPanel {
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddScale;
    private javax.swing.JComboBox jComboBoxScale;
    private javax.swing.JComboBox jComboBoxScaleType;
    private javax.swing.JComboBox jComboBoxSelectionIdParameter;
    private javax.swing.JLabel jLabelScale;
    private javax.swing.JLabel jLabelSelectionId;
	private javax.swing.JLabel jLabelMapaSeleccionado;
    private javax.swing.JComboBox jComboBoxMapaSeleccionado;
	private javax.swing.JLabel jLabelCapaSeleccionada;
    private javax.swing.JComboBox jComboBoxCapaSeleccionada;
	private javax.swing.JLabel jLabelColumnaSeleccionada;
    private javax.swing.JComboBox jComboBoxColumnaSeleccionada;

	private javax.swing.JLabel jLabelCapasImprimir;
    private javax.swing.JList jListBoxCapasImprimir;

    // End of variables declaration//GEN-END:variables
    
	private MapImageReportElement mapImageReportElement;
	private MapImageSettings mapImageSettings;
		
	private static final Pattern userDefinedScalePattern = Pattern.compile("([0-9])*:([0-9])*");
	
    private MapScaleDialog mapScaleDialog = new MapScaleDialog();    

    private boolean updatingUI = false;
    
    private MapImagePropertiesPanel mapImagePropertiesPanel;
    
    //YR
    private static SelectedLayerVO capaPrevia;

    /** Creates new form MapImageParametricPropertiesPanel */
    public MapImageParametricPropertiesPanel(MapImagePropertiesPanel mapImagePropertiesPanel) {
    	mapImageSettings = new MapImageSettings();
        this.mapImagePropertiesPanel = mapImagePropertiesPanel;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        java.awt.GridBagConstraints gridBagConstraints;

        jLabelSelectionId = new javax.swing.JLabel();
        jComboBoxSelectionIdParameter = new javax.swing.JComboBox();
        jLabelScale = new javax.swing.JLabel();
        jComboBoxScaleType = new javax.swing.JComboBox();
        jComboBoxScale = new javax.swing.JComboBox();
        jButtonAddScale = new javax.swing.JButton();
        jLabelMapaSeleccionado = new javax.swing.JLabel(); 
        jComboBoxMapaSeleccionado = new javax.swing.JComboBox();
        jLabelCapaSeleccionada = new javax.swing.JLabel(); 
        jComboBoxCapaSeleccionada = new javax.swing.JComboBox();
        jLabelColumnaSeleccionada = new javax.swing.JLabel(); 
        jComboBoxColumnaSeleccionada = new javax.swing.JComboBox();

        jLabelCapasImprimir = new javax.swing.JLabel(); 
        //String [] elementos = {"3","b","c","d","e","f"};  
        DefaultListModel listModel = new DefaultListModel();  
        jListBoxCapasImprimir = new javax.swing.JList(listModel);
       
        
        setLayout(new java.awt.GridBagLayout());

        jLabelMapaSeleccionado.setText("Seleccione un mapa");
		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
		add(jLabelMapaSeleccionado, gridBagConstraints);
		
		jComboBoxMapaSeleccionado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
            	jComboBoxMapaSeleccionadoItemStateChanged(evt);
            }
        });

		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jComboBoxMapaSeleccionado, gridBagConstraints);

        jLabelCapaSeleccionada.setText("Seleccione capa");
		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
		add(jLabelCapaSeleccionada, gridBagConstraints);
		
		jComboBoxCapaSeleccionada.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
            	jComboBoxCapaSeleccionadaItemStateChanged(evt);
            }
        });
		
		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jComboBoxCapaSeleccionada, gridBagConstraints);

        jLabelColumnaSeleccionada.setText("Seleccione atributo identificador de la capa");
		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
		add(jLabelColumnaSeleccionada, gridBagConstraints);

		jComboBoxColumnaSeleccionada.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
            	jComboBoxColumnaSeleccionadaItemStateChanged(evt);
            }
        });

		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jComboBoxColumnaSeleccionada, gridBagConstraints);

        jLabelSelectionId.setText("Campo identificador en la consulta");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jLabelSelectionId.setEnabled(false);
        add(jLabelSelectionId, gridBagConstraints);

        jComboBoxSelectionIdParameter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxSelectionIdParameterItemStateChanged(evt);
            }
        });
        jComboBoxSelectionIdParameter.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jComboBoxSelectionIdParameter, gridBagConstraints);
        
        
        //----
        
        jLabelCapasImprimir.setText("Capas a visualizar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jLabelCapasImprimir.setEnabled(false);
        add(jLabelCapasImprimir, gridBagConstraints);

        MouseListener mouseListener = new MouseAdapter() {
            public void mouseClicked(MouseEvent mouseEvent) {
            	 mapImagePropertiesPanel.markUnsavedChanges();
			     readFormData();
             
            }
          };
        jListBoxCapasImprimir.addMouseListener(mouseListener);
        
        /*jListBoxCapasImprimir.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				 mapImagePropertiesPanel.markUnsavedChanges();
			     readFormData();
			}
        });*/
        
        
        jListBoxCapasImprimir.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.weightx = 100.0;        
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        
        JScrollPane acrossScrollBar= new JScrollPane();
        
        acrossScrollBar.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        acrossScrollBar.validate(); jListBoxCapasImprimir.validate();
        acrossScrollBar.setPreferredSize(new Dimension(3,60));
        acrossScrollBar.setViewportView(jListBoxCapasImprimir);
        add(acrossScrollBar,gridBagConstraints);
        
        
        //----

        jLabelScale.setText("Escala");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jLabelScale, gridBagConstraints);
        

        jComboBoxScaleType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automática", "Predefinida"}));
        jComboBoxScaleType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxScaleTypeItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        add(jComboBoxScaleType, gridBagConstraints);
        
        
        jComboBoxScale.setEditable(false);
        jComboBoxScale.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1:100", "1:200", "1:500", "1:1000" }));
        jComboBoxScale.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxScaleItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        add(jComboBoxScale, gridBagConstraints);

        
        jButtonAddScale.setText("+");
        jButtonAddScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddScaleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jButtonAddScale, gridBagConstraints);
        
        
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddScaleActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        mapScaleDialog.setVisible(true);

        String scale = mapScaleDialog.getScale();
        if (!scale.equals("")) {
            mapScaleDialog.setScale("");
            // obtenemos el indice seleccionado
            int selectedIndexOld = jComboBoxScale.getSelectedIndex();
            // Intentamos seleccionar la escala introducida para evitar incluir escalas repetidas
            jComboBoxScale.setSelectedItem(scale);
            // Si ha cambiado el indice seleccionado no hay que insertar el elemento, en otro caso se inserta
            int selectedIndexNew = jComboBoxScale.getSelectedIndex();
            if (selectedIndexNew == selectedIndexOld) {
                jComboBoxScale.addItem(scale);
                jComboBoxScale.setSelectedItem(scale);
            }
        }
    }

    private void jComboBoxSelectionIdParameterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxSelectionIdParameterItemStateChanged
        if (updatingUI){
        	return;
        }

        mapImagePropertiesPanel.markUnsavedChanges();

        readFormData();
    }//GEN-LAST:event_jComboBoxSelectionIdParameterItemStateChanged

    private void jComboBoxScaleTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxScaleTypeItemStateChanged
        if (jComboBoxScaleType.getSelectedItem().equals(MapImageConstants.SCALE_TYPE_AUTOMATIC)) {
            jComboBoxScale.setEnabled(false);
            jButtonAddScale.setEnabled(false);
        } else {
            jComboBoxScale.setEnabled(true);
            jButtonAddScale.setEnabled(true);
        }

        if (updatingUI){
        	return;
        }

        mapImagePropertiesPanel.markUnsavedChanges();

        readFormData();
    }//GEN-LAST:event_jComboBoxScaleTypeItemStateChanged

    private void jComboBoxScaleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxScaleItemStateChanged
    	if (updatingUI){
        	return;
        }
    	
    	mapImagePropertiesPanel.markUnsavedChanges();
    	
        readFormData();
    }//GEN-LAST:event_jComboBoxScaleItemStateChanged
       
    private String getScale(){
		String scaleType = (String) jComboBoxScaleType.getSelectedItem();
		String scale = null;

		if (scaleType.equals(MapImageConstants.SCALE_TYPE_AUTOMATIC) ||
				scaleType.equals(MapImageConstants.SCALE_TYPE_INTERACTIVE)) {
			scale = scaleType;
		} else {
			scale = (String) jComboBoxScale.getSelectedItem();
			Matcher scaleMatcher = userDefinedScalePattern.matcher(scale);
			if (!scaleMatcher.matches()) {
				scale = MapImageConstants.SCALE_TYPE_AUTOMATIC;
			}
		}

		return scale;
	}
    
    private void jComboBoxMapaSeleccionadoItemStateChanged(java.awt.event.ItemEvent evt) {                                                               
        if (updatingUI){
            return;
        }

        
        SelectedMapVO mapaSeleccionado = (SelectedMapVO) jComboBoxMapaSeleccionado.getSelectedItem();
        if (mapaSeleccionado != null) {
        	((DefaultListModel)jListBoxCapasImprimir.getModel()).removeAllElements();
        	jListBoxCapasImprimir.setSelectedIndex(-1);	
        	loadAvailableCapas(mapaSeleccionado.getIdMap());
        }
        
        mapImagePropertiesPanel.markUnsavedChanges();

        readFormData();
    }  
	
    private void jComboBoxCapaSeleccionadaItemStateChanged(java.awt.event.ItemEvent evt) {
        if (updatingUI){
            return;
        }
        
        //YR--
        capaPrevia = (SelectedLayerVO)evt.getItem();
        int[] indicesSeleccionadosPrevio = jListBoxCapasImprimir.getSelectedIndices();
        String layers = mapImageSettings.getLayers();
        

        SelectedLayerVO capaSeleccionada = (SelectedLayerVO) jComboBoxCapaSeleccionada.getSelectedItem();
        if (capaSeleccionada != null) {
        	loadAvailableColumnas(capaSeleccionada.getIdCapa());        	
        }
        
        
        int[] indicesSeleccionados=new int[((DefaultListModel)jListBoxCapasImprimir.getModel()).size()];
    	int contadorIndices=0;
    	for (int i=0; i < ((DefaultListModel)jListBoxCapasImprimir.getModel()).size(); i++) {
        	 SelectedLayerVO capaSeleccionadaImprimir = (SelectedLayerVO)jListBoxCapasImprimir.getModel().getElementAt(i);
        	 if (capaSeleccionadaImprimir.getNombre().equals(capaSeleccionada.getNombre())){
        		 //jListBoxCapasImprimir.setSelectedIndex(i);
        		 indicesSeleccionados[contadorIndices++]=i;
        	 }	     
//        	 else if (capaSeleccionadaImprimir.getNombre().equals("lcg_pnoa")){
//        		 //jListBoxCapasImprimir.setSelectedIndex(i);
//        		 indicesSeleccionados[contadorIndices++]=i;
//        	 }
        	 //YR--
        	 else if (capaSeleccionadaImprimir.getNombre().equals(capaPrevia.getNombre())){
        		 //jListBoxCapasImprimir.setSelectedIndex(i);
        		 indicesSeleccionados[contadorIndices++]=-1;
        	 }
        	 else if (layers.contains(capaSeleccionadaImprimir.getNombre())){
        		 indicesSeleccionados[contadorIndices++]=i;
        	 }
        	 else 
        		 indicesSeleccionados[contadorIndices++]=-1;
        	 
    	}
    	jListBoxCapasImprimir.removeSelectionInterval(0, ((DefaultListModel)jListBoxCapasImprimir.getModel()).size());
    	jListBoxCapasImprimir.setSelectedIndices(indicesSeleccionados);
        
        mapImagePropertiesPanel.markUnsavedChanges();

        readFormData();
    }

    private void jComboBoxColumnaSeleccionadaItemStateChanged(java.awt.event.ItemEvent evt) {
        if (updatingUI){
            return;
        }

        // Busqueda del campo de la query asociado a la columna
        String columnaQuery = null;
        SelectedColumnVO columnaSeleccionada = (SelectedColumnVO) jComboBoxColumnaSeleccionada.getSelectedItem();
        try {
        	if (columnaSeleccionada != null) {
        		String nombreColumna = columnaSeleccionada.getNombre();
        		String nombreTabla = columnaSeleccionada.getNombreTabla();
        		// Se parsea la query actual del informe
        		QueryModel qm = SQLParser.toQueryModel(IReportParameterManager.getQuery());
        		QuerySpecification qs = qm.getQueryExpression().getQuerySpecification();
        		// Comprobacion de que existe la tabla de la columna seleccionada en la query
        		_TableReference tr[] = qs.getFromClause();        	
        		String tablaQuery = null;
        		
        		StringBuffer sb=new StringBuffer();
        		for (int i=0; i<tr.length; i++) {
        			if (tr[i] instanceof QueryTokens.Table) {
        				QueryTokens.Table t = (QueryTokens.Table) tr[i];
        				sb.append("Comparando From:"+nombreTabla+" con:"+t.getName()+"\n");
        				if (nombreTabla.equalsIgnoreCase(t.getName())) {
        					tablaQuery = t.getName();
        					break;
        				}
        			}
        			else if (tr[i] instanceof QueryTokens.Join) {
        				QueryTokens.Join j = (QueryTokens.Join) tr[i];
        				//Comparamos con el left
        				String left=j.getCondition().getLeft().toString();
        				sb.append("Comparando Left:"+nombreTabla+" con:"+left+"\n");
        				if (left.contains(nombreTabla)) {
        					tablaQuery = left.substring(0,left.lastIndexOf("."));
        					break;
        				}
        				String right=j.getCondition().getRight().toString();
        				sb.append("Comparando Right:"+nombreTabla+" con:"+right+"\n");
        				if (right.contains(nombreTabla)) {
        					tablaQuery = right.substring(0,left.lastIndexOf("."));
        					break;
        				}
        			}
        		}
        		if (tablaQuery==null){
        			System.out.println("Columna de asociacion "+columnaSeleccionada.getNombre()+"."+columnaSeleccionada.getNombreTabla()+" no encontrada: Busqueda:\n"+sb.toString());
        		}
        		if (tablaQuery != null) {
        			// Comprobacion de que existe la columna seleccionada en la query        			
        			_Expression e[] = qs.getSelectList();
        			for (int i=0; i<e.length; i++) {
        				//En esta condicion solo entra no se porque cuando la query tiene un WHERE
        				if (e[i] instanceof QueryTokens.Column){
        					
        					
        					QueryTokens.Column c = (QueryTokens.Column) e[i];

        					String tablaComparar=c.getTable().toString();
        					String listatrozos[]=tablaComparar.split(" ");
        					if(listatrozos.length>1){
        						tablaComparar=listatrozos[listatrozos.length-1];
        					}
        					
        					tablaComparar=tablaComparar.replaceAll("\"", "");	
        					if (nombreColumna.equalsIgnoreCase(c.getName()) &&  nombreTabla.equalsIgnoreCase(tablaComparar) ) {
        						// Nos quedamos con el alias. Si no hay, con el nombre de la columna
        						if (c.getAlias() == null) {
            						columnaQuery = c.getName();
        						}
        						else {
        							columnaQuery = c.getAlias();
        						}
        						break;
        					}
        				}        				
        				else {
        					StringTokenizer st = new StringTokenizer(e[i].toString());
        					String name = st.nextToken();
        					if (nombreColumna.equalsIgnoreCase(name)) {
        						// Nos quedamos con el alias. Si no hay, con el nombre de la columna
        						if (st.hasMoreTokens()) {
        							while (st.hasMoreTokens()) {
        								columnaQuery = st.nextToken();
        							}
        						}
        						else {
        							columnaQuery = name;
        						}
        						break;
        					}
        					else{
        						//Si no casa exactamente intentamos buscar a ver si esta identificada
        						//con el nombre de la tabla (p.e. "parcelas"."referencia_catastral"
        						//String cadena="\"parcelas\".\"referencia_catastral\"";
        						try {
									Pattern capa = Pattern.compile("(.*)\\.\"(.*)\"");
									Matcher fit=capa.matcher(name);
									if (fit.matches()){
										//String todo=fit.group(0);
										//String tabla=fit.group(1);
										String campo=fit.group(2);
										if (nombreColumna.equalsIgnoreCase(campo)) {
											if (st.hasMoreTokens()) {
			        							while (st.hasMoreTokens()) {
			        								columnaQuery = st.nextToken();
			        							}
			        						}
			        						else {
			        							columnaQuery = campo;
			        						}
			        						break;
										}
									}
								} catch (Exception e1) {
									System.out.println("Columna a revisar:"+name);
									e1.printStackTrace();
								}        						
        					}
        				}
        			}
        			
        		}
        	}
        
        } catch (Exception e) {
        	e.printStackTrace();
        }

        // Se selecciona la columna de la query en el combo
		if (columnaQuery != null) {
			boolean found = false;
			for (int i = 0; i < jComboBoxSelectionIdParameter.getItemCount(); i++){
					JRField field = (JRField) jComboBoxSelectionIdParameter.getItemAt(i);
					if (field.getName().equalsIgnoreCase(columnaQuery)) {
					jComboBoxSelectionIdParameter.setSelectedIndex(i);
					found = true;
					break;
				}
			}
			if (!found) {
				jComboBoxSelectionIdParameter.setSelectedIndex(-1);
			}
		}
		else {
			jComboBoxSelectionIdParameter.setSelectedIndex(-1);
		}

		mapImagePropertiesPanel.markUnsavedChanges();
        
    	readFormData();
    }

    /**
     * Escribe el elemento imagen del mapa del informe con la configuracion que
     * hay en el atributo mapImageSettings
     */
    private void writeMapImageSettings(){
		String expression = MapImageExpressionManager.getExpression(mapImageSettings);

		mapImageReportElement.setImageExpression(expression);
		mapImageReportElement.setImageClass(MapImageConstants.MAP_IMAGE_CLASS_NAME);
    }
    
    /**
     * Lee la configuracion de la imagen de mapa a partir de la expresion del
     * elemento del informe. La configuracion leida queda guardada en el
     * atributo mapImageSettings
     */
    private void readMapImageSettings(){
		String expression = mapImageReportElement.getImageExpression();
		
		if (expression == null || !MapImageExpressionManager.isParametricMapImageExpression(expression)){			
			mapImageSettings.setScale(MapImageSettings.DEFAULT_SCALE);
			mapImageSettings.setImageKey(mapImageReportElement.getKey());
            mapImageSettings.setMapSelectionIdName(null);
            mapImageSettings.setIdMapImageType(null);
			mapImageSettings.setMapSelectionIdType(-1);
			mapImageSettings.setMapSelectionType(MapImageConstants.MAP_SELECTION_TYPE_PARAMETRIC);
			SecureRandom random = new SecureRandom();
			String id =String.valueOf(random.nextLong());	
			mapImageSettings.setIdUnicoImagen(id);
			mapImageSettings.setWidth(mapImageReportElement.getWidth());
			mapImageSettings.setHeight(mapImageReportElement.getHeight());
		}
		else {
			Vector availableParameters = IReportParameterManager.getAvailableParameters();
	    	Vector availableFields = IReportParameterManager.getAvailableFields();
	    	
			mapImageSettings = MapImageExpressionManager.parseExpression(expression);
			
			mapImageSettings.setWidth(mapImageReportElement.getWidth());
			mapImageSettings.setHeight(mapImageReportElement.getHeight());
			
			
			String mapSelectionIdName = mapImageSettings.getMapSelectionIdName();
			if (mapSelectionIdName != null){
				if (mapImageSettings.getMapSelectionIdType() ==
						MapImageConstants.MAP_SELECTION_ID_TYPE_FIELD){
					boolean found = false;
					for (int i = 0; i < availableFields.size(); i++){
						JRField field = (JRField) availableFields.get(i);
						if (field.getName().equals(mapSelectionIdName)){
							found = true;
							break;
						}
					}
					if (!found){
						mapImageSettings.setMapSelectionIdType(-1);
						mapImageSettings.setMapSelectionIdName(null);
					}
				}
				else if (mapImageSettings.getMapSelectionIdType() ==
						MapImageConstants.MAP_SELECTION_ID_TYPE_PARAMETER){
					boolean found = false;
					for (int i = 0; i < availableParameters.size(); i++){
						JRParameter parameter = (JRParameter) availableParameters.get(i);
						if (!parameter.isBuiltin() && parameter.getName().equals(mapSelectionIdName)){
							found = true;
							break;
						}
					}
					if (!found){
						mapImageSettings.setMapSelectionIdType(-1);
						mapImageSettings.setMapSelectionIdName(null);
					}
				}
			}
            String idMapImageType = mapImageSettings.getIdMapImageType();
            if (idMapImageType != null){
                SortedMap mapImageTypes = ReportsManager.getInstance().getMapImageTypes();
                if (mapImageTypes == null || mapImageTypes.get(idMapImageType) == null) {
                    mapImageSettings.setIdMapImageType(null);
                }
            }
		}

		return;
    }
    
    private void readFormData(){
    	String scale = getScale();
    	
    	int mapSelectionIdType = -1;
    	JRParameter mapIdParameter = null;
    	JRField mapIdField = null;
    	
    	Object variable = jComboBoxSelectionIdParameter.getSelectedItem();
    	if (variable != null){
    		if (variable instanceof JRParameter){
    			mapSelectionIdType = MapImageConstants.MAP_SELECTION_ID_TYPE_PARAMETER;
    			mapIdParameter = (JRParameter) variable;
    		}
    		else if (variable instanceof JRField){
    			mapSelectionIdType = MapImageConstants.MAP_SELECTION_ID_TYPE_FIELD;
    			mapIdField = (JRField) variable;
    		}

    		mapImageSettings.setScale(scale);
            mapImageSettings.setMapSelectionIdType(mapSelectionIdType);
            if (mapSelectionIdType == MapImageConstants.MAP_SELECTION_ID_TYPE_PARAMETER){
                mapImageSettings.setMapSelectionIdName(mapIdParameter.getName());
            }
            else if (mapSelectionIdType == MapImageConstants.MAP_SELECTION_ID_TYPE_FIELD){
                mapImageSettings.setMapSelectionIdName(mapIdField.getName());
            }
    	}
    	else {
    		mapImageSettings.setMapSelectionIdName(null);
    	}

    	SelectedMapVO mapaSeleccionado = (SelectedMapVO)jComboBoxMapaSeleccionado.getSelectedItem();
        if (mapaSeleccionado != null){
            mapImageSettings.setMapId(mapaSeleccionado.getIdMap());
        }
        
	    SelectedLayerVO capaSeleccionada = (SelectedLayerVO)jComboBoxCapaSeleccionada.getSelectedItem();
        if (capaSeleccionada != null){
            mapImageSettings.setCapa(capaSeleccionada.getNombre());
        }

	    SelectedColumnVO columnaSeleccionada = (SelectedColumnVO) jComboBoxColumnaSeleccionada.getSelectedItem();
        if (columnaSeleccionada != null){
            mapImageSettings.setColumna(columnaSeleccionada.getNombre());
            mapImageSettings.setTabla(columnaSeleccionada.getNombreTabla());
        }
        
        
        //TODO
        //Seleccion de capas a pintar.        
        int selected[] = jListBoxCapasImprimir.getSelectedIndices( );

        String capasAImprimir="";
        if (jListBoxCapasImprimir.getSelectedIndex()!=-1){
	        for (int i=0; i < selected.length; i++) {
	        	if (i<jListBoxCapasImprimir.getModel().getSize()){
		        	 SelectedLayerVO capaSeleccionadaImprimir = (SelectedLayerVO)jListBoxCapasImprimir.getModel().getElementAt(selected[i]);
		             if (capaSeleccionadaImprimir != null){
		            	 capasAImprimir+=capaSeleccionadaImprimir.getNombre()+";";
		             }
	        	}
	        }
        }
        if (capasAImprimir.equals(""))
        	mapImageSettings.setLayers(null);
        else{
        	capasAImprimir=capasAImprimir.substring(0,capasAImprimir.length()-1);
        	mapImageSettings.setLayers(capasAImprimir);
        }
        

        if (variable != null || (mapaSeleccionado!=null && capaSeleccionada!=null && columnaSeleccionada!=null)) {
            writeMapImageSettings();
        }

    }
    
    /**
     * Muestra los datos del formulario del panel y selecciona los combos con
     * los valores guardados en las preferencias de la imagen del mapa (atributo
     * mapImageSettings)
     */
    private void showFormData(){
    	updatingUI = true;
		
    	try {			
			String scale = mapImageSettings.getScale();
            String mapSelectionIdName = mapImageSettings.getMapSelectionIdName();
            String idMapImageType = mapImageSettings.getIdMapImageType();
			
			loadAvailableVariables();
					
			//loadAvailableMapImageTypes();
			
			if (mapSelectionIdName == null){
				jComboBoxSelectionIdParameter.setSelectedIndex(-1);
			}
			else {
				int numberOfVariables = jComboBoxSelectionIdParameter.getItemCount();
				jComboBoxSelectionIdParameter.setSelectedIndex(-1);
				for (int i = 0; i < numberOfVariables; i++){
					Object variable = jComboBoxSelectionIdParameter.getItemAt(i);;
					if (variable instanceof JRParameter){
						JRParameter parameter = (JRParameter) variable;
						if (parameter.getName().equals(mapSelectionIdName)){
							jComboBoxSelectionIdParameter.setSelectedIndex(i);
							break;
						}
					}
					else if (variable instanceof JRField){
						JRField field = (JRField) variable;
						if (field.getName().equals(mapSelectionIdName)){
							jComboBoxSelectionIdParameter.setSelectedIndex(i);
							break;
						}
					}
				}	
			}

			if (scale.equals(MapImageConstants.SCALE_TYPE_AUTOMATIC)) {
				jComboBoxScaleType.setSelectedItem(scale);		
                jComboBoxScale.setEnabled(false);
                jButtonAddScale.setEnabled(false);
			} else {
				jComboBoxScaleType.setSelectedItem(MapImageConstants.SCALE_TYPE_USER_DEFINED);
                jComboBoxScale.setEnabled(true);
                jButtonAddScale.setEnabled(true);
				int currentScaleIndex = jComboBoxScale.getSelectedIndex();
				jComboBoxScale.setSelectedItem(scale);
				if (jComboBoxScale.getSelectedIndex() == -1) {
					jComboBoxScale.addItem(scale);
					jComboBoxScale.setSelectedItem(scale);
				} else if (currentScaleIndex == jComboBoxScale.getSelectedIndex() &&
						!((String) jComboBoxScale.getSelectedItem()).equals(scale)) {
					jComboBoxScale.addItem(scale);
					jComboBoxScale.setSelectedItem(scale);
				}
			}
			
			loadAvailableMapaSeleccionado();
			int mapaId = mapImageSettings.getMapId();
	        for (int i = 0; i < jComboBoxMapaSeleccionado.getItemCount(); i++){
	        	SelectedMapVO mapaSeleccionado = (SelectedMapVO) jComboBoxMapaSeleccionado.getItemAt(i);
	            if (mapaSeleccionado.getIdMap() == mapaId) {
	            	jComboBoxMapaSeleccionado.setSelectedIndex(i);
	            	break;
	            }
	        }   

	        SelectedMapVO mapaSeleccionado = (SelectedMapVO) jComboBoxMapaSeleccionado.getSelectedItem();
	        if (mapaSeleccionado != null) {
	        	loadAvailableCapas(mapaSeleccionado.getIdMap());
	        }

	        for (int i = 0; i < jComboBoxCapaSeleccionada.getItemCount(); i++) {
	        	SelectedLayerVO capaSeleccionada = (SelectedLayerVO) jComboBoxCapaSeleccionada.getItemAt(i);
	            if (capaSeleccionada.getNombre().equals(mapImageSettings.getCapa())) {
	            	jComboBoxCapaSeleccionada.setSelectedIndex(i);
	            	break;
	            }
	        }   
			
	        SelectedLayerVO capaSeleccionada = (SelectedLayerVO) jComboBoxCapaSeleccionada.getSelectedItem();
	        if (capaSeleccionada != null) {
	        	loadAvailableColumnas(capaSeleccionada.getIdCapa());
	        }

	        for (int i = 0; i < jComboBoxColumnaSeleccionada.getItemCount(); i++) {
	        	SelectedColumnVO columnaSeleccionada = (SelectedColumnVO) jComboBoxColumnaSeleccionada.getItemAt(i);
	            if (columnaSeleccionada.getNombre().equals(mapImageSettings.getColumna())) {
	            	jComboBoxColumnaSeleccionada.setSelectedIndex(i);
	            	break;
	            }
	        }   
	        
	        String layers = mapImageSettings.getLayers();
	        
	        if (mapSelectionIdName!=null){
	        	jListBoxCapasImprimir.setEnabled(true);
	        }
	      
	        if (layers!=null){
	        	int[] indicesSeleccionados=new int[((DefaultListModel)jListBoxCapasImprimir.getModel()).size()];
	         	int contadorIndices=0;
	        	DefaultListModel model=(DefaultListModel)jListBoxCapasImprimir.getModel();
	        	for (int i=0;i<model.size();i++){	      
	        		SelectedLayerVO elem=(SelectedLayerVO)model.getElementAt(i);
	                if (mapImageSettings.getLayers().contains(elem.getNombre())){
	                	indicesSeleccionados[contadorIndices++]=i;	                	
	                }
	                else{
	                	indicesSeleccionados[contadorIndices++]=-1;
	                }
	                
	        	}
	        	jListBoxCapasImprimir.removeSelectionInterval(0, ((DefaultListModel)jListBoxCapasImprimir.getModel()).size());
	        	jListBoxCapasImprimir.setSelectedIndices(indicesSeleccionados);
	        }
	        else{
	        	
	        }

		} catch (Exception e) {			
			e.printStackTrace();
		}
		
		updatingUI = false;
    }

    private void loadAvailableVariables() {
    	//Vector availableParameters = IReportParameterManager.getAvailableParameters();
    	Vector availableFields = IReportParameterManager.getAvailableFields();

		jComboBoxSelectionIdParameter.removeAllItems();
		int numberOfFields = availableFields.size();
		for (int i = 0; i < numberOfFields; i++) {
			JRField field = (JRField) availableFields.get(i);
			jComboBoxSelectionIdParameter.addItem(field);
		}
		
//		int numberParameters = availableParameters.size();
//		for (int i = 0; i < numberParameters; i++) {
//			JRParameter parameter = (JRParameter) availableParameters.get(i);
//			/*
//			 * Solo insertamos los parametros que no sean predefinidos
//			 */
//			if (!parameter.isBuiltin()) {
//			    jComboBoxSelectionIdParameter.addItem(parameter);
//			}
//		}
	}
    
	private void loadAvailableMapaSeleccionado() {
        jComboBoxMapaSeleccionado.removeAllItems();

        List mapasSeleccionados = ReportsManager.getInstance().getMapasPrivadosPublicados();
        if (mapasSeleccionados.isEmpty()) {
        	JOptionPane.showMessageDialog(this, "Debe existir al menos un mapa privado publicado", "", JOptionPane.WARNING_MESSAGE);
        }
        else {
        	Iterator it = mapasSeleccionados.iterator();
        	while (it.hasNext()) {
        		SelectedMapVO elem = (SelectedMapVO) it.next();
        		jComboBoxMapaSeleccionado.addItem(elem);
        	}
        }
    }

	private void loadAvailableCapas(int idMapa) {
        jComboBoxCapaSeleccionada.removeAllItems();

        List capasSeleccionadas = ReportsManager.getInstance().getCapasMapa(idMapa);
        Iterator it = capasSeleccionadas.iterator();
        ((DefaultListModel)jListBoxCapasImprimir.getModel()).removeAllElements();
        jListBoxCapasImprimir.setEnabled(true);
        boolean elementos=false;
        
        while (it.hasNext()) {
        	elementos=true;
        	SelectedLayerVO elem = (SelectedLayerVO) it.next();
            jComboBoxCapaSeleccionada.addItem(elem);
            ((DefaultListModel)jListBoxCapasImprimir.getModel()).addElement(elem);                        
        }
        
        if (elementos){
        	SelectedLayerVO lcg_pnoa = new SelectedLayerVO("lcg_pnoa","lcg_pnoa");
        	((DefaultListModel)jListBoxCapasImprimir.getModel()).add(0,lcg_pnoa);    

        	SelectedLayerVO lcg_point_reports = new SelectedLayerVO("lcg_point_reports","lcg_point_reports");
        	((DefaultListModel)jListBoxCapasImprimir.getModel()).add(1,lcg_point_reports);    
        	
        	SelectedLayerVO lcg_line_reports = new SelectedLayerVO("lcg_line_reports","lcg_line_reports");
        	((DefaultListModel)jListBoxCapasImprimir.getModel()).add(1,lcg_line_reports);    
        	
        	SelectedLayerVO lcg_polygon_reports = new SelectedLayerVO("lcg_polygon_reports","lcg_polygon_reports");
        	((DefaultListModel)jListBoxCapasImprimir.getModel()).add(1,lcg_polygon_reports);    
        	
        	
        	SelectedLayerVO capaSeleccionada=(SelectedLayerVO)jComboBoxCapaSeleccionada.getSelectedItem();
        	
        	//Activamos solo la seleccionada y como mucho la del pnoa
        	//El usuario posteriormente podría añadir mas.
        	int[] indicesSeleccionados=new int[((DefaultListModel)jListBoxCapasImprimir.getModel()).size()];
        	int contadorIndices=0;
        	for (int i=0; i < ((DefaultListModel)jListBoxCapasImprimir.getModel()).size(); i++) {
	        	 SelectedLayerVO capaSeleccionadaImprimir = (SelectedLayerVO)jListBoxCapasImprimir.getModel().getElementAt(i);
	        	 if (capaSeleccionadaImprimir.getNombre().equals(capaSeleccionada.getNombre())){
	        		 //jListBoxCapasImprimir.setSelectedIndex(i);
	        		 indicesSeleccionados[contadorIndices++]=i;;
	        	 }	     
	        	 else if (capaSeleccionadaImprimir.getNombre().equals("lcg_pnoa")) {
	        		 //jListBoxCapasImprimir.setSelectedIndex(i);
	        		 indicesSeleccionados[contadorIndices++]=i;;
	        	 }
	        	 else 
	        		 indicesSeleccionados[contadorIndices++]=-1;
        	}

        	jListBoxCapasImprimir.removeSelectionInterval(0, ((DefaultListModel)jListBoxCapasImprimir.getModel()).size());
        	jListBoxCapasImprimir.setSelectedIndices(indicesSeleccionados);
        	//jListBoxCapasImprimir.getSelectionModel().setSelectionInterval(0, ((DefaultListModel)jListBoxCapasImprimir.getModel()).size());
        }
        
    }

	private void loadAvailableColumnas(int idCapa) {
        jComboBoxColumnaSeleccionada.removeAllItems();

        List columnasSeleccionadas = ReportsManager.getInstance().getColumnasCapa(idCapa);
        Iterator it = columnasSeleccionadas.iterator();
        while (it.hasNext()) {
            SelectedColumnVO elem = (SelectedColumnVO) it.next();
            jComboBoxColumnaSeleccionada.addItem(elem);
        }
    }

	public void setMapImageReportElement(MapImageReportElement mapImageReportElement) {
		this.mapImageReportElement = mapImageReportElement;
		
		readMapImageSettings();
		writeMapImageSettings();		
		showFormData();
	}

	public boolean validateFields() {
		Object o = jComboBoxSelectionIdParameter.getSelectedItem();
		if (o != null && o instanceof JRField) {
			JRField f = (JRField) o; 
			if (f==null || f.getName()==null || f.getName().trim().equals("")) {
				JOptionPane.showMessageDialog(this, "El atributo identificador debe estar incluido en la consulta", "", JOptionPane.ERROR_MESSAGE);
				return false;
			}
		}
		return true;
	}

	public static void main (String args[]){
		//String cadena="\"parcelas\".\"referencia_catastral\"";
		String cadena="parcelas.\"referencia_catastral\"";
		//Pattern capa = Pattern.compile("\"(.*)\"\\.\"(.*)\"");
		Pattern capa = Pattern.compile("(.*)\\.\"(.*)\"");
		Matcher fit=capa.matcher(cadena);
		if (fit.matches()){
			String todo=fit.group(0);
			String tabla=fit.group(1);
			String campo=fit.group(2);
			System.out.println("CASA:"+tabla);
			System.out.println("CAMPO:"+campo);
		}
		else{
			System.out.println("NO CASA");
		}
	}
}
