/**
 * CGeneracionPlanos.java
 * © MINETUR, Government of Spain
 * This program is part of LocalGIS
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * CCreacionLicencias.java
 *
 * Created on 16 de abril de 2004, 14:38
 */

package com.geopista.app.licencias.planos;
/**
 * The GEOPISTA project is a set of tools and applications to manage
 * geographical data for local administrations.
 *
 * Copyright (C) 2004 INZAMAC-SATEC UTE
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
* USA.
 *
 * For more information, contact:
 *
 *
 * www.geopista.com
 *
 *
 */
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Dimension;
import java.util.Hashtable;
import java.util.ResourceBundle;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import org.apache.log4j.Logger;

import com.geopista.app.licencias.CConstantesLicencias;
import com.geopista.app.licencias.CMainLicencias;
import com.geopista.app.licencias.CUtilidadesComponentes;
import com.geopista.app.licencias.IMultilingue;
import com.geopista.app.licencias.actividad.MainActividad;
import com.geopista.app.licencias.tableModels.CListaAnexosTableModel;
import com.geopista.app.licencias.utilidades.JInternalFrameLicencias;
import com.geopista.app.printer.FichasDisponibles;
import com.geopista.app.printer.GeopistaPrintable;
import com.geopista.editor.GeopistaEditor;
import com.geopista.protocol.CResultadoOperacion;
import com.geopista.protocol.licencias.COperacionesLicencias;
import com.geopista.protocol.licencias.CSolicitudLicencia;


/**
 * @author charo
 */
public class CGeneracionPlanos extends JInternalFrameLicencias implements IMultilingue {
	Logger logger = Logger.getLogger(CGeneracionPlanos.class);

	/**
	 * Modelo para el componente listaAnexosJTable
	 */
	final CListaAnexosTableModel _listaAnexosTableModel = new CListaAnexosTableModel();

	/**
	 * Creates new form CCreacionLicencias
	 */
	public CGeneracionPlanos(JFrame desktop, ResourceBundle literales) {
		this.desktop = desktop;
        this.literales=literales;
        CUtilidadesComponentes.menuLicenciasSetEnabled(false, this.desktop);
		initComponents();
		configureComponets();
        if (desktop instanceof CMainLicencias)
          loadMapa(276);
        if (desktop instanceof MainActividad)
          loadMapa(273);
	}

	private boolean configureComponets() {
        if (desktop instanceof CMainLicencias){
            if (CMainLicencias.geopistaEditor == null) CMainLicencias.geopistaEditor= new GeopistaEditor("workbench-properties-simple.xml");
            setGeopistaEditor(CMainLicencias.geopistaEditor);
        }else if (desktop instanceof MainActividad){
            if (MainActividad.geopistaEditor == null) MainActividad.geopistaEditor= new GeopistaEditor("workbench-properties-simple.xml");
            setGeopistaEditor(MainActividad.geopistaEditor);
        }
		CConstantesLicencias.referenciasCatastrales = new Hashtable();
        renombrarComponentes(literales);
		return true;
	}


	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        templateJScrollPane = new javax.swing.JScrollPane();
        jPanelPrincipal = new javax.swing.JPanel();
        jPanelBotonera = new javax.swing.JPanel();
        salirJButton = new javax.swing.JButton();
        previewJButton = new javax.swing.JButton();
        editorMapaJPanel = new javax.swing.JPanel();
        generarJButton = new javax.swing.JButton();
        jPanelOpciones = new javax.swing.JPanel();
        todosExpedientesJRadioButton = new javax.swing.JRadioButton();
        expedienteEspecificoJRadioButton = new javax.swing.JRadioButton();
        expedienteJTextField = new javax.swing.JTextField();
        jPanelBusqueda = new JPanelBusqueda(desktop,this, literales);

        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        setClosable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed();
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanelPrincipal.setLayout(new BorderLayout());
        jPanelBotonera.setBorder(new javax.swing.border.EtchedBorder());
        

        previewJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewJButtonActionPerformed();
            }
        });
        jPanelBotonera.add(previewJButton);

        

        generarJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarJButtonActionPerformed();
            }
        });
        jPanelBotonera.add(generarJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 110, -1));
        salirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirJButtonActionPerformed();
            }
        });
        jPanelBotonera.add(salirJButton);
        jPanelPrincipal.add(jPanelBotonera, BorderLayout.SOUTH);
        editorMapaJPanel.setLayout(new java.awt.GridLayout(1, 0));
        jPanelPrincipal.add(editorMapaJPanel, BorderLayout.CENTER);

        jPanelOpciones.setPreferredSize(new Dimension(350,350));
        jPanelOpciones.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        todosExpedientesJRadioButton.setSelected(true);
        buttonGroup1.add(todosExpedientesJRadioButton);
        todosExpedientesJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPanelBusqueda.setEnabled(true);
                previewJButtonActionPerformed();
            }
        });
        jPanelOpciones.add(todosExpedientesJRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jPanelOpciones.add(jPanelBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 310, 425));



        buttonGroup1.add(expedienteEspecificoJRadioButton);
        expedienteEspecificoJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPanelBusqueda.setEnabled(false);
                expedienteEspecificoJRadioButtonActionPerformed();
            }
        });

        jPanelOpciones.add(expedienteEspecificoJRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, -1));

        expedienteJTextField.setEditable(false);
        jPanelOpciones.add(expedienteJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 530, 190, -1));
        jPanelPrincipal.add(jPanelOpciones, BorderLayout.WEST);
        templateJScrollPane.setViewportView(jPanelPrincipal);
        getContentPane().add(templateJScrollPane);
    }//GEN-END:initComponents

    private void formInternalFrameClosed() {//GEN-FIRST:event_formInternalFrameClosed
        CConstantesLicencias.helpSetHomeID = "geopistaIntro";
        CUtilidadesComponentes.menuLicenciasSetEnabled(true, this.desktop);
    }//GEN-LAST:event_formInternalFrameClosed

	private void expedienteEspecificoJRadioButtonActionPerformed() {//GEN-FIRST:event_expedienteEspecificoJRadioButtonActionPerformed
		CUtilidadesComponentes.showSearchDialog(desktop,literales);
		expedienteJTextField.setText(CConstantesLicencias.searchValue);
		previewJButtonActionPerformed();
	}//GEN-LAST:event_expedienteEspecificoJRadioButtonActionPerformed

	private void generarJButtonActionPerformed() {//GEN-FIRST:event_generarJButtonActionPerformed
        try
        {
            if (desktop instanceof CMainLicencias)
                new GeopistaPrintable().printObjeto(FichasDisponibles.planolicencias, null , null, CMainLicencias.geopistaEditor.getLayerViewPanel(), GeopistaPrintable.FICHA_LICENCIAS_PLANOS);
            if (desktop instanceof MainActividad)
                new GeopistaPrintable().printObjeto(FichasDisponibles.planoactividad, null , null, MainActividad.geopistaEditor.getLayerViewPanel(), GeopistaPrintable.FICHA_LICENCIAS_PLANOS);

        }catch(Exception e)
        {
            logger.error("Error al generar el plano",e);
        }
	}

	private void previewJButtonActionPerformed()
    {
    	this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    	try {
    		if (todosExpedientesJRadioButton.isSelected()) {
				refreshFeatureSelection(COperacionesLicencias.getParcelario(new Hashtable()));
			} else if (expedienteEspecificoJRadioButton.isSelected())
            {
            	if ((expedienteJTextField.getText() == null) || (expedienteJTextField.getText().trim().equals(""))) {
					mostrarMensaje("Por favor, selecione un expediente específico.");
					logger.warn("No hay un expediente especifico seleccionado.");
					this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
					return;
				}
            	CResultadoOperacion resultadoOperacion = COperacionesLicencias.getExpedienteLicencia(expedienteJTextField.getText(), literales.getLocale().toString(), null);
				CSolicitudLicencia solicitudLicencia = (CSolicitudLicencia) resultadoOperacion.getSolicitudes().get(0);
				Vector referenciasCatastrales = solicitudLicencia.getReferenciasCatastrales();
				refreshFeatureSelection(referenciasCatastrales);
			}
		} catch (Exception ex) {
			logger.error("Exception: " , ex);
		}
		this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	}

	public void mostrarMensaje(String mensaje) {
		JOptionPane.showMessageDialog(desktop, mensaje);
	}


	private void salirJButtonActionPerformed() {//GEN-FIRST:event_salirJButtonActionPerformed
        CConstantesLicencias.helpSetHomeID= "licenciasIntro";
		dispose();
	}//GEN-LAST:event_salirJButtonActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelBotonera;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton expedienteEspecificoJRadioButton;
    private javax.swing.JTextField expedienteJTextField;
    private javax.swing.JButton generarJButton;
    private javax.swing.JPanel jPanelOpciones;
    private javax.swing.JButton previewJButton;
    private javax.swing.JButton salirJButton;
    private javax.swing.JPanel jPanelPrincipal;
    private JPanelBusqueda jPanelBusqueda;
    private javax.swing.JScrollPane templateJScrollPane;
    private javax.swing.JRadioButton todosExpedientesJRadioButton;
    // End of variables declaration//GEN-END:variables


	public void renombrarComponentes(ResourceBundle literales) {
        this.literales=literales;
		try {
			setTitle(literales.getString("CGeneracionPlanosForm.JInternalFrame.title"));
			jPanelOpciones.setBorder(new javax.swing.border.TitledBorder(literales.getString("CGeneracionPlanosForm.jPanel2.TitleBorder")));
			editorMapaJPanel.setBorder(new javax.swing.border.TitledBorder(literales.getString("CGeneracionPlanosForm.editorMapaJPanel.TitleBorder")));
			todosExpedientesJRadioButton.setText(literales.getString("CGeneracionPlanosForm.todosExpedientesJRadioButton.text"));
			expedienteEspecificoJRadioButton.setText(literales.getString("CGeneracionPlanosForm.expedienteEspecificoJRadioButton.text"));
			previewJButton.setText(literales.getString("CGeneracionPlanosForm.previewJButton.text"));
			salirJButton.setText(literales.getString("CGeneracionPlanosForm.salirJButton.text"));
			generarJButton.setText(literales.getString("CGeneracionPlanosForm.generarJButton.text"));
            jPanelBusqueda.renombrarComponentes(literales);

            previewJButton.setToolTipText(literales.getString("CGeneracionPlanosForm.previewJButton.text"));
            salirJButton.setToolTipText(literales.getString("CGeneracionPlanosForm.salirJButton.text"));
            generarJButton.setToolTipText(literales.getString("CGeneracionPlanosForm.generarJButton.text"));
		} catch (Exception ex) {
			logger.error("Exception: " + ex.toString());
		}
	}

}
