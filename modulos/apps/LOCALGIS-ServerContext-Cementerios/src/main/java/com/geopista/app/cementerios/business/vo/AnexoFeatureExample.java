/**
 * AnexoFeatureExample.java
 * © MINETUR, Government of Spain
 * This program is part of LocalGIS
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.geopista.app.cementerios.business.vo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnexoFeatureExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	public AnexoFeatureExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	protected AnexoFeatureExample(AnexoFeatureExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table cementerio.anexo_feature
	 * @ibatorgenerated  Tue Jun 07 11:18:50 CEST 2011
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdDocumentoIsNull() {
			addCriterion("id_documento is null");
			return this;
		}

		public Criteria andIdDocumentoIsNotNull() {
			addCriterion("id_documento is not null");
			return this;
		}

		public Criteria andIdDocumentoEqualTo(String value) {
			addCriterion("id_documento =", value, "idDocumento");
			return this;
		}

		public Criteria andIdDocumentoNotEqualTo(String value) {
			addCriterion("id_documento <>", value, "idDocumento");
			return this;
		}

		public Criteria andIdDocumentoGreaterThan(String value) {
			addCriterion("id_documento >", value, "idDocumento");
			return this;
		}

		public Criteria andIdDocumentoGreaterThanOrEqualTo(String value) {
			addCriterion("id_documento >=", value, "idDocumento");
			return this;
		}

		public Criteria andIdDocumentoLessThan(String value) {
			addCriterion("id_documento <", value, "idDocumento");
			return this;
		}

		public Criteria andIdDocumentoLessThanOrEqualTo(String value) {
			addCriterion("id_documento <=", value, "idDocumento");
			return this;
		}

		public Criteria andIdDocumentoIn(List values) {
			addCriterion("id_documento in", values, "idDocumento");
			return this;
		}

		public Criteria andIdDocumentoNotIn(List values) {
			addCriterion("id_documento not in", values, "idDocumento");
			return this;
		}

		public Criteria andIdDocumentoBetween(String value1, String value2) {
			addCriterion("id_documento between", value1, value2, "idDocumento");
			return this;
		}

		public Criteria andIdDocumentoNotBetween(String value1, String value2) {
			addCriterion("id_documento not between", value1, value2,
					"idDocumento");
			return this;
		}

		public Criteria andIdLayerIsNull() {
			addCriterion("id_layer is null");
			return this;
		}

		public Criteria andIdLayerIsNotNull() {
			addCriterion("id_layer is not null");
			return this;
		}

		public Criteria andIdLayerEqualTo(Integer value) {
			addCriterion("id_layer =", value, "idLayer");
			return this;
		}

		public Criteria andIdLayerNotEqualTo(Integer value) {
			addCriterion("id_layer <>", value, "idLayer");
			return this;
		}

		public Criteria andIdLayerGreaterThan(Integer value) {
			addCriterion("id_layer >", value, "idLayer");
			return this;
		}

		public Criteria andIdLayerGreaterThanOrEqualTo(Integer value) {
			addCriterion("id_layer >=", value, "idLayer");
			return this;
		}

		public Criteria andIdLayerLessThan(Integer value) {
			addCriterion("id_layer <", value, "idLayer");
			return this;
		}

		public Criteria andIdLayerLessThanOrEqualTo(Integer value) {
			addCriterion("id_layer <=", value, "idLayer");
			return this;
		}

		public Criteria andIdLayerIn(List values) {
			addCriterion("id_layer in", values, "idLayer");
			return this;
		}

		public Criteria andIdLayerNotIn(List values) {
			addCriterion("id_layer not in", values, "idLayer");
			return this;
		}

		public Criteria andIdLayerBetween(Integer value1, Integer value2) {
			addCriterion("id_layer between", value1, value2, "idLayer");
			return this;
		}

		public Criteria andIdLayerNotBetween(Integer value1, Integer value2) {
			addCriterion("id_layer not between", value1, value2, "idLayer");
			return this;
		}

		public Criteria andIdFeatureIsNull() {
			addCriterion("id_feature is null");
			return this;
		}

		public Criteria andIdFeatureIsNotNull() {
			addCriterion("id_feature is not null");
			return this;
		}

		public Criteria andIdFeatureEqualTo(Integer value) {
			addCriterion("id_feature =", value, "idFeature");
			return this;
		}

		public Criteria andIdFeatureNotEqualTo(Integer value) {
			addCriterion("id_feature <>", value, "idFeature");
			return this;
		}

		public Criteria andIdFeatureGreaterThan(Integer value) {
			addCriterion("id_feature >", value, "idFeature");
			return this;
		}

		public Criteria andIdFeatureGreaterThanOrEqualTo(Integer value) {
			addCriterion("id_feature >=", value, "idFeature");
			return this;
		}

		public Criteria andIdFeatureLessThan(Integer value) {
			addCriterion("id_feature <", value, "idFeature");
			return this;
		}

		public Criteria andIdFeatureLessThanOrEqualTo(Integer value) {
			addCriterion("id_feature <=", value, "idFeature");
			return this;
		}

		public Criteria andIdFeatureIn(List values) {
			addCriterion("id_feature in", values, "idFeature");
			return this;
		}

		public Criteria andIdFeatureNotIn(List values) {
			addCriterion("id_feature not in", values, "idFeature");
			return this;
		}

		public Criteria andIdFeatureBetween(Integer value1, Integer value2) {
			addCriterion("id_feature between", value1, value2, "idFeature");
			return this;
		}

		public Criteria andIdFeatureNotBetween(Integer value1, Integer value2) {
			addCriterion("id_feature not between", value1, value2, "idFeature");
			return this;
		}
	}
}