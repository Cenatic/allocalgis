/**
 * COperacionesEIEL.java
 * © MINETUR, Government of Spain
 * This program is part of LocalGIS
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.geopista.server.database;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.Properties;
import java.util.zip.Deflater;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import com.geopista.app.AppContext;
import com.geopista.app.eiel.ConstantesLocalGISEIEL;
import com.geopista.app.eiel.beans.AbastecimientoAutonomoEIEL;
import com.geopista.app.eiel.beans.CabildoConsejoEIEL;
import com.geopista.app.eiel.beans.CaptacionesEIEL;
import com.geopista.app.eiel.beans.CasasConsistorialesEIEL;
import com.geopista.app.eiel.beans.CementeriosEIEL;
import com.geopista.app.eiel.beans.CentrosAsistencialesEIEL;
import com.geopista.app.eiel.beans.CentrosCulturalesEIEL;
import com.geopista.app.eiel.beans.CentrosEnsenianzaEIEL;
import com.geopista.app.eiel.beans.CentrosSanitariosEIEL;
import com.geopista.app.eiel.beans.ColectorEIEL;
import com.geopista.app.eiel.beans.ComarcaEIEL;
import com.geopista.app.eiel.beans.DepositosEIEL;
import com.geopista.app.eiel.beans.Depuradora1EIEL;
import com.geopista.app.eiel.beans.Depuradora2EIEL;
import com.geopista.app.eiel.beans.DiseminadosEIEL;
import com.geopista.app.eiel.beans.EdificiosSinUsoEIEL;
import com.geopista.app.eiel.beans.EmisariosEIEL;
import com.geopista.app.eiel.beans.Encuestados1EIEL;
import com.geopista.app.eiel.beans.Encuestados2EIEL;
import com.geopista.app.eiel.beans.EntidadesAgrupadasEIEL;
import com.geopista.app.eiel.beans.EntidadesSingularesEIEL;
import com.geopista.app.eiel.beans.EstadoObrasComarcal;
import com.geopista.app.eiel.beans.EstadoObrasMunicipal;
import com.geopista.app.eiel.beans.FeatureEIELSimple;
import com.geopista.app.eiel.beans.IncendiosProteccionEIEL;
import com.geopista.app.eiel.beans.IndicadorMunicipal;
import com.geopista.app.eiel.beans.InfoPadronEIEL;
import com.geopista.app.eiel.beans.InstalacionesDeportivasEIEL;
import com.geopista.app.eiel.beans.InvMediaComarcal;
import com.geopista.app.eiel.beans.InvMediaMunicipal;
import com.geopista.app.eiel.beans.LonjasMercadosEIEL;
import com.geopista.app.eiel.beans.MataderosEIEL;
import com.geopista.app.eiel.beans.NivelesCentrosEnsenianza;
import com.geopista.app.eiel.beans.NucleoEncuestado7EIEL;
import com.geopista.app.eiel.beans.NucleosAbandonadosEIEL;
import com.geopista.app.eiel.beans.NucleosPoblacionEIEL;
import com.geopista.app.eiel.beans.OtrosServMunicipalesEIEL;
import com.geopista.app.eiel.beans.PadronMunicipiosEIEL;
import com.geopista.app.eiel.beans.PadronNucleosEIEL;
import com.geopista.app.eiel.beans.ParquesJardinesEIEL;
import com.geopista.app.eiel.beans.PlaneamientoUrbanoEIEL;
import com.geopista.app.eiel.beans.PoblamientoEIEL;
import com.geopista.app.eiel.beans.PuntosVertidoEIEL;
import com.geopista.app.eiel.beans.RecogidaBasurasEIEL;
import com.geopista.app.eiel.beans.SaneamientoAutonomoEIEL;
import com.geopista.app.eiel.beans.ServiciosAbastecimientosEIEL;
import com.geopista.app.eiel.beans.ServiciosRecogidaBasuraEIEL;
import com.geopista.app.eiel.beans.ServiciosSaneamientoEIEL;
import com.geopista.app.eiel.beans.TanatoriosEIEL;
import com.geopista.app.eiel.beans.TipoDeporte;
import com.geopista.app.eiel.beans.TramosCarreterasEIEL;
import com.geopista.app.eiel.beans.TramosConduccionEIEL;
import com.geopista.app.eiel.beans.TratamientosPotabilizacionEIEL;
import com.geopista.app.eiel.beans.UsosCasasConsistoriales;
import com.geopista.app.eiel.beans.UsosCentrosCulturales;
import com.geopista.app.eiel.beans.VersionEiel;
import com.geopista.app.eiel.beans.VertederosEIEL;
import com.geopista.app.eiel.beans.WorkflowEIEL;
import com.geopista.app.eiel.beans.filter.LCGCampoCapaEIEL;
import com.geopista.app.eiel.beans.filter.LCGMunicipioEIEL;
import com.geopista.app.eiel.beans.filter.LCGNodoEIEL;
import com.geopista.app.eiel.beans.filter.LCGNucleoEIEL;
import com.geopista.app.eiel.beans.indicadores.IndicadorEIEL;
import com.geopista.app.eiel.beans.indicadores.MapaEIEL;
import com.geopista.app.inventario.ConstantesEIEL;
import com.geopista.app.plantillas.ConstantesLocalGISPlantillas;
import com.geopista.protocol.administrador.Usuario;
import com.geopista.protocol.administrador.dominios.DomainNode;
import com.geopista.protocol.control.Sesion;
import com.geopista.protocol.control.SesionUtils_LCGIII;
import com.geopista.security.GeopistaAcl;
import com.geopista.security.GeopistaPermission;
import com.geopista.server.administradorCartografia.ACException;
import com.geopista.server.administradorCartografia.Const;
import com.geopista.server.administradorCartografia.LockException;
import com.geopista.server.administradorCartografia.PermissionException;
import com.geopista.server.administradorCartografia.SRIDDefecto;
import com.geopista.server.database.cuadros.CuadrosMPTBean;
import com.geopista.server.database.cuadros.Poblamiento_bean;
import com.geopista.server.database.validacion.ValidacionDatos;
import com.geopista.server.database.validacion.beans.OrderToMPT;
import com.geopista.server.database.validacion.beans.V_alumbrado_bean;
import com.geopista.server.database.validacion.beans.V_cabildo_consejo_bean;
import com.geopista.server.database.validacion.beans.V_cap_agua_nucleo_bean;
import com.geopista.server.database.validacion.beans.V_captacion_agua_bean;
import com.geopista.server.database.validacion.beans.V_captacion_enc_bean;
import com.geopista.server.database.validacion.beans.V_captacion_enc_m50_bean;
import com.geopista.server.database.validacion.beans.V_carretera_bean;
import com.geopista.server.database.validacion.beans.V_casa_con_uso_bean;
import com.geopista.server.database.validacion.beans.V_casa_consitorial_bean;
import com.geopista.server.database.validacion.beans.V_cementerio_bean;
import com.geopista.server.database.validacion.beans.V_cent_cultural_bean;
import com.geopista.server.database.validacion.beans.V_cent_cultural_usos_bean;
import com.geopista.server.database.validacion.beans.V_centro_asistencial_bean;
import com.geopista.server.database.validacion.beans.V_centro_ensenanza_bean;
import com.geopista.server.database.validacion.beans.V_centro_sanitario_bean;
import com.geopista.server.database.validacion.beans.V_colector_bean;
import com.geopista.server.database.validacion.beans.V_colector_enc_bean;
import com.geopista.server.database.validacion.beans.V_colector_enc_m50_bean;
import com.geopista.server.database.validacion.beans.V_colector_nucleo_bean;
import com.geopista.server.database.validacion.beans.V_cond_agua_nucleo_bean;
import com.geopista.server.database.validacion.beans.V_conduccion_bean;
import com.geopista.server.database.validacion.beans.V_conduccion_enc_bean;
import com.geopista.server.database.validacion.beans.V_conduccion_enc_m50_bean;
import com.geopista.server.database.validacion.beans.V_dep_agua_nucleo_bean;
import com.geopista.server.database.validacion.beans.V_deposito_agua_nucleo_bean;
import com.geopista.server.database.validacion.beans.V_deposito_bean;
import com.geopista.server.database.validacion.beans.V_deposito_enc_bean;
import com.geopista.server.database.validacion.beans.V_deposito_enc_m50_bean;
import com.geopista.server.database.validacion.beans.V_depuradora_bean;
import com.geopista.server.database.validacion.beans.V_depuradora_enc_2_bean;
import com.geopista.server.database.validacion.beans.V_depuradora_enc_2_m50_bean;
import com.geopista.server.database.validacion.beans.V_depuradora_enc_bean;
import com.geopista.server.database.validacion.beans.V_depuradora_enc_m50_bean;
import com.geopista.server.database.validacion.beans.V_edific_pub_sin_uso_bean;
import com.geopista.server.database.validacion.beans.V_emisario_bean;
import com.geopista.server.database.validacion.beans.V_emisario_enc_bean;
import com.geopista.server.database.validacion.beans.V_emisario_enc_m50_bean;
import com.geopista.server.database.validacion.beans.V_emisario_nucleo_bean;
import com.geopista.server.database.validacion.beans.V_entidad_singular_bean;
import com.geopista.server.database.validacion.beans.V_infraestr_viaria_bean;
import com.geopista.server.database.validacion.beans.V_inst_depor_deporte_bean;
import com.geopista.server.database.validacion.beans.V_instal_deportiva_bean;
import com.geopista.server.database.validacion.beans.V_lonja_merc_feria_bean;
import com.geopista.server.database.validacion.beans.V_matadero_bean;
import com.geopista.server.database.validacion.beans.V_mun_enc_dis_bean;
import com.geopista.server.database.validacion.beans.V_municipio_bean;
import com.geopista.server.database.validacion.beans.V_nivel_ensenanza_bean;
import com.geopista.server.database.validacion.beans.V_nuc_abandonado_bean;
import com.geopista.server.database.validacion.beans.V_nucl_encuestado_1_bean;
import com.geopista.server.database.validacion.beans.V_nucl_encuestado_2_bean;
import com.geopista.server.database.validacion.beans.V_nucl_encuestado_3_bean;
import com.geopista.server.database.validacion.beans.V_nucl_encuestado_4_bean;
import com.geopista.server.database.validacion.beans.V_nucl_encuestado_5_bean;
import com.geopista.server.database.validacion.beans.V_nucl_encuestado_6_bean;
import com.geopista.server.database.validacion.beans.V_nucl_encuestado_7_bean;
import com.geopista.server.database.validacion.beans.V_nucleo_poblacion_bean;
import com.geopista.server.database.validacion.beans.V_ot_serv_municipal_bean;
import com.geopista.server.database.validacion.beans.V_padron_bean;
import com.geopista.server.database.validacion.beans.V_parque_bean;
import com.geopista.server.database.validacion.beans.V_plan_urbanistico_bean;
import com.geopista.server.database.validacion.beans.V_poblamiento_bean;
import com.geopista.server.database.validacion.beans.V_potabilizacion_enc_bean;
import com.geopista.server.database.validacion.beans.V_potabilizacion_enc_m50_bean;
import com.geopista.server.database.validacion.beans.V_proteccion_civil_bean;
import com.geopista.server.database.validacion.beans.V_provincia_bean;
import com.geopista.server.database.validacion.beans.V_ramal_saneamiento_bean;
import com.geopista.server.database.validacion.beans.V_recogida_basura_bean;
import com.geopista.server.database.validacion.beans.V_red_distribucion_bean;
import com.geopista.server.database.validacion.beans.V_sanea_autonomo_bean;
import com.geopista.server.database.validacion.beans.V_tanatorio_bean;
import com.geopista.server.database.validacion.beans.V_tra_potabilizacion_bean;
import com.geopista.server.database.validacion.beans.V_tramo_carretera_bean;
import com.geopista.server.database.validacion.beans.V_tramo_colector_bean;
import com.geopista.server.database.validacion.beans.V_tramo_colector_m50_bean;
import com.geopista.server.database.validacion.beans.V_tramo_conduccion_bean;
import com.geopista.server.database.validacion.beans.V_tramo_conduccion_m50_bean;
import com.geopista.server.database.validacion.beans.V_tramo_emisario_bean;
import com.geopista.server.database.validacion.beans.V_tramo_emisario_m50_bean;
import com.geopista.server.database.validacion.beans.V_trat_pota_nucleo_bean;
import com.geopista.server.database.validacion.beans.V_vert_encuestado_bean;
import com.geopista.server.database.validacion.beans.V_vert_encuestado_m50_bean;
import com.geopista.server.database.validacion.beans.V_vertedero_bean;
import com.geopista.server.database.validacion.beans.V_vertedero_nucleo_bean;
import com.geopista.server.database.validacion.beans.ValidacionesMPTBean;
import com.geopista.server.database.validacion.beans.ValidacionesPorCuadrosMPTBean;
import com.geopista.server.document.DocumentoEnDisco;
import com.geopista.util.LocalGISEIELUtils;


public class COperacionesEIEL extends COperacionesAlfanumericasEIEL{

	private SRIDDefecto srid;
	private static org.apache.log4j.Logger logger = org.apache.log4j.Logger
			.getLogger(COperacionesEIEL.class);

	private static AppContext app = (AppContext) AppContext
			.getApplicationContext();
	
	
	
	public COperacionesEIEL() {
		init();
	}

	public COperacionesEIEL(SRIDDefecto srid) {
		this.srid = srid;
		init();
	}

	public void getIdMapa(ObjectOutputStream oos, String nombreMapa,
			String idMunicipio) throws Exception {
		try {
			Integer idMapa = getIdMapa(nombreMapa, idMunicipio);
			oos.writeObject(idMapa);

		} catch (Exception e) {
			logger.error("getUsuarios: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
	}
	
	public void getMapas(ObjectOutputStream oos, String patronNombreMapa,String locale,
			String idMunicipio) throws Exception {
		try {
			ArrayList listaMapas = getMapas(patronNombreMapa, locale,idMunicipio);
			oos.writeObject(listaMapas);

		} catch (Exception e) {
			logger.error("getMapas: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
	}
	

	public void getNombreMapa(ObjectOutputStream oos, String nombreMapa,
			String idMunicipio) throws Exception {
		try {
			Integer idMapa = getIdMapa(nombreMapa, idMunicipio);
			oos.writeObject(idMapa);

		} catch (Exception e) {
			logger.error("getUsuarios: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
	}

	public void getNombreMapa(ObjectOutputStream oos, Integer idMapa,
			String idEntidad) throws Exception {
		try {
			String nombreMapa = getNombreMapa(idMapa, idEntidad);
			oos.writeObject(nombreMapa);

		} catch (Exception e) {
			logger.error("getUsuarios: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
	}

	public void getLstDomains(ObjectOutputStream oos, String domainName,
			String idMunicipio,String locale) throws Exception {
		Connection connection = null;
		try {

			connection = CPoolDatabase.getConnection();
			ArrayList lstDomains = obtenerListaDominios(connection, domainName,
					idMunicipio, com.geopista.feature.Domain.TREE,locale);
			oos.writeObject(lstDomains);
		} catch (Exception e) {
			connection.rollback();
			logger.error("getUsuarios: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
		finally{
			safeClose(null, null, connection);
		}
	}
	
	public void getLstElementos(ObjectOutputStream oos, String tipoElemento,
			String filtro, String idMunicipio,boolean noGeoReferenciados,int idMunicipioSeleccionado) throws Exception {
			getLstElementos	(oos, tipoElemento,filtro, idMunicipio,noGeoReferenciados, false, null,idMunicipioSeleccionado,null,null,null,null) ;
	}
	
	public void getLstElementos(ObjectOutputStream oos, String tipoElemento,
			String filtro, String idMunicipio,boolean noGeoReferenciados,boolean version, 
			Object element) throws Exception {
			getLstElementos	(oos, tipoElemento,filtro, idMunicipio,noGeoReferenciados, version,element,0,null,null,null,null) ;
	}

	public void getLstElementos(ObjectOutputStream oos, String tipoElemento,
			String filtro, String idMunicipio,boolean noGeoReferenciados) throws Exception {
			getLstElementos	(oos, tipoElemento,filtro, idMunicipio,noGeoReferenciados, false, null,0,null,null,null,null) ;
	}
	
	public void getLstElementos(ObjectOutputStream oos, String tipoElemento,
			String filtro, String idMunicipio,boolean noGeoReferenciados, boolean version, 
						Object element,int idMunicipioSeleccionado,String nombreTabla,ArrayList camposEspecificos,
						String idMunicipioBusqueda,String nucleoSeleccionado) throws Exception {
		Connection connection = null;

		try {
			if (idMunicipio!=null && !idMunicipio.equals("0"))
				idMunicipio=completarConCeros(idMunicipio, 5);

			ArrayList lstDatos = getLstElementos(tipoElemento, filtro,
					idMunicipio,noGeoReferenciados, version, element,idMunicipioSeleccionado,nombreTabla,camposEspecificos,idMunicipioBusqueda,nucleoSeleccionado);
			oos.writeObject(lstDatos);

		} catch (Exception e) {
			if (connection!=null)
				connection.rollback();
			logger.error("getLstElementos: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
		finally{
			safeClose(null, null, connection);
		}
	}

	private ArrayList getLstElementos(String tipoElemento, String filtro,
			String idMunicipio,boolean noGeoReferenciados, boolean version, Object element,
			int idMunicipioSeleccionado,String nombreTabla,ArrayList camposEspecificos,
			String idMunicipioBusqueda,String nucleoSeleccionado) throws Exception {

		ArrayList lstElementos = null;

		if (tipoElemento.equals(ConstantesLocalGISEIEL.ABASTECIMIENTO_AUTONOMO)) {
			lstElementos = obtenerListaAbastecimientoAutonomo(filtro,
					idMunicipio, version, element,idMunicipioBusqueda);
		//MARKED
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CAPTACIONES)) {
			lstElementos = obtenerListaCaptaciones(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPURADORAS1)) {
			lstElementos = obtenerListaDepuradoras1(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPURADORAS2)) {
			lstElementos = obtenerListaDepuradoras2(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CASAS_CONSISTORIALES)) {
			lstElementos = obtenerListaCasasConsistoriales(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		}else if (tipoElemento.equals(ConstantesLocalGISEIEL.CENTROS_CULTURALES)) {
			lstElementos = obtenerListaCentrosCulturales(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CENTROS_ENSENIANZA)) {
			lstElementos = obtenerListaCentrosEnsenianza(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.INSTALACIONES_DEPORTIVAS)) {
			lstElementos = obtenerListaInstalacionesDeportivas(filtro,
					idMunicipio, noGeoReferenciados, version, element);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPOSITOS)) {
			lstElementos = obtenerListaDepositos(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PUNTOS_VERTIDO)) {
			lstElementos = obtenerListaPuntosVertido(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.DATOS_SERVICIOS_ABASTECIMIENTOS)) {
			lstElementos = obtenerListaServiciosAbastecimientos(filtro,
					idMunicipio, version, element,idMunicipioBusqueda);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CENTROS_ASISTENCIALES)) {
			lstElementos = obtenerListaCentrosAsistenciales(filtro,
					idMunicipio, noGeoReferenciados, version, element);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CABILDO)) {
			lstElementos = obtenerListaCabildoConsejo(filtro, idMunicipio,
					version, element);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CEMENTERIOS)) {
			lstElementos = obtenerListaCementerios(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.ENTIDADES_SINGULARES)) {
			lstElementos = obtenerListaEntidadesSingulares(filtro, idMunicipio,
					version, element,idMunicipioBusqueda);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.C_NUCLEOS_POBLACION)) {
			lstElementos = obtenerListaNucleosPoblacion(filtro, idMunicipio,
					version, element,idMunicipioBusqueda);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.NUCLEO_ENCT_7)) {
			lstElementos = obtenerListaInfoTerminosMunicipales(filtro,
					idMunicipio, version, element);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.INCENDIOS_PROTECCION)) {
			lstElementos = obtenerListaIncendiosProteccion(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.LONJAS_MERCADOS)) {
			lstElementos = obtenerListaLonjasMercados(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.MATADEROS)) {
			lstElementos = obtenerListaMataderos(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.OTROS_SERVICIOS_MUNICIPALES)) {
			lstElementos = obtenerListaOtrosServMunicipales(filtro,
					idMunicipio, version, element);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PADRON_NUCLEOS)) {
			lstElementos = obtenerListaPadronNucleos(filtro, idMunicipio,
					version, element);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.PADRON_MUNICIPIOS)) {
			lstElementos = obtenerListaPadronMunicipios(filtro, idMunicipio,
					version, element,idMunicipioBusqueda);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PARQUES_JARDINES)) {
			lstElementos = obtenerListaParquesJardines(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.PLANEAMIENTO_URBANO)) {
			lstElementos = obtenerListaPlaneamientoUrbano(filtro, idMunicipio,
					version, element);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.POBLAMIENTO)) {
			lstElementos = obtenerListaPoblamiento(filtro, idMunicipio,
					version, element,idMunicipioBusqueda);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.RECOGIDA_BASURAS)) {
			lstElementos = obtenerListaRecogidaBasuras(filtro, idMunicipio,
					version, element,idMunicipioBusqueda);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CENTROS_SANITARIOS)) {
			lstElementos = obtenerListaCentrosSanitarios(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.SANEAMIENTO_AUTONOMO)) {
			lstElementos = obtenerListaSaneamientoAutonomo(filtro, idMunicipio,
					version, element,idMunicipioBusqueda);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.DATOS_SERVICIOS_SANEAMIENTO)) {
			lstElementos = obtenerListaServiciosSaneamiento(filtro,
					idMunicipio, version, element,idMunicipioBusqueda);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.SERVICIOS_RECOGIDA_BASURA)) {
			lstElementos = obtenerListaServiciosRecogidaBasura(filtro,
					idMunicipio, version, element,idMunicipioBusqueda);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.EDIFICIOS_SIN_USO)) {
			lstElementos = obtenerListaEdificiosSinUso(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.TANATORIOS)) {
			lstElementos = obtenerListaTanatorios(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DATOS_VERTEDEROS)) {
			lstElementos = obtenerListaVertederos(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TRAMOS_CARRETERAS)) {
			lstElementos = obtenerListaCarreteras(filtro, idMunicipio,
					noGeoReferenciados, version, element);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TRATAMIENTOS_POTABILIZACION)) {
			lstElementos = obtenerListaTratamientosPotabilizacion(filtro,
					idMunicipio, noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DISEMINADOS)) {
			lstElementos = obtenerListaDiseminados(filtro, idMunicipio,
					version, element,idMunicipioBusqueda);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.ENCUESTADOS1)) {
			lstElementos = obtenerListaEncuestados1(filtro, idMunicipio,
					version, element,idMunicipioBusqueda);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.ENCUESTADOS2)) {
			lstElementos = obtenerListaEncuestados2(filtro, idMunicipio,
					version, element,idMunicipioBusqueda);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.NUCLEOS_ABANDONADOS)) {
			lstElementos = obtenerListaNucleosAbandonados(filtro, idMunicipio,
					version, element);		
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.INFO_PADRON)) {
			lstElementos = obtenerListaPadron(filtro, idMunicipio,
					version, element,nombreTabla);		
		}/*else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.NUCLEOS_POBLACION)) {
			lstElementos = obtenerListaNucleosPoblacion(filtro, idMunicipio,
					version, element);			
		}*/
		//Prueba de concepto Elementos sin informacion alfanumerica.
		//ALFANUMERICOS
		//- EMISARIOS
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.EMISARIOS)) {
			lstElementos = obtenerListaEmisarios(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		}	
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.TCONDUCCION)) {
			lstElementos = obtenerListaTramoConduccion(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		}

		else if (tipoElemento.equals(ConstantesLocalGISEIEL.TCOLECTOR)) {
			lstElementos = obtenerListaColector(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nucleoSeleccionado);
		}
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.AGRUPACIONES6000)) {
			lstElementos = obtenerListaAgrupaciones6000(filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,idMunicipioBusqueda);
		}
		//Tratamiento de capas sin datos alfanumericos.
		else if (ConstantesLocalGISEIEL.capasEspeciales.containsKey(tipoElemento)){
			lstElementos = obtenerListaElementosGenericos(tipoElemento,filtro, idMunicipio,
					noGeoReferenciados, version, element,idMunicipioSeleccionado,nombreTabla,camposEspecificos);
		}
		else{
			logger.error("No hay asociacion de busqueda de elementos para:"+tipoElemento);
		}
		return lstElementos;
	}


	public void getFeatures(ObjectOutputStream oos, Object object,
			String tipoElemento, String idMunicipio,String nombreTabla) throws Exception {

		Connection connection = null;

		try {
			Collection lstDatos = (Collection) getFeatures(object,
					tipoElemento, idMunicipio,nombreTabla);
			oos.writeObject(lstDatos);

		} catch (Exception e) {
			connection.rollback();
			logger.error("getUsuarios: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
		finally{
			safeClose(null, null, connection);
		}
	}

	private Collection getFeatures(Object object, String tipoElemento,
			String idMunicipio,String nombreTabla) throws Exception {

		Collection features = null;

		if (tipoElemento.equals(ConstantesLocalGISEIEL.ABASTECIMIENTO_AUTONOMO)) {
			features = obtenerFeaturesAbastecimientoAutonomo(
					(AbastecimientoAutonomoEIEL) object, idMunicipio);
		//MARKED
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CAPTACIONES)) {
			features = obtenerFeaturesCaptaciones((CaptacionesEIEL) object,
					idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPURADORAS1)) {
			features = obtenerFeaturesDepuradoras1((Depuradora1EIEL) object,
					idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPURADORAS2)) {
			features = obtenerFeaturesDepuradoras2((Depuradora2EIEL) object,
					idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CASAS_CONSISTORIALES)) {
			features = obtenerFeaturesCasasConsistoriales(
					(CasasConsistorialesEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CENTROS_CULTURALES)) {
			features = obtenerFeaturesCentrosCulturales(
					(CentrosCulturalesEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CENTROS_ENSENIANZA)) {
			features = obtenerFeaturesCentrosEnsenianza(
					(CentrosEnsenianzaEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.INSTALACIONES_DEPORTIVAS)) {
			features = obtenerFeaturesInstalacionesDeportivas(
					(InstalacionesDeportivasEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.NUCLEOS_POBLACION)) {
			features = obtenerFeaturesNucleosPoblacion(
					(NucleosPoblacionEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.OTROS_SERVICIOS_MUNICIPALES)) {
			features = obtenerFeaturesOtrosServMunicipales(
					(OtrosServMunicipalesEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PADRON_NUCLEOS)) {
			features = obtenerFeaturesPadronNucleos((PadronNucleosEIEL) object,
					idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.PADRON_MUNICIPIOS)) {
			features = obtenerFeaturesPadronMunicipios(
					(PadronMunicipiosEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PARQUES_JARDINES)) {
			features = obtenerFeaturesParquesJardines(
					(ParquesJardinesEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.PLANEAMIENTO_URBANO)) {
			features = obtenerFeaturesPlaneamientoUrbano(
					(PlaneamientoUrbanoEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.POBLAMIENTO)) {
			features = obtenerFeaturesPoblamiento((PoblamientoEIEL) object,
					idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.RECOGIDA_BASURAS)) {
			features = obtenerFeaturesRecogidaBasuras(
					(RecogidaBasurasEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CENTROS_SANITARIOS)) {
			features = obtenerFeaturesCentrosSanitarios(
					(CentrosSanitariosEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.SANEAMIENTO_AUTONOMO)) {
			features = obtenerFeaturesSaneamientoAutonomo(
					(SaneamientoAutonomoEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.DATOS_SERVICIOS_SANEAMIENTO)) {
			features = obtenerFeaturesServiciosSaneamiento(
					(ServiciosSaneamientoEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.SERVICIOS_RECOGIDA_BASURA)) {
			features = obtenerFeaturesServiciosRecogidaBasuras(
					(ServiciosRecogidaBasuraEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.EDIFICIOS_SIN_USO)) {
			features = obtenerFeaturesEdificiosSinUso(
					(EdificiosSinUsoEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.TANATORIOS)) {
			features = obtenerFeaturesTanatorios((TanatoriosEIEL) object,
					idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DATOS_VERTEDEROS)) {
			features = obtenerFeaturesVertederos((VertederosEIEL) object,
					idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TRAMOS_CARRETERAS)) {
			features = obtenerFeaturesCarreteras((TramosCarreterasEIEL) object,
					idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPOSITOS)) {
			features = obtenerFeaturesDepositos((DepositosEIEL) object,
					idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PUNTOS_VERTIDO)) {
			features = obtenerFeaturesPuntosVertido((PuntosVertidoEIEL) object,
					idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.DATOS_SERVICIOS_ABASTECIMIENTOS)) {
			features = obtenerFeaturesServiciosAbastecimientos(
					(ServiciosAbastecimientosEIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CENTROS_ASISTENCIALES)) {
			features = obtenerFeaturesCentrosAsistenciales(
					(CentrosAsistencialesEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CABILDO)) {
			features = obtenerFeaturesCabildoConsejo(
					(CabildoConsejoEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CEMENTERIOS)) {
			features = obtenerFeaturesCementerios((CementeriosEIEL) object,
					idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.ENTIDADES_SINGULARES)) {
			features = obtenerFeaturesEntidadesSingulares(
					(EntidadesSingularesEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.NUCLEO_ENCT_7)) {
			features = obtenerFeaturesInfoTerminosMunicipales(
					(NucleoEncuestado7EIEL) object, idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.INCENDIOS_PROTECCION)) {
			features = obtenerFeaturesIncendiosProteccion(
					(IncendiosProteccionEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.LONJAS_MERCADOS)) {
			features = obtenerFeaturesLonjasMercados(
					(LonjasMercadosEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.MATADEROS)) {
			features = obtenerFeaturesMataderos((MataderosEIEL) object,
					idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TRATAMIENTOS_POTABILIZACION)) {
			features = obtenerFeaturesTratamientosPotabilizacion(
					(TratamientosPotabilizacionEIEL) object, idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DISEMINADOS)) {
			features = obtenerFeaturesDiseminados((DiseminadosEIEL) object,
					idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.ENCUESTADOS1)) {
			features = obtenerFeaturesEncuestados1((Encuestados1EIEL) object,
					idMunicipio);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.ENCUESTADOS2)) {
			features = obtenerFeaturesEncuestados2((Encuestados2EIEL) object,
					idMunicipio);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.NUCLEOS_ABANDONADOS)) {
			features = obtenerFeaturesNucleosAbandonados(
					(NucleosAbandonadosEIEL) object, idMunicipio);
		}
		//Prueba de concepto Elementos sin informacion alfanumerica.
		//ALFANUMERICOS
		//- EMISARIOS
		else if (tipoElemento
					.equals(ConstantesLocalGISEIEL.EMISARIOS)) {
				features = obtenerFeaturesEmisarios(
						(EmisariosEIEL) object, idMunicipio);
			}
		else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TCOLECTOR)) {
			features = obtenerFeaturesColector(
					(ColectorEIEL) object, idMunicipio);
		}
		else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TCONDUCCION)) {
			features = obtenerFeaturesTramoConduccion(
					(TramosConduccionEIEL) object, idMunicipio);
		}
		//Tratamiento de capas sin datos alfanumericos.
		else if (ConstantesLocalGISEIEL.capasEspeciales.containsKey(tipoElemento)){
			features = obtenerFeaturesGenericas((WorkflowEIEL) object, idMunicipio,nombreTabla);
		}

//		else if (tipoElemento
//				.equals(ConstantesLocalGISEIEL.AGRUPACIONES6000)) {
//			features = obtenerFeaturesAgrupaciones6000(
//					(EntidadesAgrupadasEIEL) object, idMunicipio);
//		}
		return features;
	}

	
	
	
	public ArrayList obtenerListaAbastecimientoAutonomo(String filtro,
			String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_abast_au.revision_actual, eiel_t_abast_au.revision_expirada,eiel_t_abast_au.*  ";
			
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";
			sql+=" from eiel_t_abast_au ";

			//if(noGeoReferenciado)
			//	sql+="left join eiel_c_abast_ca on eiel_t_abast_ca.clave=eiel_c_abast_ca.clave AND eiel_t_abast_ca.codprov=eiel_c_abast_ca.codprov AND eiel_t_abast_ca.codmunic=eiel_c_abast_ca.codmunic AND eiel_t_abast_ca.orden_ca=eiel_c_abast_ca.orden_ca ";
		
			
			if(version){
				sql+="left join versionesalfa on eiel_t_abast_au.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+="where eiel_t_abast_au.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_abast_au.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				AbastecimientoAutonomoEIEL obj = (AbastecimientoAutonomoEIEL)element;
				sql += " and eiel_t_abast_au.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_abast_au.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_abast_au.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_abast_au.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_abast_au.codpoblamiento = '"+obj.getCodINENucleo()+"'";
			}
			

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				AbastecimientoAutonomoEIEL absAutonomo = new AbastecimientoAutonomoEIEL();
				
				absAutonomo.setRevisionActual(rs.getLong("revision_actual"));
				absAutonomo.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(absAutonomo.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					absAutonomo.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(absAutonomo.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					absAutonomo.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(absAutonomo.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					absAutonomo.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(absAutonomo.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					absAutonomo.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(absAutonomo.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					absAutonomo.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}

				absAutonomo.setClave(rs.getString("clave"));
				absAutonomo.setCodINEProvincia(rs.getString("codprov"));
				absAutonomo.setCodINEMunicipio(rs.getString("codmunic"));
				absAutonomo.setCodINEEntidad(rs.getString("codentidad"));
				absAutonomo
						.setCodINENucleo(rs.getString("codpoblamiento"));
				absAutonomo.setViviendas(new Integer(rs.getInt("aau_vivien")));
				absAutonomo.setPoblacionResidente(new Integer(rs
						.getInt("aau_pob_re")));
				absAutonomo.setPoblacionEstacional(new Integer(rs
						.getInt("aau_pob_es")));
				absAutonomo.setViviendasDeficitarias(new Integer(rs
						.getInt("aau_def_vi")));
				absAutonomo.setPoblacionEstacionalDef(new Integer(rs
						.getInt("aau_def_es")));
				absAutonomo.setPoblacionResidenteDef(new Integer(rs
						.getInt("aau_def_re")));
				absAutonomo.setFuentesControladas(new Integer(rs
						.getInt("aau_fecont")));
				absAutonomo.setFuentesNoControladas(new Integer(rs
						.getInt("aau_fencon")));
				absAutonomo.setSuficienciaCaudal(rs.getString("aau_caudal"));
				absAutonomo.setObservaciones(rs.getString("observ"));
				absAutonomo.setFechaRevision(rs.getDate("fecha_revision"));
				absAutonomo.setEstadoRevision(new Integer(rs
						.getInt("estado_revision")));
				absAutonomo.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					absAutonomo.setVersion(versionEiel);
				}
				
				lstDatos.add(absAutonomo);

			}
			
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaCaptaciones(String filtro, String idMunicipio,boolean noGeoReferenciado,
											boolean version, Object element,int idMunicipioSeleccionado,String nucleoSeleccionado) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		String sql=null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			sql = "select eiel_t_abast_ca.revision_actual, eiel_t_abast_ca.revision_expirada, eiel_t_abast_ca.clave, " 
					+"eiel_t_abast_ca.codprov, eiel_t_abast_ca.codmunic, "
					+"eiel_t_abast_ca.orden_ca,eiel_t_abast_ca.nombre,eiel_t_abast_ca.tipo, "
					+"eiel_t_abast_ca.titular,eiel_t_abast_ca.gestor,eiel_t_abast_ca.sist_impulsion, "
					+"eiel_t_abast_ca.estado,eiel_t_abast_ca.uso,eiel_t_abast_ca.proteccion,eiel_t_abast_ca.contador, " 
					+"eiel_t_abast_ca.observ,eiel_t_abast_ca.estado_revision,eiel_t_abast_ca.fecha_revision, " 
					+"eiel_t_abast_ca.fecha_inst,eiel_t_abast_ca.sist_impulsion,eiel_t_abast_ca.cuenca, " 
					+"eiel_t_abast_ca.n_expediente,eiel_t_abast_ca.n_inventario,eiel_t_abast_ca.cota, " 
					+"eiel_t_abast_ca.profundidad,eiel_t_abast_ca.max_consumo,eiel_t_abast_ca.bloqueado ";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_abast_ca.\"GEOMETRY\")AS valida ";
			
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";
			sql+=" from eiel_t_abast_ca ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_abast_ca on eiel_t_abast_ca.clave=eiel_c_abast_ca.clave AND eiel_t_abast_ca.codprov=eiel_c_abast_ca.codprov AND eiel_t_abast_ca.codmunic=eiel_c_abast_ca.codmunic AND eiel_t_abast_ca.orden_ca=eiel_c_abast_ca.orden_ca ";
			
			if(version){
				sql+="left join versionesalfa on eiel_t_abast_ca.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			if (idMunicipioSeleccionado==0){
				sql+=" where ((eiel_t_abast_ca.orden_ca,eiel_t_abast_ca.codprov,eiel_t_abast_ca.codmunic) IN ("
						+ "select eiel_tr_abast_ca_pobl.orden_ca, eiel_tr_abast_ca_pobl.codprov_ca, eiel_tr_abast_ca_pobl.codmunic_ca from eiel_tr_abast_ca_pobl where "
						+ "eiel_tr_abast_ca_pobl.codprov_pobl='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_tr_abast_ca_pobl.codmunic_pobl='"
						+ idMunicipio.substring(2, 5)
						+ "'"
						+ ")"
						+ "OR "
						+ "eiel_t_abast_ca.codprov='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_t_abast_ca.codmunic='"
						+ idMunicipio.substring(2, 5) + "')";
			}
			else if (nucleoSeleccionado==null){
				sql+=" where (eiel_t_abast_ca.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "' and eiel_t_abast_ca.codmunic='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(2, 5) + "')";
			}
			else{
				sql+=" where (eiel_t_abast_ca.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "')";
		
			}
			
			
			
			if (filtro != null && !filtro.equals("")) {
				sql += "  and " + filtro;
			}
			if (element!=null){
				CaptacionesEIEL obj = (CaptacionesEIEL)element;
				sql += " and eiel_t_abast_ca.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_abast_ca.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_abast_ca.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_abast_ca.orden_ca = '"+obj.getCodOrden()+"'";
			}

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				CaptacionesEIEL captacion = new CaptacionesEIEL();

				captacion.setRevisionActual(rs.getLong("revision_actual"));
				captacion.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(captacion.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					captacion.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(captacion.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					captacion.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(captacion.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					captacion.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(captacion.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					captacion.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(captacion.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					captacion.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}

				
				captacion.setClave(rs.getString("clave"));
				captacion.setCodINEProvincia(rs.getString("codprov"));
				captacion.setCodINEMunicipio(rs.getString("codmunic"));
				captacion.setCodOrden(rs.getString("orden_ca"));
				captacion.setNombre(rs.getString("nombre"));
				captacion.setTipo(rs.getString("tipo"));
				captacion.setTitularidad(rs.getString("titular"));
				captacion.setGestion(rs.getString("gestor"));
				captacion.setSistema(rs.getString("sist_impulsion"));
				captacion.setEstado(rs.getString("estado"));
				captacion.setTipoUso(rs.getString("uso"));
				captacion.setProteccion(rs.getString("proteccion"));
				captacion.setContador(rs.getString("contador"));
				captacion.setObservaciones(rs.getString("observ"));
				captacion.setEstadoRevision(new Integer(rs
						.getInt("estado_revision")));
				captacion.setFechaRevision(rs.getDate("fecha_revision"));
				captacion.setFechaInst(rs.getDate("fecha_inst"));
				captacion.setSistema(rs.getString("sist_impulsion"));
				captacion.setCuenca(rs.getString("cuenca"));
				captacion.setN_expediente(rs.getString("n_expediente"));
				captacion.setN_inventario(rs.getString("n_inventario"));
				captacion.setCota(new Integer(rs.getInt("cota")));
				captacion.setProfundidad(new Integer(rs.getInt("profundidad")));
				captacion.setMax_consumo(rs.getDouble("max_consumo"));
				captacion.setBloqueado(rs.getString("bloqueado"));

				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getTimestamp("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					captacion.setVersion(versionEiel);
				}
					
					
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(captacion);
				}else
					lstDatos.add(captacion);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			logger.error("Sentencia sql erronea:"+sql);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;

		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaDepuradoras1(String filtro, String idMunicipio,boolean noGeoReferenciado, boolean version, Object element,int idMunicipioSeleccionado,String nucleoSeleccionado) throws Exception{

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t1_saneam_ed.revision_actual, eiel_t1_saneam_ed.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t1_saneam_ed.clave,eiel_t1_saneam_ed.codmunic,eiel_t1_saneam_ed.orden_ed,eiel_t1_saneam_ed.codprov,eiel_t1_saneam_ed.estado_revision," +
					"eiel_t1_saneam_ed.fecha_revision,eiel_t1_saneam_ed.proc_cm_1,eiel_t1_saneam_ed.proc_cm_2,eiel_t1_saneam_ed.proc_cm_3,eiel_t1_saneam_ed.trat_av_1," +
					"eiel_t1_saneam_ed.trat_av_2,eiel_t1_saneam_ed.trat_av_3,eiel_t1_saneam_ed.trat_ld_1,eiel_t1_saneam_ed.trat_ld_2,eiel_t1_saneam_ed.trat_ld_3," +
					"eiel_t1_saneam_ed.trat_pr_1,eiel_t1_saneam_ed.trat_pr_2,eiel_t1_saneam_ed.trat_pr_3,eiel_t1_saneam_ed.trat_sc_1,eiel_t1_saneam_ed.trat_sc_2,eiel_t1_saneam_ed.trat_sc_3," +
					" eiel_t1_saneam_ed.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_saneam_ed.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";
			
			sql+=" from eiel_t1_saneam_ed ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t1_saneam_ed.clave || eiel_t1_saneam_ed.codprov || eiel_t1_saneam_ed.codmunic || eiel_t1_saneam_ed.orden_ed ) ";

			if(noGeoReferenciado)
				sql+="left join eiel_c_saneam_ed on eiel_t1_saneam_ed.clave=eiel_c_saneam_ed.clave AND eiel_t1_saneam_ed.codprov=eiel_c_saneam_ed.codprov AND eiel_t1_saneam_ed.codmunic=eiel_c_saneam_ed.codmunic AND eiel_t1_saneam_ed.orden_ed=eiel_c_saneam_ed.orden_ed ";
			if(version){
				sql+="left join versionesalfa on eiel_t1_saneam_ed.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}			
			
			if (idMunicipioSeleccionado==0){
				sql+=" where ((eiel_t1_saneam_ed.orden_ed,eiel_t1_saneam_ed.codprov,eiel_t1_saneam_ed.codmunic) IN ("
						+ "select eiel_tr_saneam_ed_pobl.orden_ed, eiel_tr_saneam_ed_pobl.codprov_ed, eiel_tr_saneam_ed_pobl.codmunic_ed from eiel_tr_saneam_ed_pobl where "
						+ "eiel_tr_saneam_ed_pobl.codprov_pobl='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_tr_saneam_ed_pobl.codmunic_pobl='"
						+ idMunicipio.substring(2, 5)
						+ "'"
						+ ")"
						+ "OR "
						+ "eiel_t1_saneam_ed.codprov='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_t1_saneam_ed.codmunic='"
						+ idMunicipio.substring(2, 5) + "')";
			}
			else if (nucleoSeleccionado==null){
				sql+=" where (eiel_t1_saneam_ed.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "' and eiel_t1_saneam_ed.codmunic='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(2, 5) + "')";
			}
			else{
				sql+=" where (eiel_t1_saneam_ed.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "')";
			}


			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				Depuradora1EIEL obj = (Depuradora1EIEL)element;
				sql += " and eiel_t1_saneam_ed.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t1_saneam_ed.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t1_saneam_ed.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t1_saneam_ed.orden_ed = '"+obj.getCodOrden()+"'";
			}

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				Depuradora1EIEL depuradora = new Depuradora1EIEL();
				
				
				depuradora.setRevisionActual(rs.getLong("revision_actual"));
				depuradora.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}

				depuradora.setClave(rs.getString("clave"));
				depuradora.setCodINEMunicipio(rs.getString("codmunic"));
				depuradora.setCodOrden(rs.getString("orden_ed"));
				depuradora.setCodINEProvincia(rs.getString("codprov"));
				depuradora.setEstadoRevision(new Integer(rs
						.getInt("estado_revision")));
				depuradora.setFechaRevision(rs.getDate("fecha_revision"));
				depuradora.setProcComplementario1(rs.getString("proc_cm_1"));
				depuradora.setProcComplementario2(rs.getString("proc_cm_2"));
				depuradora.setProcComplementario3(rs.getString("proc_cm_3"));
				depuradora.setTratAvanzado1(rs.getString("trat_av_1"));
				depuradora.setTratAvanzado2(rs.getString("trat_av_2"));
				depuradora.setTratAvanzado3(rs.getString("trat_av_3"));
				depuradora.setTratLodos1(rs.getString("trat_ld_1"));
				depuradora.setTratLodos2(rs.getString("trat_ld_2"));
				depuradora.setTratLodos3(rs.getString("trat_ld_3"));
				depuradora.setTratPrimario1(rs.getString("trat_pr_1"));
				depuradora.setTratPrimario2(rs.getString("trat_pr_2"));
				depuradora.setTratPrimario3(rs.getString("trat_pr_3"));
				depuradora.setTratSecundario1(rs.getString("trat_sc_1"));
				depuradora.setTratSecundario2(rs.getString("trat_sc_2"));
				depuradora.setTratSecundario3(rs.getString("trat_sc_3"));
				depuradora.setBloqueado(rs.getString("bloqueado"));
				depuradora.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				depuradora.setVistaEIEL(rs.getString("vista_eiel"));
				depuradora.setIdBien(rs.getInt("id_inventario"));
				depuradora.setEpigInventario(rs.getInt("epig_inventario"));
				depuradora.setIdMunicipio(rs.getInt("id_municipio"));
				depuradora.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					depuradora.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(depuradora);
				}else
					lstDatos.add(depuradora);

			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaDepuradoras2(String filtro, String idMunicipio,boolean noGeoReferenciado, boolean version, Object element,int idMunicipioSeleccionado,String nucleoSeleccionado) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t2_saneam_ed.revision_actual, eiel_t2_saneam_ed.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t2_saneam_ed.clave,eiel_t2_saneam_ed.codmunic,eiel_t2_saneam_ed.orden_ed,eiel_t2_saneam_ed.codprov," +
					"eiel_t2_saneam_ed.estado_revision,eiel_t2_saneam_ed.fecha_revision,eiel_t2_saneam_ed.fecha_inst,eiel_t2_saneam_ed.gestor," +
					"eiel_t2_saneam_ed.lodo_gest,eiel_t2_saneam_ed.lodo_con_agri,eiel_t2_saneam_ed.lodo_sin_agri,eiel_t2_saneam_ed.capacidad," +
					"eiel_t2_saneam_ed.lodo_inci,eiel_t2_saneam_ed.lodo_ot,eiel_t2_saneam_ed.lodo_vert,eiel_t2_saneam_ed.observ," +
					"eiel_t2_saneam_ed.problem_1,eiel_t2_saneam_ed.problem_2,eiel_t2_saneam_ed.problem_3,eiel_t2_saneam_ed.titular,eiel_t2_saneam_ed.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_saneam_ed.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";
			sql+=" from eiel_t2_saneam_ed ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t2_saneam_ed.clave || eiel_t2_saneam_ed.codprov || eiel_t2_saneam_ed.codmunic || eiel_t2_saneam_ed.orden_ed ) ";

			if(noGeoReferenciado)
				sql+="left join eiel_c_saneam_ed on eiel_t2_saneam_ed.clave=eiel_c_saneam_ed.clave AND eiel_t2_saneam_ed.codprov=eiel_c_saneam_ed.codprov AND eiel_t2_saneam_ed.codmunic=eiel_c_saneam_ed.codmunic AND eiel_t2_saneam_ed.orden_ed=eiel_c_saneam_ed.orden_ed ";
			if(version){
				sql+="left join versionesalfa on eiel_t2_saneam_ed.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}		
			
			if (idMunicipioSeleccionado==0){
				sql+="where ((eiel_t2_saneam_ed.orden_ed,eiel_t2_saneam_ed.codprov,eiel_t2_saneam_ed.codmunic) IN ("
						+ "select eiel_tr_saneam_ed_pobl.orden_ed, eiel_tr_saneam_ed_pobl.codprov_ed, eiel_tr_saneam_ed_pobl.codmunic_ed from eiel_tr_saneam_ed_pobl where "
						+ "eiel_tr_saneam_ed_pobl.codprov_pobl='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_tr_saneam_ed_pobl.codmunic_pobl='"
						+ idMunicipio.substring(2, 5)
						+ "'"
						+ ")"
						+ "OR "
						+ "eiel_t2_saneam_ed.codprov='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_t2_saneam_ed.codmunic='"
						+ idMunicipio.substring(2, 5)+ "')";
			}
			else if (nucleoSeleccionado==null){
				sql+=" where (eiel_t2_saneam_ed.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "' and eiel_t2_saneam_ed.codmunic='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(2, 5) + "')";
			}
			else{
				sql+=" where (eiel_t2_saneam_ed.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "')";
			}

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			
			if (element!=null){
				Depuradora2EIEL obj = (Depuradora2EIEL)element;
				sql += " and eiel_t2_saneam_ed.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t2_saneam_ed.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t2_saneam_ed.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t2_saneam_ed.orden_ed = '"+obj.getCodOrden()+"'";
			}

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				Depuradora2EIEL depuradora = new Depuradora2EIEL();
				

				depuradora.setRevisionActual(rs.getLong("revision_actual"));
				depuradora.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(depuradora.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					depuradora.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}

				depuradora.setClave(rs.getString("clave"));
				depuradora.setCodINEMunicipio(rs.getString("codmunic"));
				depuradora.setCodOrden(rs.getString("orden_ed"));
				depuradora.setCodINEProvincia(rs.getString("codprov"));
				depuradora.setEstadoRevision(new Integer(rs
						.getInt("estado_revision")));
				depuradora.setFechaRevision(rs.getDate("fecha_revision"));
				depuradora.setFechaInstalacion(rs.getDate("fecha_inst"));
				depuradora.setGestor(rs.getString("gestor"));
				depuradora.setGestionLodos(rs.getString("lodo_gest"));
				depuradora.setLodosAgrConCompostaje(new Integer(rs
						.getInt("lodo_con_agri")));
				depuradora.setLodosAgrSinCompostaje(new Integer(rs
						.getInt("lodo_sin_agri")));
				depuradora.setCapacidad(new Integer(rs.getInt("capacidad")));
				depuradora.setLodosIncineracion(new Integer(rs
						.getInt("lodo_inci")));
				depuradora.setLodosOtroFinal(new Integer(rs.getInt("lodo_ot")));
				depuradora
						.setLodosVertedero(new Integer(rs.getInt("lodo_vert")));
				depuradora.setObservaciones(rs.getString("observ"));
				depuradora.setProblemas1(rs.getString("problem_1"));
				depuradora.setProblemas2(rs.getString("problem_2"));
				depuradora.setProblemas3(rs.getString("problem_3"));
				depuradora.setTitular(rs.getString("titular"));
				depuradora.setBloqueado(rs.getString("bloqueado"));
				depuradora.setObservaciones(rs.getString("observ"));
				depuradora.setProblemas1(rs.getString("problem_1"));
				depuradora.setProblemas2(rs.getString("problem_2"));
				depuradora.setProblemas3(rs.getString("problem_3"));
				depuradora.setTitular(rs.getString("titular"));
				depuradora.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					depuradora.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(depuradora);
				}else
					lstDatos.add(depuradora);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaCasasConsistoriales(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			
			String sql = "select eiel_t_cc.revision_actual, eiel_t_cc.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_cc.clave,eiel_t_cc.codprov,eiel_t_cc.codmunic,eiel_t_cc.codentidad,eiel_t_cc.codpoblamiento," +
					"eiel_t_cc.clave,eiel_t_cc.codmunic, eiel_t_cc.orden_cc,eiel_t_cc.codprov,eiel_t_cc.codentidad," +
					" eiel_t_cc.codpoblamiento,eiel_t_cc.estado_revision,eiel_t_cc.fecha_revision,eiel_t_cc.fecha_inst"+
					",eiel_t_cc.nombre,eiel_t_cc.tipo,eiel_t_cc.titular,eiel_t_cc.tenencia,eiel_t_cc.s_cubierta,eiel_t_cc.s_aire,eiel_t_cc.s_solar,eiel_t_cc.observ," +
					" eiel_t_cc.estado,eiel_t_cc.acceso_s_ruedas,eiel_t_cc.obra_ejec,eiel_t_cc.bloqueado,eiel_t_cc.revision_actual ";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_cc.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";			
			sql+=" from eiel_t_cc ";
			if(noGeoReferenciado)
				sql+=" left join eiel_c_cc on eiel_t_cc.clave=eiel_c_cc.clave AND eiel_t_cc.codprov=eiel_c_cc.codprov AND eiel_t_cc.codmunic=eiel_c_cc.codmunic " +
						" AND eiel_t_cc.orden_cc=eiel_t_cc.orden_cc AND eiel_t_cc.codentidad=eiel_c_cc.codentidad AND eiel_t_cc.codpoblamiento=eiel_c_cc.codpoblamiento ";
			
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_cc.clave || eiel_t_cc.codprov || eiel_t_cc.codmunic || eiel_t_cc.codentidad || eiel_t_cc.codpoblamiento || eiel_t_cc.orden_cc) ";

			if(version){
				sql+="left join versionesalfa on eiel_t_cc.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}				
			sql+=" where eiel_t_cc.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_cc.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				CasasConsistorialesEIEL obj = (CasasConsistorialesEIEL)element;
				sql += " and eiel_t_cc.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_cc.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_cc.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_cc.orden_cc = '"+obj.getCodOrden()+"'";
				sql += " and eiel_t_cc.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_cc.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				CasasConsistorialesEIEL cc = new CasasConsistorialesEIEL();

				cc.setRevisionActual(rs.getLong("revision_actual"));
				cc.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(cc.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					cc.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(cc.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					cc.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(cc.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					cc.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(cc.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					cc.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(cc.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					cc.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				cc.setClave(rs.getString("clave"));
				cc.setCodINEMunicipio(rs.getString("codmunic"));
				cc.setCodOrden(rs.getString("orden_cc"));
				cc.setCodINEProvincia(rs.getString("codprov"));
				cc.setCodINEEntidad(rs.getString("codentidad"));
				cc.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				cc.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				cc.setFechaRevision(rs.getDate("fecha_revision"));
				cc.setFechaInstalacion(rs.getDate("fecha_inst"));
				cc.setNombre(rs.getString("nombre"));
				cc.setTipo(rs.getString("tipo"));
				cc.setTitular(rs.getString("titular"));
				cc.setTenencia(rs.getString("tenencia"));
				cc.setSupCubierta(new Integer(rs.getInt("s_cubierta")));
				cc.setSupAire(new Integer(rs.getInt("s_aire")));
				cc.setSupSolar(new Integer(rs.getInt("s_solar")));
				cc.setObservaciones(rs.getString("observ"));
				cc.setEstado(rs.getString("estado"));
				cc.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				cc.setObra_ejec(rs.getString("obra_ejec"));
				cc.setBloqueado(rs.getString("bloqueado"));
				cc.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				cc.setVistaEIEL(rs.getString("vista_eiel"));
				cc.setIdBien(rs.getInt("id_inventario"));
				cc.setEpigInventario(rs.getInt("epig_inventario"));
				cc.setIdMunicipio(rs.getInt("id_municipio"));
				cc.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					cc.setVersion(versionEiel);
				}
				cc = getListaUsosCasasConsistoriales(cc, rs.getString("revision_actual"));
				
				
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(cc);
				}else
					lstDatos.add(cc);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaCentrosCulturales(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_cu.revision_actual, eiel_t_cu.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_cu.clave,eiel_t_cu.codmunic,eiel_t_cu.orden_cu,eiel_t_cu.codprov,eiel_t_cu.codentidad " +
					",eiel_t_cu.codpoblamiento,eiel_t_cu.estado_revision,eiel_t_cu.fecha_revision,eiel_t_cu.fecha_inst " +
					",eiel_t_cu.nombre,eiel_t_cu.tipo,eiel_t_cu.titular,eiel_t_cu.gestor,eiel_t_cu.s_cubierta,eiel_t_cu.s_aire,eiel_t_cu.s_solar " +
					",eiel_t_cu.observ,eiel_t_cu.inst_pertenece,eiel_t_cu.estado,eiel_t_cu.acceso_s_ruedas,eiel_t_cu.obra_ejec, " +
					" eiel_t_cu.bloqueado, eiel_t_cu.revision_actual ";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_cu.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";			
			
			sql+=" from eiel_t_cu ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_cu.clave || eiel_t_cu.codprov || eiel_t_cu.codmunic || eiel_t_cu.codentidad || eiel_t_cu.codpoblamiento || eiel_t_cu.orden_cu) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_cu on eiel_t_cu.clave=eiel_c_cu.clave AND eiel_t_cu.codprov=eiel_c_cu.codprov AND eiel_t_cu.codmunic=eiel_c_cu.codmunic AND eiel_t_cu.orden_cu=eiel_c_cu.orden_cu " +
						" AND eiel_t_cu.codentidad=eiel_c_cu.codentidad AND eiel_t_cu.codpoblamiento=eiel_c_cu.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_cu.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}							
			sql+=" where eiel_t_cu.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_cu.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				CentrosCulturalesEIEL obj = (CentrosCulturalesEIEL)element;
				sql += " and eiel_t_cu.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_cu.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_cu.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_cu.orden_cu = '"+obj.getCodOrden()+"'";
				sql += " and eiel_t_cu.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_cu.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				CentrosCulturalesEIEL cu = new CentrosCulturalesEIEL();

				cu.setRevisionActual(rs.getLong("revision_actual"));
				cu.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(cu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					cu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(cu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					cu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(cu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					cu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(cu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					cu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(cu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					cu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				cu.setClave(rs.getString("clave"));
				cu.setCodINEMunicipio(rs.getString("codmunic"));
				cu.setCodOrden(rs.getString("orden_cu"));
				cu.setCodINEProvincia(rs.getString("codprov"));
				cu.setCodINEEntidad(rs.getString("codentidad"));
				cu.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				cu.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				cu.setFechaRevision(rs.getDate("fecha_revision"));
				cu.setFechaInstalacion(rs.getDate("fecha_inst"));
				cu.setNombre(rs.getString("nombre"));
				cu.setTipo(rs.getString("tipo"));
				cu.setTitular(rs.getString("titular"));
				cu.setGestor(rs.getString("gestor"));
				cu.setSupCubierta(new Integer(rs.getInt("s_cubierta")));
				cu.setSupAire(new Integer(rs.getInt("s_aire")));
				cu.setSupSolar(new Integer(rs.getInt("s_solar")));
				cu.setObservaciones(rs.getString("observ"));
				cu.setInstPertenece(rs.getString("inst_pertenece"));
				cu.setEstado(rs.getString("estado"));
				cu.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				cu.setObra_ejec(rs.getString("obra_ejec"));
				cu.setBloqueado(rs.getString("bloqueado"));
				cu.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				cu.setVistaEIEL(rs.getString("vista_eiel"));
				cu.setIdBien(rs.getInt("id_inventario"));
				cu.setEpigInventario(rs.getInt("epig_inventario"));
				cu.setIdMunicipio(rs.getInt("id_municipio"));
				cu.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				

				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					cu.setVersion(versionEiel);
				}
				
				cu = getListaUsosCentrosCulturales(cu,rs.getString("revision_actual"));
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(cu);
				}else
					lstDatos.add(cu);

			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public CentrosCulturalesEIEL getListaUsosCentrosCulturales(
			CentrosCulturalesEIEL cu, String idVersion) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select * from eiel_t_cu_usos where eiel_t_cu_usos.clave='"
					+ cu.getClave()
					+ "' and eiel_t_cu_usos.codprov='"
					+ cu.getCodINEProvincia()
					+ "' and eiel_t_cu_usos.codmunic='"
					+ cu.getCodINEMunicipio()
					+ "' and eiel_t_cu_usos.codentidad='"
					+ cu.getCodINEEntidad()
					+ "' and eiel_t_cu_usos.codpoblamiento='"
					+ cu.getCodINEPoblamiento()
					+ "' and eiel_t_cu_usos.orden_cu='"
					+ cu.getCodOrden();
			
					if (idVersion.equals("-1")){
						sql+= "' and "+Const.REVISION_ACTUAL+" <= '"
						+ idVersion
						+ "' and "+Const.REVISION_EXPIRADA+" > '" + idVersion + "'";
						}
					else{
							sql+= "' and "+Const.REVISION_ACTUAL+" <= '"
							+ idVersion
							//Para la gestion de los elementos temporales
							+ "' and "+Const.REVISION_ACTUAL+" > '-1"
							+ "' and "+Const.REVISION_EXPIRADA+" > '" + idVersion + "'";
							
						}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				UsosCentrosCulturales uso = new UsosCentrosCulturales();

				uso.setCodigoOrdenUso(rs.getString("orden_uso"));
				uso.setUso(rs.getString("uso"));
				uso.setSuperficieUso(new Integer(rs.getInt("s_cubierta")));
				uso.setFechaUso(rs.getDate("fecha_ini"));
				uso.setFechaRevision(rs.getDate("fecha_revision"));
				uso.setEstadoRevision(rs.getString("estado_revision"));
				uso.setObservacionesUso(rs.getString("observ"));
				cu.getListaUsos().add(uso);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return cu;
	}

	public CasasConsistorialesEIEL getListaUsosCasasConsistoriales(
			CasasConsistorialesEIEL cu, String idVersion) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select * from eiel_t_cc_usos where eiel_t_cc_usos.clave='"
					+ cu.getClave()
					+ "' and eiel_t_cc_usos.codprov='"
					+ cu.getCodINEProvincia()
					+ "' and eiel_t_cc_usos.codmunic='"
					+ cu.getCodINEMunicipio()
					+ "' and eiel_t_cc_usos.codentidad='"
					+ cu.getCodINEEntidad()
					+ "' and eiel_t_cc_usos.codpoblamiento='"
					+ cu.getCodINEPoblamiento()
					+ "' and eiel_t_cc_usos.orden_cc='"
					+ cu.getCodOrden();
			
					if (idVersion.equals("-1")){
					sql+= "' and "+Const.REVISION_ACTUAL+" <= '"
					+ idVersion
					+ "' and "+Const.REVISION_EXPIRADA+" > '" + idVersion + "'";
					}
					else{
						sql+= "' and "+Const.REVISION_ACTUAL+" <= '"
						+ idVersion
						//Para la gestion de los elementos temporales
						+ "' and "+Const.REVISION_ACTUAL+" > '-1"
						+ "' and "+Const.REVISION_EXPIRADA+" > '" + idVersion + "'";
						
					}
			

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				UsosCasasConsistoriales uso = new UsosCasasConsistoriales();

				uso.setCodigoOrdenUso(rs.getString("orden_uso"));
				uso.setUso(rs.getString("uso"));
				uso.setSuperficieUso(new Integer(rs.getInt("s_cubierta")));
				uso.setFechaUso(rs.getDate("fecha_ini"));
				uso.setFechaRevision(rs.getDate("fecha_revision"));
				uso.setEstadoRevision(rs.getString("estado_revision"));
				uso.setObservacionesUso(rs.getString("observ"));
				uso.setInstPertenece(rs.getString("inst_pertenece"));

				cu.getListaUsos().add(uso);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			ex.printStackTrace();
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return cu;
	}

	public CentrosEnsenianzaEIEL getListaNivelesCentrosEnsenianza(
			CentrosEnsenianzaEIEL centro, String idVersion) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select * from eiel_t_en_nivel where eiel_t_en_nivel.clave='"
					+ centro.getClave()
					+ "' and eiel_t_en_nivel.codprov='"
					+ centro.getCodINEProvincia()
					+ "' and eiel_t_en_nivel.codmunic='"
					+ centro.getCodINEMunicipio()
					+ "' and eiel_t_en_nivel.codentidad='"
					+ centro.getCodINEEntidad()
					+ "' and eiel_t_en_nivel.codpoblamiento='"
					+ centro.getCodINEPoblamiento()
					+ "' and eiel_t_en_nivel.orden_en='"
					+ centro.getCodOrden();
					if (idVersion.equals("-1")){
						sql+= "' and "+Const.REVISION_ACTUAL+" <= '"
						+ idVersion
						+ "' and "+Const.REVISION_EXPIRADA+" > '" + idVersion + "'";
						}
					else{
							sql+= "' and "+Const.REVISION_ACTUAL+" <= '"
							+ idVersion
							//Para la gestion de los elementos temporales
							+ "' and "+Const.REVISION_ACTUAL+" > '-1"
							+ "' and "+Const.REVISION_EXPIRADA+" > '" + idVersion + "'";
							
						}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				NivelesCentrosEnsenianza nivel = new NivelesCentrosEnsenianza();
				nivel.setCodigoOrdenNivel(rs.getString("orden_en_nivel"));
				nivel.setNivel(rs.getString("nivel"));
				nivel.setNumeroPlazas(new Integer(rs.getInt("plazas")));
				nivel.setUnidades(new Integer(rs.getInt("unidades")));
				nivel.setNumeroAlumnos(new Integer(rs.getInt("alumnos")));
				nivel.setFechaCurso(rs.getDate("fecha_curso"));
				nivel.setFechaRevision(rs.getDate("fecha_revision"));
				nivel.setEstadoRevision(rs.getString("estado_revision"));
				nivel.setObservacionesNivel(rs.getString("observ"));
				centro.getListaNiveles().add(nivel);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return centro;
	}

	public ArrayList obtenerListaCentrosEnsenianza(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_en.revision_actual, eiel_t_en.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_en.clave,eiel_t_en.codmunic,eiel_t_en.orden_en,eiel_t_en.codprov,eiel_t_en.codentidad," +
					"eiel_t_en.codpoblamiento,eiel_t_en.estado_revision,eiel_t_en.fecha_revision,eiel_t_en.fecha_inst," +
					"eiel_t_en.nombre,eiel_t_en.ambito,eiel_t_en.titular,eiel_t_en.s_cubierta,eiel_t_en.s_aire,eiel_t_en.s_solar,eiel_t_en.observ," +
					"eiel_t_en.estado,eiel_t_en.acceso_s_ruedas,eiel_t_en.obra_ejec,eiel_t_en.bloqueado, eiel_t_en.revision_actual ";

			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_en.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";						
			sql+=" from eiel_t_en  ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_en.clave || eiel_t_en.codprov || eiel_t_en.codmunic || eiel_t_en.codentidad || eiel_t_en.codpoblamiento || eiel_t_en.orden_en) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_en on eiel_t_en.clave=eiel_c_en.clave AND eiel_t_en.codprov=eiel_c_en.codprov AND eiel_t_en.codmunic=eiel_c_en.codmunic AND eiel_t_en.orden_en=eiel_c_en.orden_en " +
						" AND eiel_t_en.codentidad=eiel_c_en.codentidad AND eiel_t_en.codpoblamiento=eiel_c_en.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_en.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}										
			sql+=" where eiel_t_en.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_en.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				CentrosEnsenianzaEIEL obj = (CentrosEnsenianzaEIEL)element;
				sql += " and eiel_t_en.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_en.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_en.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_en.orden_en = '"+obj.getCodOrden()+"'";
				sql += " and eiel_t_en.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_en.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				CentrosEnsenianzaEIEL en = new CentrosEnsenianzaEIEL();
				
				en.setRevisionActual(rs.getLong("revision_actual"));
				en.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(en.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					en.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(en.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					en.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(en.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					en.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(en.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					en.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(en.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					en.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}

				en.setClave(rs.getString("clave"));
				en.setCodINEMunicipio(rs.getString("codmunic"));
				en.setCodOrden(rs.getString("orden_en"));
				en.setCodINEProvincia(rs.getString("codprov"));
				en.setCodINEEntidad(rs.getString("codentidad"));
				en.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				en.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				en.setFechaRevision(rs.getDate("fecha_revision"));
				en.setFechaInstalacion(rs.getDate("fecha_inst"));
				en.setNombre(rs.getString("nombre"));
				en.setAmbito(rs.getString("ambito"));
				en.setTitular(rs.getString("titular"));
				en.setSupCubierta(new Integer(rs.getInt("s_cubierta")));
				en.setSupAire(new Integer(rs.getInt("s_aire")));
				en.setSupSolar(new Integer(rs.getInt("s_solar")));
				en.setObservaciones(rs.getString("observ"));
				en.setEstado(rs.getString("estado"));
				en.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				en.setObra_ejec(rs.getString("obra_ejec"));
				en.setBloqueado(rs.getString("bloqueado"));
				en.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				en.setVistaEIEL(rs.getString("vista_eiel"));
				en.setIdBien(rs.getInt("id_inventario"));
				en.setEpigInventario(rs.getInt("epig_inventario"));
				en.setIdMunicipio(rs.getInt("id_municipio"));
				en.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					en.setVersion(versionEiel);
				}

				en = getListaNivelesCentrosEnsenianza(en, rs.getString("revision_actual"));
				
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(en);
				}else
					lstDatos.add(en);

			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaInstalacionesDeportivas(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_id.revision_actual, eiel_t_id.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_id.clave,eiel_t_id.codmunic,eiel_t_id.orden_id,eiel_t_id.codprov," +
					"eiel_t_id.codentidad,eiel_t_id.codpoblamiento,eiel_t_id.estado_revision," +
					"eiel_t_id.fecha_revision,eiel_t_id.fecha_inst,eiel_t_id.nombre,eiel_t_id.tipo," +
					"eiel_t_id.inst_pertenece,eiel_t_id.titular,eiel_t_id.gestor,eiel_t_id.s_cubierta," +
					"eiel_t_id.s_aire,eiel_t_id.s_solar,eiel_t_id.observ,eiel_t_id.estado," +
					"eiel_t_id.acceso_s_ruedas,eiel_t_id.obra_ejec,eiel_t_id.bloqueado,eiel_t_id.revision_actual";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_id.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
			sql+=" from eiel_t_id ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_id.clave || eiel_t_id.codprov || eiel_t_id.codmunic || eiel_t_id.codentidad || eiel_t_id.codpoblamiento || eiel_t_id.orden_id) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_id on eiel_t_id.clave=eiel_c_id.clave AND eiel_t_id.codprov=eiel_c_id.codprov AND eiel_t_id.codmunic=eiel_c_id.codmunic AND eiel_t_id.orden_id=eiel_c_id.orden_id " +
						" AND eiel_t_id.codentidad=eiel_c_id.codentidad AND eiel_t_id.codpoblamiento=eiel_c_id.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_id.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}				
			sql+=" where eiel_t_id.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_id.codmunic='"
					+ idMunicipio.substring(2, 5)+ "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				InstalacionesDeportivasEIEL obj = (InstalacionesDeportivasEIEL)element;
				sql += " and eiel_t_id.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_id.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_id.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_id.orden_id = '"+obj.getOrdenIdDeportes()+"'";
				sql += " and eiel_t_id.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_id.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				InstalacionesDeportivasEIEL id = new InstalacionesDeportivasEIEL();

				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setClave(rs.getString("clave"));
				id.setCodINEMunicipio(rs.getString("codmunic"));
				id.setOrdenIdDeportes(rs.getString("orden_id"));
				id.setCodINEProvincia(rs.getString("codprov"));
				id.setCodINEEntidad(rs.getString("codentidad"));
				id.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				id.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				id.setFechaRevision(rs.getDate("fecha_revision"));
				id.setFechaInstalacion(rs.getDate("fecha_inst"));
				id.setNombre(rs.getString("nombre"));
				id.setTipo(rs.getString("tipo"));
				id.setInst_P(rs.getString("inst_pertenece"));
				id.setTitular(rs.getString("titular"));
				id.setGestor(rs.getString("gestor"));
				id.setSupCubierta(new Integer(rs.getInt("s_cubierta")));
				id.setSupAire(new Integer(rs.getInt("s_aire")));
				id.setSupSolar(new Integer(rs.getInt("s_solar")));
				id.setObservaciones(rs.getString("observ"));
				id.setEstado(rs.getString("estado"));
				id.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				id.setObra_ejec(rs.getString("obra_ejec"));
				id.setBloqueado(rs.getString("bloqueado"));
				id.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				id.setVistaEIEL(rs.getString("vista_eiel"));
				id.setIdBien(rs.getInt("id_inventario"));
				id.setEpigInventario(rs.getInt("epig_inventario"));
				id.setIdMunicipio(rs.getInt("id_municipio"));
				id.setTitularidadMunicipal(rs.getString("titularidad_municipal"));

				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				
				id = getLstTiposDeportes(id, rs.getString("revision_actual"));
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(id);
				}else
					lstDatos.add(id);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;

		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private InstalacionesDeportivasEIEL getLstTiposDeportes(
			InstalacionesDeportivasEIEL id, String idVersion) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select * from eiel_t_id_deportes where eiel_t_id_deportes.clave='"
					+ id.getClave()
					+ "' and eiel_t_id_deportes.codprov='"
					+ id.getCodINEProvincia()
					+ "' and eiel_t_id_deportes.codmunic='"
					+ id.getCodINEMunicipio()
					+ "' and eiel_t_id_deportes.codentidad='"
					+ id.getCodINEEntidad()
					+ "' and eiel_t_id_deportes.codpoblamiento='"
					+ id.getCodINEPoblamiento()
					+ "' and eiel_t_id_deportes.orden_id='"
					+ id.getOrdenIdDeportes();
			if (idVersion.equals("-1")){
				sql+= "' and "+Const.REVISION_ACTUAL+" <= '"
				+ idVersion
				+ "' and "+Const.REVISION_EXPIRADA+" > '" + idVersion + "'";
				}
			else{
					sql+= "' and "+Const.REVISION_ACTUAL+" <= '"
					+ idVersion
					//Para la gestion de los elementos temporales
					+ "' and "+Const.REVISION_ACTUAL+" > '-1"
					+ "' and "+Const.REVISION_EXPIRADA+" > '" + idVersion + "'";
					
				}

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				TipoDeporte tipoDeporte = new TipoDeporte();
				tipoDeporte.setOrden(rs.getString("orden_id_deportes"));
				tipoDeporte.setObservaciones(rs.getString("observ"));
				tipoDeporte.setTipo(rs.getString("tipo_deporte"));
				tipoDeporte.setFechaInstalacion(rs.getDate("fecha_inst"));

				id.getListaTipos().add(tipoDeporte);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return id;

	}

	/*public ArrayList obtenerListaNucleosPoblacion(String filtro,
			String idMunicipio, boolean version, Object element) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_nucleos_poblacion.revision_actual, eiel_t_nucleos_poblacion.revision_expirada,eiel_t_nucleos_poblacion.* from eiel_t_nucleos_poblacion " ;

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if(version){
				sql+="left join versionesalfa on eiel_t_id.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}				
			sql+=" where eiel_t_nucleos_poblacion.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_nucleos_poblacion.codmunic='"
					+ idMunicipio.substring(2, 5)+ "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				InstalacionesDeportivasEIEL obj = (InstalacionesDeportivasEIEL)element;
				sql += " and eiel_t_id.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_id.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_id.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_id.orden_id = '"+obj.getOrdenIdDeportes()+"'";
				sql += " and eiel_t_id.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_id.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				NucleosPoblacionEIEL np = new NucleosPoblacionEIEL();
				
				np.setRevisionActual(rs.getLong("revision_actual"));
				np.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(np.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					np.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(np.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					np.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(np.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					np.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(np.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					np.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(np.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					np.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				np.setCodINEMunicipio(rs.getString("codmunic"));
				np.setCodINEProvincia(rs.getString("codprov"));
				np.setCodINEEntidad(rs.getString("codentidad"));
				np.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				np.setFechaRevision(rs.getDate("fecha_revision"));
				np.setEstadoActualizacion(rs.getInt("estado_actualizacion"));
				
				VersionEiel versionEiel;
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					np.setVersion(versionEiel);
				}
				lstDatos.add(np);

			}
		} catch (Exception ex) {

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}*/

	public ArrayList obtenerListaOtrosServMunicipales(String filtro,
			String idMunicipio, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_otros_serv_munic.revision_actual, eiel_t_otros_serv_munic.revision_expirada,eiel_t_otros_serv_munic.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			sql+=" from eiel_t_otros_serv_munic ";

			if(version){
				sql+="left join versionesalfa on eiel_t_otros_serv_munic.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}		

			sql+="where eiel_t_otros_serv_munic.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_otros_serv_munic.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				OtrosServMunicipalesEIEL obj = (OtrosServMunicipalesEIEL)element;
				sql += " and eiel_t_otros_serv_munic.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_otros_serv_munic.codmunic = '"+obj.getCodINEMunicipio()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				OtrosServMunicipalesEIEL sm = new OtrosServMunicipalesEIEL();

				sm.setRevisionActual(rs.getLong("revision_actual"));
				sm.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(sm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					sm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(sm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					sm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(sm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					sm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(sm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					sm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(sm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					sm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				sm.setCodINEMunicipio(rs.getString("codmunic"));
				sm.setCodINEProvincia(rs.getString("codprov"));
				sm.setSwInfGeneral(rs.getString("sw_inf_grl"));
				sm.setSwInfTuristica(rs.getString("sw_inf_tur"));
				sm.setSwGbElectronico(rs.getString("sw_gb_elec"));
				sm.setOrdSoterramiento(rs.getString("ord_soterr"));
				sm.seteEnEolica(rs.getString("en_eolica"));
				sm.setKwEolica(rs.getInt("kw_eolica"));
				sm.setEnSolar(rs.getString("en_solar"));
				sm.setKwSolar(rs.getInt("kw_solar"));
				sm.setPlMareomotriz(rs.getString("pl_mareo"));
				sm.setKwMareomotriz(rs.getInt("kw_mareo"));
				sm.setKwOtEnergias(rs.getInt("kw_ot_energ"));
				sm.setOtEnergias(rs.getString("ot_energ"));
				sm.setCoberturaTlf(rs.getString("cob_serv_tlf_m"));
				sm.setTeleCable(rs.getString("tv_dig_cable"));

				sm.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				sm.setFechaRevision(rs.getDate("fecha_revision"));
				sm.setObservaciones(rs.getString("observ"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					sm.setVersion(versionEiel);
				}
				lstDatos.add(sm);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaPadronNucleos(String filtro, String idMunicipio, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_padron_nd.revision_actual, eiel_t_padron_nd.revision_expirada,eiel_t_padron_nd.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			sql+=" from eiel_t_padron_nd ";

			if(version){
				sql+="left join versionesalfa on eiel_t_padron_nd.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}			
			sql+="where eiel_t_padron_nd.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_padron_nd.codmunic='"
					+ idMunicipio.substring(2, 5)+ "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				PadronNucleosEIEL obj = (PadronNucleosEIEL)element;
				sql += " and eiel_t_padron_nd.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_padron_nd.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_padron_nd.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_padron_nd.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				PadronNucleosEIEL pn = new PadronNucleosEIEL();
				
				pn.setRevisionActual(rs.getLong("revision_actual"));
				pn.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(pn.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					pn.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(pn.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					pn.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(pn.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					pn.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(pn.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					pn.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(pn.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					pn.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				pn.setCodINEMunicipio(rs.getString("codmunic"));
				pn.setCodINEProvincia(rs.getString("codprov"));
				pn.setCodINEEntidad(rs.getString("codentidad"));
				pn.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				pn.setFechaRevision(rs.getDate("fecha_revision"));
				pn.setHombres_a1(rs.getInt("n_hombres_a1"));
				pn.setHombres_a2(rs.getInt("n_hombres_a2"));
				pn.setMujeres_a1(rs.getInt("n_mujeres_a1"));
				pn.setMujeres_a2(rs.getInt("n_mujeres_a2"));
				pn.setTotPobl_a1(rs.getInt("total_poblacion_a1"));
				pn.setTotPobl_a2(rs.getInt("total_poblacion_a2"));
				pn.setObservaciones(rs.getString("observ"));
				pn.setFecha_a1(rs.getInt("fecha_a1"));
				pn.setFecha_a2(rs.getInt("fecha_a2"));
				pn.setBloqueado(rs.getString("bloqueado"));
				pn.setEstadoRevision(rs.getInt("estado_revision"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					pn.setVersion(versionEiel);
				}
				lstDatos.add(pn);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaPadronMunicipios(String filtro,
			String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;
			
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select "+eiel_t_padron_ttmm+".revision_actual, "+eiel_t_padron_ttmm+".revision_expirada,"+eiel_t_padron_ttmm+".* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			sql+=" from "+eiel_t_padron_ttmm+" ";

			if(version){
				sql+="left join versionesalfa on "+eiel_t_padron_ttmm+".revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}			

			sql+="where "+eiel_t_padron_ttmm+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_t_padron_ttmm+".codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				PadronMunicipiosEIEL obj = (PadronMunicipiosEIEL)element;
				sql += " and "+eiel_t_padron_ttmm+".codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and "+eiel_t_padron_ttmm+".codmunic = '"+obj.getCodINEMunicipio()+"'";
			}
			
			logger.info("Sentencia SQL padron:"+sql);
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				PadronMunicipiosEIEL pm = new PadronMunicipiosEIEL();
				
				pm.setRevisionActual(rs.getLong("revision_actual"));
				pm.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(pm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					pm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(pm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					pm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(pm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					pm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(pm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					pm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(pm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					pm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				pm.setCodINEMunicipio(rs.getString("codmunic"));
				pm.setCodINEProvincia(rs.getString("codprov"));
				pm.setFechaActualizacion(rs.getDate("fecha_revision"));
				pm.setHombres_a1(rs.getInt("n_hombres_a1"));
				pm.setHombres_a2(rs.getInt("n_hombres_a2"));
				pm.setMujeres_a1(rs.getInt("n_mujeres_a1"));
				pm.setMujeres_a2(rs.getInt("n_mujeres_a2"));
				pm.setTotPobl_a1(rs.getInt("total_poblacion_a1"));
				pm.setTotPobl_a2(rs.getInt("total_poblacion_a2"));
				pm.setFecha_a1(rs.getInt("fecha_a1"));
				pm.setFecha_a2(rs.getInt("fecha_a2"));
				pm.setObservaciones(rs.getString("observ"));
				pm.setEstadoRevision(rs.getInt("estado_revision"));
				pm.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					pm.setVersion(versionEiel);
				}
				lstDatos.add(pm);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaParquesJardines(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_pj.revision_actual, eiel_t_pj.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_pj.clave,eiel_t_pj.codmunic,eiel_t_pj.orden_pj,eiel_t_pj.codprov," +
					"eiel_t_pj.codentidad,eiel_t_pj.codpoblamiento,eiel_t_pj.estado_revision,eiel_t_pj.fecha_revision," +
					"eiel_t_pj.nombre,eiel_t_pj.tipo,eiel_t_pj.titular,eiel_t_pj.gestor,eiel_t_pj.s_cubierta," +
					"eiel_t_pj.s_solar,eiel_t_pj.s_aire,eiel_t_pj.agua,eiel_t_pj.saneamiento,eiel_t_pj.electricidad," +
					"eiel_t_pj.comedor,eiel_t_pj.juegos_inf,eiel_t_pj.otras,eiel_t_pj.estado,eiel_t_pj.observ," +
					"eiel_t_pj.acceso_s_ruedas,eiel_t_pj.obra_ejec,eiel_t_pj.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_pj.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_pj ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_pj.clave || eiel_t_pj.codprov || eiel_t_pj.codmunic || eiel_t_pj.codentidad || eiel_t_pj.codpoblamiento || eiel_t_pj.orden_pj) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_pj on eiel_t_pj.clave=eiel_c_pj.clave AND eiel_t_pj.codprov=eiel_c_pj.codprov AND eiel_t_pj.codmunic=eiel_c_pj.codmunic AND eiel_t_pj.orden_pj=eiel_c_pj.orden_pj " +
						" AND eiel_t_pj.codentidad=eiel_c_pj.codentidad AND eiel_t_pj.codpoblamiento=eiel_c_pj.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_pj.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+=" where eiel_t_pj.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_pj.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				ParquesJardinesEIEL obj = (ParquesJardinesEIEL)element;
				sql += " and eiel_t_pj.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_pj.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_pj.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_pj.orden_pj = '"+obj.getCodOrden()+"'";
				sql += " and eiel_t_pj.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_pj.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				ParquesJardinesEIEL pj = new ParquesJardinesEIEL();
				
				pj.setRevisionActual(rs.getLong("revision_actual"));
				pj.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(pj.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					pj.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(pj.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					pj.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(pj.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					pj.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(pj.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					pj.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(pj.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					pj.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				pj.setClave(rs.getString("clave"));
				pj.setCodINEMunicipio(rs.getString("codmunic"));
				pj.setCodOrden(rs.getString("orden_pj"));
				pj.setCodINEProvincia(rs.getString("codprov"));
				pj.setCodINEEntidad(rs.getString("codentidad"));
				pj.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				pj.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				pj.setFechaRevision(rs.getDate("fecha_revision"));
				pj.setNombre(rs.getString("nombre"));
				pj.setTipo(rs.getString("tipo"));
				pj.setTitularidad(rs.getString("titular"));
				pj.setGestion(rs.getString("gestor"));
				pj.setSupCubierta(new Integer(rs.getInt("s_cubierta")));
				pj.setSupSolar(new Integer(rs.getInt("s_solar")));
				pj.setSupLibre(new Integer(rs.getInt("s_aire")));
				pj.setAgua(rs.getString("agua"));
				pj.setSaneamiento(rs.getString("saneamiento"));
				pj.setElectricidad(rs.getString("electricidad"));
				pj.setComedor(rs.getString("comedor"));
				pj.setJuegosInf(rs.getString("juegos_inf"));
				pj.setOtros(rs.getString("otras"));
				pj.setEstado(rs.getString("estado"));
				pj.setObservaciones(rs.getString("observ"));
				pj.setAccesoSilla(rs.getString("acceso_s_ruedas"));
				pj.setObra_ejec(rs.getString("obra_ejec"));
				pj.setBloqueado(rs.getString("bloqueado"));
				pj.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				pj.setVistaEIEL(rs.getString("vista_eiel"));
				pj.setIdBien(rs.getInt("id_inventario"));
				pj.setEpigInventario(rs.getInt("epig_inventario"));
				pj.setIdMunicipio(rs.getInt("id_municipio"));
				pj.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					pj.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(pj);
				}else
					lstDatos.add(pj);
			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaPlaneamientoUrbano(String filtro,
			String idMunicipio, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_planeam_urban.revision_actual, eiel_t_planeam_urban.revision_expirada,eiel_t_planeam_urban.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_planeam_urban ";

			if(version){
				sql+="left join versionesalfa on eiel_t_planeam_urban.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}

			sql+="where eiel_t_planeam_urban.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_planeam_urban.codmunic='"
					+ idMunicipio.substring(2, 5)					
					+ "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				PlaneamientoUrbanoEIEL obj = (PlaneamientoUrbanoEIEL)element;
				sql += " and eiel_t_planeam_urban.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_planeam_urban.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_planeam_urban.tipo_urba = '"+obj.getTipo()+"'";
				sql += " and eiel_t_planeam_urban.orden_plan = '"+obj.getOrden()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				PlaneamientoUrbanoEIEL pu = new PlaneamientoUrbanoEIEL();
				
				pu.setRevisionActual(rs.getLong("revision_actual"));
				pu.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(pu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					pu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(pu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					pu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(pu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					pu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(pu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					pu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(pu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					pu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				pu.setCodINEMunicipio(rs.getString("codmunic"));
				pu.setCodINEProvincia(rs.getString("codprov"));
				pu.setEstadoRevision(new Integer(rs.getInt("estado_revision")));

				pu.setFechaRevision(rs.getDate("fecha_revision"));
				pu.setTipo(rs.getString("tipo_urba"));
				pu.setEstado(rs.getString("estado_tramit"));
				pu.setDenominacion(rs.getString("denominacion"));
				pu.setSupMunicipal(rs.getFloat("sup_muni"));
				pu.setFechaPublicacion(rs.getDate("fecha_bo"));
				pu.setSupUrbano(rs.getFloat("s_urbano"));
				pu.setSupUrbanizable(rs.getFloat("s_urbanizable"));
				pu.setSupNoUrbanizable(rs.getFloat("s_no_urbanizable"));
				pu.setSupNoUrbanizableEsp(rs.getFloat("s_no_urban_especial"));
				pu.setObservaciones(rs.getString("observ"));
				pu.setOrden(rs.getString("orden_plan"));
				pu.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					pu.setVersion(versionEiel);
				}
				lstDatos.add(pu);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaPoblamiento(String filtro, String idMunicipio, boolean version, Object element, String idMunicipioBusqueda) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;
			
			
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select "+eiel_t_poblamiento+".revision_actual, "+eiel_t_poblamiento+".revision_expirada,"+eiel_t_poblamiento+".* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from "+eiel_t_poblamiento+" ";

			if(version){
				sql+="left join versionesalfa on "+eiel_t_poblamiento+".revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}

			sql+="where "+eiel_t_poblamiento+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_t_poblamiento+".codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				PoblamientoEIEL obj = (PoblamientoEIEL)element;
				sql += " and "+eiel_t_poblamiento+".codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and "+eiel_t_poblamiento+".codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and "+eiel_t_poblamiento+".codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and "+eiel_t_poblamiento+".codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			logger.info("Sentencia SQL Nucleos Poblacion:"+sql);
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				PoblamientoEIEL pb = new PoblamientoEIEL();

				pb.setRevisionActual(rs.getLong("revision_actual"));
				pb.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(pb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					pb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(pb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					pb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(pb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					pb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(pb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					pb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(pb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					pb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				pb.setCodINEMunicipio(rs.getString("codmunic"));
				pb.setCodINEProvincia(rs.getString("codprov"));
				pb.setCodINEEntidad(rs.getString("codentidad"));
				pb.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				pb.setFechaActualizacion(rs.getDate("fecha_revision"));
				pb.setEstadoRevision(rs.getString("estado_revision"));
				pb.setObservaciones(rs.getString("observ"));
				pb.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					pb.setVersion(versionEiel);
				}
				lstDatos.add(pb);

			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaRecogidaBasuras(String filtro,
			String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_rb.revision_actual, eiel_t_rb.revision_expirada,eiel_t_rb.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_rb ";

			if(version){
				sql+="left join versionesalfa on eiel_t_rb.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			if ( (idMunicipioBusqueda!=null) && (idMunicipioBusqueda.equals("TODOS"))){
				
			}
			else{
				sql+=" where eiel_t_rb.codprov='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_t_rb.codmunic='"
						+ idMunicipio.substring(2, 5) + "'";
			}

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				RecogidaBasurasEIEL obj = (RecogidaBasurasEIEL)element;
				sql += " and eiel_t_rb.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_rb.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_rb.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_rb.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_rb.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
				sql += " and eiel_t_rb.tipo = '"+obj.getTipo()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				RecogidaBasurasEIEL rb = new RecogidaBasurasEIEL();
				
				rb.setRevisionActual(rs.getLong("revision_actual"));
				rb.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(rb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					rb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(rb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					rb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(rb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					rb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(rb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					rb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(rb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					rb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				rb.setClave(rs.getString("clave"));
				rb.setCodINEMunicipio(rs.getString("codmunic"));
				rb.setCodINEProvincia(rs.getString("codprov"));
				rb.setCodINEEntidad(rs.getString("codentidad"));
				rb.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				rb.setCalidad(rs.getString("calidad"));
				rb.setEstadoRevision(rs.getInt("estado_revision"));
				rb.setGestion(rs.getString("gestor"));
				rb.setFecharevision(rs.getDate("fecha_revision"));
				rb.setNumContenedores(rs.getInt("n_contenedores"));
				rb.setPeriodicidad(rs.getString("periodicidad"));
				rb.setTipo(rs.getString("tipo"));
				rb.setTonProducidas(rs.getFloat("tm_res_urb"));
				rb.setObservaciones(rs.getString("observ"));
				rb.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					rb.setVersion(versionEiel);
				}
				lstDatos.add(rb);

			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaCentrosSanitarios(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_sa.revision_actual, eiel_t_sa.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
				"eiel_t_sa.clave,eiel_t_sa.codprov,eiel_t_sa.codmunic,eiel_t_sa.codentidad," +
					"eiel_t_sa.codpoblamiento,eiel_t_sa.orden_sa,eiel_t_sa.nombre,eiel_t_sa.tipo,eiel_t_sa.titular,eiel_t_sa.gestor," +
				"eiel_t_sa.s_cubierta,eiel_t_sa.s_aire,eiel_t_sa.s_solar,eiel_t_sa.uci,eiel_t_sa.n_camas," +
				"eiel_t_sa.estado,eiel_t_sa.fecha_inst,eiel_t_sa.fecha_revision,eiel_t_sa.observ,eiel_t_sa.estado_revision,eiel_t_sa.acceso_s_ruedas," +
				"eiel_t_sa.obra_ejec,eiel_t_sa.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_sa.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_sa  ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_sa.clave || eiel_t_sa.codprov || eiel_t_sa.codmunic || eiel_t_sa.codentidad || eiel_t_sa.codpoblamiento || eiel_t_sa.orden_sa) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_sa on eiel_t_sa.clave=eiel_c_sa.clave AND eiel_t_sa.codprov=eiel_c_sa.codprov AND eiel_t_sa.codmunic=eiel_c_sa.codmunic AND eiel_t_sa.orden_sa=eiel_c_sa.orden_sa " +
						" AND eiel_t_sa.codentidad=eiel_c_sa.codentidad AND eiel_t_sa.codpoblamiento=eiel_c_sa.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_sa.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+=" where eiel_t_sa.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_sa.codmunic='"
					+ idMunicipio.substring(2, 5)+ "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				CentrosSanitariosEIEL obj = (CentrosSanitariosEIEL)element;
				sql += " and eiel_t_sa.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_sa.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_sa.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_sa.orden_sa = '"+obj.getOrden()+"'";
				sql += " and eiel_t_sa.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_sa.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				CentrosSanitariosEIEL cs = new CentrosSanitariosEIEL();
				
				cs.setRevisionActual(rs.getLong("revision_actual"));
				cs.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(cs.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					cs.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(cs.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					cs.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(cs.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					cs.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(cs.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					cs.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(cs.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					cs.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				cs.setClave(rs.getString("clave"));
				cs.setCodINEProvincia(rs.getString("codprov"));
				cs.setCodINEMunicipio(rs.getString("codmunic"));
				cs.setCodINEEntidad(rs.getString("codentidad"));
				cs.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				cs.setOrden(rs.getString("orden_sa"));
				cs.setNombre(rs.getString("nombre"));
				cs.setTipo(rs.getString("tipo"));
				cs.setTitularidad(rs.getString("titular"));
				cs.setGestion(rs.getString("gestor"));
				cs.setSupCubierta(rs.getInt("s_cubierta"));
				cs.setSupLibre(rs.getInt("s_aire"));
				cs.setSupSolar(rs.getInt("s_solar"));
				cs.setUci(rs.getString("uci"));
				cs.setNumCamas(rs.getInt("n_camas"));
				cs.setEstado(rs.getString("estado"));
				cs.setFechaInstalacion(rs.getDate("fecha_inst"));
				cs.setFechaRevision(rs.getDate("fecha_revision"));
				cs.setObservaciones(rs.getString("observ"));
				cs.setEstadoRevision(rs.getInt("estado_revision"));
				cs.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				cs.setObra_ejec(rs.getString("obra_ejec"));
				cs.setBloqueado(rs.getString("bloqueado"));
				cs.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				cs.setVistaEIEL(rs.getString("vista_eiel"));
				cs.setIdBien(rs.getInt("id_inventario"));
				cs.setEpigInventario(rs.getInt("epig_inventario"));
				cs.setIdMunicipio(rs.getInt("id_municipio"));
				cs.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					cs.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(cs);
				}else
					lstDatos.add(cs);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaSaneamientoAutonomo(String filtro,
			String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_saneam_au.revision_actual, eiel_t_saneam_au.revision_expirada,eiel_t_saneam_au.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_saneam_au  ";

			if(version){
				sql+="left join versionesalfa on eiel_t_saneam_au.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}

			sql+="where eiel_t_saneam_au.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_saneam_au.codmunic='"
					+ idMunicipio.substring(2, 5)+ "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				SaneamientoAutonomoEIEL obj = (SaneamientoAutonomoEIEL)element;
				sql += " and eiel_t_saneam_au.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_saneam_au.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_saneam_au.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_saneam_au.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_saneam_au.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				SaneamientoAutonomoEIEL sa = new SaneamientoAutonomoEIEL();

				sa.setRevisionActual(rs.getLong("revision_actual"));
				sa.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(sa.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					sa.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(sa.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					sa.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(sa.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					sa.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(sa.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					sa.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(sa.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					sa.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				sa.setClave(rs.getString("clave"));
				sa.setCodINEMunicipio(rs.getString("codmunic"));
				sa.setCodINEProvincia(rs.getString("codprov"));
				sa.setCodINEEntidad(rs.getString("codentidad"));
				sa.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				sa.setTipo(rs.getString("tipo_sau"));
				sa.setEstado(rs.getString("estado_sau"));
				sa.setAdecuacion(rs.getString("adecuacion_sau"));
				sa.setViviendas(rs.getInt("sau_vivien"));
				sa.setPoblEstacional(rs.getInt("sau_pob_es"));
				sa.setPoblResidente(rs.getInt("sau_pob_re"));
				sa.setVivDeficitarias(rs.getInt("sau_vi_def"));
				sa.setPoblEstDeficitaria(rs.getInt("sau_pob_es_def"));
				sa.setPoblResDeficitaria(rs.getInt("sau_pob_re_def"));
				sa.setFechaInstalacion(rs.getDate("fecha_inst"));
				sa.setFechaRevision(rs.getDate("fecha_revision"));
				sa.setObservaciones(rs.getString("observ"));
				sa.setEstadoRevision(rs.getInt("estado_revision"));
				sa.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					sa.setVersion(versionEiel);
				}
				lstDatos.add(sa);

			}
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaServiciosSaneamiento(String filtro,
			String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_saneam_serv.revision_actual, eiel_t_saneam_serv.revision_expirada,eiel_t_saneam_serv.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_saneam_serv  ";

			if(version){
				sql+="left join versionesalfa on eiel_t_saneam_serv.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			
			sql+="where eiel_t_saneam_serv.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_saneam_serv.codmunic='"
					+ idMunicipio.substring(2, 5)+ "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				ServiciosSaneamientoEIEL obj = (ServiciosSaneamientoEIEL)element;
				sql += " and eiel_t_saneam_serv.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_saneam_serv.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_saneam_serv.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_saneam_serv.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				ServiciosSaneamientoEIEL ss = new ServiciosSaneamientoEIEL();


				ss.setRevisionActual(rs.getLong("revision_actual"));
				ss.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(ss.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					ss.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(ss.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					ss.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(ss.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					ss.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(ss.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					ss.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(ss.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					ss.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				ss.setCodINEMunicipio(rs.getString("codmunic"));
				ss.setCodINEProvincia(rs.getString("codprov"));
				ss.setCodINEEntidad(rs.getString("codentidad"));
				ss.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				ss.setPozos(rs.getString("pozos_registro"));
				ss.setSumideros(rs.getString("sumideros"));
				ss.setAlivAcumulacion(rs.getString("aliv_c_acum"));
				ss.setAlivSinAcumulacion(rs.getString("aliv_s_acum"));
				ss.setCalidad(rs.getString("calidad_serv"));
				ss.setVivNoConectadas(rs.getInt("viviendas_s_conex"));
				ss.setVivConectadas(rs.getInt("viviendas_c_conex"));
				ss.setLongDeficitaria(rs.getInt("long_rs_deficit"));
				ss.setVivDeficitarias(rs.getInt("viviendas_def_conex"));
				ss.setPoblResDeficitaria(rs.getInt("pobl_res_def_afect"));
				ss.setPoblEstDeficitaria(rs.getInt("pobl_est_def_afect"));
				ss.setCaudalTotal(rs.getInt("caudal_total"));
				ss.setCaudalTratado(rs.getInt("caudal_tratado"));
				ss.setCaudalIndustrial(rs.getInt("c_reutilizado_ind"));
				ss.setCaudalRustico(rs.getInt("c_reutilizado_rust"));
				ss.setCaudalUrbano(rs.getInt("c_reutilizado_urb"));
				ss.setObservaciones(rs.getString("observ"));
				ss.setFechaRevision(rs.getDate("fecha_revision"));
				ss.setEstadoRevision(rs.getInt("estado_revision"));
				ss.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					ss.setVersion(versionEiel);
				}
				lstDatos.add(ss);

			}
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaServiciosRecogidaBasura(String filtro,
			String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_rb_serv.revision_actual, eiel_t_rb_serv.revision_expirada,eiel_t_rb_serv.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_rb_serv  ";

			if(version){
				sql+="left join versionesalfa on eiel_t_rb_serv.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+=" where eiel_t_rb_serv.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_rb_serv.codmunic='"
					+ idMunicipio.substring(2, 5)+ "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				ServiciosRecogidaBasuraEIEL obj = (ServiciosRecogidaBasuraEIEL)element;
				sql += " and eiel_t_rb_serv.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_rb_serv.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_rb_serv.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_rb_serv.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				ServiciosRecogidaBasuraEIEL srb = new ServiciosRecogidaBasuraEIEL();

				srb.setRevisionActual(rs.getLong("revision_actual"));
				srb.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(srb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					srb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(srb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					srb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(srb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					srb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(srb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					srb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(srb.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					srb.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				srb.setCodINEMunicipio(rs.getString("codmunic"));
				srb.setCodINEProvincia(rs.getString("codprov"));
				srb.setCodINEEntidad(rs.getString("codentidad"));
				srb.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				srb.setPlantilla(rs.getInt("plantilla_serv_limp"));
				srb.setPoblEstSinServicio(rs.getInt("srb_pob_est_afect"));
				srb.setPoblResSinServicio(rs.getInt("srb_pob_res_afect"));
				srb.setServLimpCalles(rs.getString("serv_limp_calles"));
				srb.setVivSinServicio(rs.getInt("srb_viviendas_afec"));
				srb.setFechaRevision(rs.getDate("fecha_revision"));
				srb.setObservaciones(rs.getString("observ"));
				srb.setEstadoRevision(rs.getInt("estado_revision"));
				srb.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					srb.setVersion(versionEiel);
				}
				lstDatos.add(srb);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaEdificiosSinUso(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception{

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_su.revision_actual, eiel_t_su.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_su.clave,eiel_t_su.codmunic,eiel_t_su.codprov," +
					"eiel_t_su.codentidad,eiel_t_su.codpoblamiento,eiel_t_su.orden_su," +
					"eiel_t_su.estado,eiel_t_su.nombre,eiel_t_su.s_cubierta,eiel_t_su.s_aire," +
					"eiel_t_su.s_solar,eiel_t_su.titular,eiel_t_su.uso_anterior," +
					"eiel_t_su.fecha_revision,eiel_t_su.observ,eiel_t_su.inst_pertenece," +
					"eiel_t_su.estado_revision,eiel_t_su.acceso_s_ruedas,eiel_t_su.obra_ejec,eiel_t_su.bloqueado";

			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_su.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
						
			sql+=" from eiel_t_su ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_su.clave || eiel_t_su.codprov || eiel_t_su.codmunic || eiel_t_su.codentidad || eiel_t_su.codpoblamiento || eiel_t_su.orden_su) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_su on eiel_t_su.clave=eiel_c_su.clave AND eiel_t_su.codprov=eiel_c_su.codprov AND eiel_t_su.codmunic=eiel_c_su.codmunic AND eiel_t_su.orden_su=eiel_c_su.orden_su " +
						" AND eiel_t_su.codentidad=eiel_c_su.codentidad AND eiel_t_su.codpoblamiento=eiel_c_su.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_su.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+=" where eiel_t_su.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_su.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				EdificiosSinUsoEIEL obj = (EdificiosSinUsoEIEL)element;
				sql += " and eiel_t_su.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_su.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_su.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_su.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_su.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
				sql += " and eiel_t_su.orden_su = '"+obj.getCodOrden()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				EdificiosSinUsoEIEL eu = new EdificiosSinUsoEIEL();
				
				
				eu.setRevisionActual(rs.getLong("revision_actual"));
				eu.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(eu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					eu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(eu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					eu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(eu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					eu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(eu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					eu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(eu.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					eu.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				eu.setClave(rs.getString("clave"));
				eu.setCodINEMunicipio(rs.getString("codmunic"));
				eu.setCodINEProvincia(rs.getString("codprov"));
				eu.setCodINEEntidad(rs.getString("codentidad"));
				eu.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				eu.setCodOrden(rs.getString("orden_su"));
				eu.setEstado(rs.getString("estado"));
				eu.setNombre(rs.getString("nombre"));
				eu.setSupCubierta(rs.getInt("s_cubierta"));
				eu.setSupLibre(rs.getInt("s_aire"));
				eu.setSupSolar(rs.getInt("s_solar"));
				eu.setTitularidad(rs.getString("titular"));
				eu.setUsoAnterior(rs.getString("uso_anterior"));
				eu.setFechaRevision(rs.getDate("fecha_revision"));
				eu.setObservaciones(rs.getString("observ"));
				eu.setInst_pertenece(rs.getString("inst_pertenece"));
				eu.setEstadoRevision(rs.getInt("estado_revision"));
				eu.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				eu.setObra_ejec(rs.getString("obra_ejec"));
				eu.setBloqueado(rs.getString("bloqueado"));
				eu.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				eu.setVistaEIEL(rs.getString("vista_eiel"));
				eu.setIdBien(rs.getInt("id_inventario"));
				eu.setEpigInventario(rs.getInt("epig_inventario"));
				eu.setIdMunicipio(rs.getInt("id_municipio"));
				eu.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					eu.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(eu);
				}else
					lstDatos.add(eu);

			}
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaTanatorios(String filtro, String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select  eiel_t_ta.revision_actual, eiel_t_ta.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_ta.clave,eiel_t_ta.codmunic,eiel_t_ta.codprov,eiel_t_ta.codentidad," +
					"eiel_t_ta.codpoblamiento,eiel_t_ta.orden_ta,eiel_t_ta.fecha_inst,eiel_t_ta.salas," +
					"eiel_t_ta.gestor,eiel_t_ta.estado,eiel_t_ta.nombre,eiel_t_ta.s_cubierta,eiel_t_ta.s_aire," +
					"eiel_t_ta.s_solar,eiel_t_ta.titular,eiel_t_ta.fecha_revision,eiel_t_ta.observ," +
					"eiel_t_ta.estado_revision,eiel_t_ta.acceso_s_ruedas,eiel_t_ta.obra_ejec,eiel_t_ta.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_ta.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
									
			sql+=" from eiel_t_ta ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_ta.clave || eiel_t_ta.codprov || eiel_t_ta.codmunic || eiel_t_ta.codentidad || eiel_t_ta.codpoblamiento || eiel_t_ta.orden_ta) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_ta on eiel_t_ta.clave=eiel_c_ta.clave AND eiel_t_ta.codprov=eiel_c_ta.codprov AND eiel_t_ta.codmunic=eiel_c_ta.codmunic AND eiel_t_ta.orden_ta=eiel_c_ta.orden_ta " +
						" AND eiel_t_ta.codentidad=eiel_c_ta.codentidad AND eiel_t_ta.codpoblamiento=eiel_c_ta.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_ta.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+=" where eiel_t_ta.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_ta.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				TanatoriosEIEL obj = (TanatoriosEIEL)element;
				sql += " and eiel_t_ta.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_ta.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_ta.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_ta.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_ta.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
				sql += " and eiel_t_ta.orden_ta = '"+obj.getCodOrden()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				TanatoriosEIEL ta = new TanatoriosEIEL();

				ta.setRevisionActual(rs.getLong("revision_actual"));
				ta.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(ta.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					ta.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(ta.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					ta.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(ta.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					ta.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(ta.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					ta.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(ta.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					ta.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				ta.setClave(rs.getString("clave"));
				ta.setCodINEMunicipio(rs.getString("codmunic"));
				ta.setCodINEProvincia(rs.getString("codprov"));
				ta.setCodINEEntidad(rs.getString("codentidad"));
				ta.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				ta.setCodOrden(rs.getString("orden_ta"));
				ta.setFechaInstalacion(rs.getDate("fecha_inst"));
				ta.setSalas(rs.getInt("salas"));
				ta.setGestion(rs.getString("gestor"));
				ta.setEstado(rs.getString("estado"));
				ta.setNombre(rs.getString("nombre"));
				ta.setSupCubierta(rs.getInt("s_cubierta"));
				ta.setSupLibre(rs.getInt("s_aire"));
				ta.setSupSolar(rs.getInt("s_solar"));
				ta.setTitularidad(rs.getString("titular"));
				ta.setFechaRevision(rs.getDate("fecha_revision"));
				ta.setObservaciones(rs.getString("observ"));
				ta.setEstadoRevision(rs.getInt("estado_revision"));
				ta.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				ta.setObra_ejec(rs.getString("obra_ejec"));
				ta.setBloqueado(rs.getString("bloqueado"));
				ta.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				ta.setVistaEIEL(rs.getString("vista_eiel"));
				ta.setIdBien(rs.getInt("id_inventario"));
				ta.setEpigInventario(rs.getInt("epig_inventario"));
				ta.setIdMunicipio(rs.getInt("id_municipio"));
				ta.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					ta.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(ta);
				}else
					lstDatos.add(ta);

			}
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaVertederos(String filtro, String idMunicipio,boolean noGeoReferenciado,
											boolean version, Object element, int idMunicipioSeleccionado,String nucleoSeleccionado) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_vt.revision_actual, eiel_t_vt.revision_expirada,eiel_t_vt.clave,eiel_t_vt.codmunic,eiel_t_vt.codprov,eiel_t_vt.orden_vt," +
					"eiel_t_vt.tipo,eiel_t_vt.titular,eiel_t_vt.gestor,eiel_t_vt.olores,eiel_t_vt.humos," +
					"eiel_t_vt.cont_anima,eiel_t_vt.r_inun,eiel_t_vt.filtracion,eiel_t_vt.impacto_v," +
					"eiel_t_vt.frec_averia,eiel_t_vt.saturacion,eiel_t_vt.inestable,eiel_t_vt.otros," +
					"eiel_t_vt.capac_tot,eiel_t_vt.capac_tot_porc,eiel_t_vt.capac_transf,eiel_t_vt.estado," +
					"eiel_t_vt.vida_util,eiel_t_vt.categoria,eiel_t_vt.actividad," +
					"eiel_t_vt.fecha_apertura,eiel_t_vt.obra_ejec,eiel_t_vt.observ,eiel_t_vt.capac_ampl," +
					"eiel_t_vt.fecha_revision,eiel_t_vt.estado_revision,eiel_t_vt.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_vt.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												

			sql+=" from eiel_t_vt ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_vt on eiel_t_vt.clave=eiel_c_vt.clave AND eiel_t_vt.codprov=eiel_c_vt.codprov AND eiel_t_vt.codmunic=eiel_c_vt.codmunic AND eiel_t_vt.orden_vt=eiel_c_vt.orden_vt ";
			if(version){
				sql+="left join versionesalfa on eiel_t_vt.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			if (idMunicipioSeleccionado==0){
				sql+=" where ((eiel_t_vt.orden_vt,eiel_t_vt.codprov,eiel_t_vt.codmunic) IN ("
						+ "select eiel_tr_vt_pobl.orden_vt, eiel_tr_vt_pobl.codprov_vt, eiel_tr_vt_pobl.codmunic_vt from eiel_tr_vt_pobl where "
						+ "eiel_tr_vt_pobl.codprov='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_tr_vt_pobl.codmunic='"
						+ idMunicipio.substring(2, 5)
						+ "'"
						+ ")"
						+ "OR "
						+ "eiel_t_vt.codprov='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_t_vt.codmunic='"
						+ idMunicipio.substring(2, 5)+ "')";
			}
			else if (nucleoSeleccionado==null){
				sql+=" where (eiel_t_vt.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "' and eiel_t_vt.codmunic='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(2, 5) + "')";
			}
			else{
				sql+=" where (eiel_t_vt.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "')";
			}

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				VertederosEIEL obj = (VertederosEIEL)element;
				sql += " and eiel_t_vt.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_vt.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_vt.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_vt.orden_vt = '"+obj.getCodOrden()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				VertederosEIEL vt = new VertederosEIEL();

				vt.setRevisionActual(rs.getLong("revision_actual"));
				vt.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(vt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					vt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(vt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					vt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(vt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					vt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(vt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					vt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(vt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					vt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				vt.setClave(rs.getString("clave"));
				vt.setCodINEMunicipio(rs.getString("codmunic"));
				vt.setCodINEProvincia(rs.getString("codprov"));
				vt.setCodOrden(rs.getString("orden_vt"));
				vt.setTipo(rs.getString("tipo"));
				vt.setTitularidad(rs.getString("titular"));
				vt.setGestion(rs.getString("gestor"));
				vt.setOlores(rs.getString("olores"));
				vt.setHumos(rs.getString("humos"));
				vt.setContAnimal(rs.getString("cont_anima"));
				vt.setRsgoInundacion(rs.getString("r_inun"));
				vt.setFiltraciones(rs.getString("filtracion"));
				vt.setImptVisual(rs.getString("impacto_v"));
				vt.setFrecAverias(rs.getString("frec_averia"));
				vt.setSaturacion(rs.getString("saturacion"));
				vt.setInestabilidad(rs.getString("inestable"));
				vt.setOtros(rs.getString("otros"));
				vt.setCapTotal(rs.getInt("capac_tot"));
				vt.setCapOcupada(rs.getInt("capac_tot_porc"));
				vt.setCapTransform(rs.getInt("capac_transf"));
				vt.setEstado(rs.getString("estado"));
				vt.setVidaUtil(rs.getInt("vida_util"));
				vt.setCategoria(rs.getString("categoria"));
				vt.setActividad(rs.getString("actividad"));
				vt.setFechaApertura(rs.getInt("fecha_apertura"));
				vt.setObra_ejecutada(rs.getString("obra_ejec"));
				vt.setObservaciones(rs.getString("observ"));
				vt.setPosbAmpliacion(rs.getString("capac_ampl"));
				vt.setFechaRevision(rs.getDate("fecha_revision"));
				vt.setEstadoRevision(rs.getInt("estado_revision"));
				vt.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					vt.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(vt);
				}else
					lstDatos.add(vt);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaCarreteras(String filtro, String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		String sql=null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			sql = "select eiel_t_carreteras.revision_actual, eiel_t_carreteras.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio as id_municipio_inventario, eiel_inventario.titularidad_municipal, "+ 
					" eiel_t_carreteras.id_municipio,eiel_t_carreteras.codprov,eiel_t_carreteras.cod_carrt,eiel_t_carreteras.pki,eiel_t_carreteras.pkf,eiel_t_carreteras.clase_via,eiel_t_carreteras.denominacion " +
					",eiel_t_carreteras.fecha_revision,eiel_t_carreteras.titular_via,eiel_t_carreteras.observ,eiel_t_carreteras.bloqueado ";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_tramos_carreteras.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_carreteras ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_carreteras.codprov || eiel_t_carreteras.cod_carrt) ";

			if(noGeoReferenciado)
				sql+="left join eiel_c_tramos_carreteras on eiel_t_carreteras.cod_carrt=eiel_c_tramos_carreteras.cod_carrt AND eiel_t_carreteras.codprov=eiel_c_tramos_carreteras.codprov ";
			if(version){
				sql+="left join versionesalfa on eiel_t_carreteras.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+=" where eiel_t_carreteras.codprov='"
					+ idMunicipio.substring(0, 2) +"'"
					+ " and eiel_t_carreteras.id_municipio="+idMunicipio
					+ " and eiel_t_carreteras.cod_carrt!=' ' ";

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if(noGeoReferenciado)
				sql+=" GROUP BY eiel_t_carreteras.codprov,eiel_t_carreteras.id_municipio,eiel_t_carreteras.cod_carrt,eiel_t_carreteras.clase_via,eiel_t_carreteras.denominacion," +
						" eiel_t_carreteras.fecha_revision,eiel_t_carreteras.titular_via,eiel_t_carreteras.observ,eiel_t_carreteras.bloqueado , valida," +
						"eiel_t_carreteras.revision_actual,eiel_t_carreteras.revision_expirada,eiel_inventario.epig_inventario,eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario,eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal,eiel_t_carreteras.pki,eiel_t_carreteras.pkf ";

			if (element!=null){
				TramosCarreterasEIEL obj = (TramosCarreterasEIEL)element;
				sql += " and eiel_t_carreteras.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_carreteras.cod_carrt = '"+obj.getCodCarretera()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			logger.debug("Sentencia SQL carreteras:"+sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				TramosCarreterasEIEL ct = new TramosCarreterasEIEL();


				ct.setRevisionActual(rs.getLong("revision_actual"));
				ct.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(ct.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					ct.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(ct.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					ct.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(ct.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					ct.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(ct.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					ct.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(ct.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					ct.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				ct.setCodINEMunicipio(String.valueOf(rs.getInt("id_municipio")));
				ct.setCodINEProvincia(rs.getString("codprov"));
				ct.setCodCarretera(rs.getString("cod_carrt"));
				ct.setPKI(rs.getBigDecimal("pki"));
				ct.setPKF(rs.getBigDecimal("pkf"));
				ct.setClaseVia(rs.getString("clase_via"));
				ct.setDenominacion(rs.getString("denominacion"));
				ct.setFechaActualizacion(rs.getDate("fecha_revision"));
				ct.setTitularidad(rs.getString("titular_via"));
				ct.setObservaciones(rs.getString("observ"));
				ct.setBloqueado(rs.getString("bloqueado"));
				ct.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				ct.setVistaEIEL(rs.getString("vista_eiel"));
				ct.setIdBien(rs.getInt("id_inventario"));
				ct.setEpigInventario(rs.getInt("epig_inventario"));
				ct.setIdMunicipio(rs.getInt("id_municipio"));
				ct.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					ct.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(ct);
				}else
					lstDatos.add(ct);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			logger.error("Sentencia erronea:"+sql);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	public ArrayList obtenerListaDepositos(String filtro, String idMunicipio,boolean noGeoReferenciado, boolean version, 
									Object element, int idMunicipioSeleccionado,String nucleoSeleccionado) throws Exception{
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_abast_de.revision_actual, eiel_t_abast_de.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal,eiel_t_abast_de.clave, "+ 
					"eiel_t_abast_de.codprov,eiel_t_abast_de.codmunic,eiel_t_abast_de.orden_de,eiel_t_abast_de.ubicacion,eiel_t_abast_de.titular," +
					"eiel_t_abast_de.gestor,eiel_t_abast_de.capacidad,eiel_t_abast_de.estado,eiel_t_abast_de.proteccion," +
					"eiel_t_abast_de.fecha_limpieza,eiel_t_abast_de.contador,eiel_t_abast_de.fecha_inst,eiel_t_abast_de.observ," +
					"eiel_t_abast_de.fecha_revision,eiel_t_abast_de.estado_revision,eiel_t_abast_de.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_abast_de.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
			
			sql+=" from eiel_t_abast_de  ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_abast_de.clave || eiel_t_abast_de.codprov || eiel_t_abast_de.codmunic || eiel_t_abast_de.orden_de ) ";

			if(noGeoReferenciado)
				sql+="left join eiel_c_abast_de on eiel_t_abast_de.clave=eiel_c_abast_de.clave AND eiel_t_abast_de.codprov=eiel_c_abast_de.codprov AND eiel_t_abast_de.codmunic=eiel_c_abast_de.codmunic AND eiel_t_abast_de.orden_de=eiel_c_abast_de.orden_de ";
			if(version){
				sql+="left join versionesalfa on eiel_t_abast_de.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}	
			if (idMunicipioSeleccionado==0){
				sql+=" where ((eiel_t_abast_de.orden_de,eiel_t_abast_de.codprov,eiel_t_abast_de.codmunic) IN ("
						+ "select eiel_tr_abast_de_pobl.orden_de, eiel_tr_abast_de_pobl.codprov_de, eiel_tr_abast_de_pobl.codmunic_de from eiel_tr_abast_de_pobl where "
						+ "eiel_tr_abast_de_pobl.codprov_pobl='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_tr_abast_de_pobl.codmunic_pobl='"
						+ idMunicipio.substring(2, 5)
						+ "'"
						+ ")"
						+ "OR "
						+ "eiel_t_abast_de.codprov='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_t_abast_de.codmunic='"
						+ idMunicipio.substring(2, 5) + "')";
			}
			else if (nucleoSeleccionado==null){
				sql+=" where (eiel_t_abast_de.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "' and eiel_t_abast_de.codmunic='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(2, 5) + "')";	
			}
			else{
				sql+=" where (eiel_t_abast_de.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "')";	
			}


			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}

			if (element!=null){
				DepositosEIEL obj = (DepositosEIEL)element;
				sql += " and eiel_t_abast_de.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_abast_de.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_abast_de.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_abast_de.orden_de = '"+obj.getOrdenDeposito()+"'";
			}
			
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				DepositosEIEL de = new DepositosEIEL();
				
				de.setRevisionActual(rs.getLong("revision_actual"));
				de.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(de.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					de.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(de.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					de.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(de.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					de.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(de.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					de.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);	
				}
				else if (String.valueOf(de.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					de.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				de.setClave(rs.getString("clave"));
				de.setCodINEProvincia(rs.getString("codprov"));
				de.setCodINEMunicipio(rs.getString("codmunic"));
				de.setOrdenDeposito(rs.getString("orden_de"));
				/* Resto de Campos: String, Integer */
				de.setUbicacion(rs.getString("ubicacion"));
				de.setTitularidad(rs.getString("titular"));
				de.setGestor(rs.getString("gestor"));
				de.setCapacidad(new Integer(rs.getInt("capacidad")));
				de.setEstado(rs.getString("estado"));
				de.setProteccion(rs.getString("proteccion"));
				de.setFechaLimpieza(rs.getString("fecha_limpieza"));
				de.setContador(rs.getString("contador"));
				de.setFechaInstalacion(rs.getDate("fecha_inst"));
				de.setObservaciones(rs.getString("observ"));
				de.setFechaRevision(rs.getDate("fecha_revision"));
				de.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				de.setBloqueado(rs.getString("bloqueado"));
				de.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				de.setVistaEIEL(rs.getString("vista_eiel"));
				de.setIdBien(rs.getInt("id_inventario"));
				de.setEpigInventario(rs.getInt("epig_inventario"));
				de.setIdMunicipio(rs.getInt("id_municipio"));
				de.setTitularidadMunicipal(rs.getString("titularidad_municipal"));

				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					de.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(de);
				}else
					lstDatos.add(de);

			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaPuntosVertido(String filtro, String idMunicipio,boolean noGeoReferenciado, boolean version, 
											Object element, int idMunicipioSeleccionado,String nucleoSeleccionado) throws Exception{
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_saneam_pv.revision_actual, eiel_t_saneam_pv.revision_expirada,eiel_t_saneam_pv.clave,eiel_t_saneam_pv.codprov,eiel_t_saneam_pv.codmunic," +
					"eiel_t_saneam_pv.orden_pv,eiel_t_saneam_pv.tipo,eiel_t_saneam_pv.zona," +
					"eiel_t_saneam_pv.distancia_nucleo,eiel_t_saneam_pv.fecha_ini_vertido," +
					"eiel_t_saneam_pv.observ,eiel_t_saneam_pv.fecha_revision,eiel_t_saneam_pv.estado_revision," +
					"eiel_t_saneam_pv.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_saneam_pv.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
						
			sql+=" from eiel_t_saneam_pv ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_saneam_pv on eiel_t_saneam_pv.clave=eiel_c_saneam_pv.clave AND eiel_t_saneam_pv.codprov=eiel_c_saneam_pv.codprov AND eiel_t_saneam_pv.codmunic=eiel_c_saneam_pv.codmunic AND eiel_t_saneam_pv.orden_pv=eiel_c_saneam_pv.orden_pv ";
			if(version){
				sql+="left join versionesalfa on eiel_t_saneam_pv.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			if (idMunicipioSeleccionado==0){
				sql+=" where ((eiel_t_saneam_pv.orden_pv,eiel_t_saneam_pv.codprov,eiel_t_saneam_pv.codmunic) IN ("
						+ "select eiel_tr_saneam_pv_pobl.orden_pv, eiel_tr_saneam_pv_pobl.codprov_pv, eiel_tr_saneam_pv_pobl.codmunic_pv from eiel_tr_saneam_pv_pobl where "
						+ "eiel_tr_saneam_pv_pobl.codprov_pobl='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_tr_saneam_pv_pobl.codmunic_pobl='"
						+ idMunicipio.substring(2, 5)
						+ "'"
						+ ")"
						+ "OR "
						+ "eiel_t_saneam_pv.codprov='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_t_saneam_pv.codmunic='"
						+ idMunicipio.substring(2, 5) + "')";
			}
			else if (nucleoSeleccionado==null){
				sql+=" where (eiel_t_saneam_pv.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "' and eiel_t_saneam_pv.codmunic='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(2, 5) + "')";
			}
			else{
				sql+=" where (eiel_t_saneam_pv.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "')";
			}
			
			
			

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			
			if (element!=null){
				PuntosVertidoEIEL obj = (PuntosVertidoEIEL)element;
				sql += " and eiel_t_saneam_pv.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_saneam_pv.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_saneam_pv.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_saneam_pv.orden_pv = '"+obj.getOrden()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				PuntosVertidoEIEL pv = new PuntosVertidoEIEL();
				
				pv.setRevisionActual(rs.getLong("revision_actual"));
				pv.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(pv.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					pv.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(pv.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					pv.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(pv.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					pv.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(pv.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					pv.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(pv.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					pv.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				pv.setClave(rs.getString("clave"));
				pv.setCodINEProvincia(rs.getString("codprov"));
				pv.setCodINEMunicipio(rs.getString("codmunic"));
				pv.setOrden(rs.getString("orden_pv"));
				/* Resto de Campos: String, Integer, Date */
				pv.setTipo(rs.getString("tipo"));
				pv.setZona(rs.getString("zona"));
				pv.setDistanciaNucleo(new Integer(rs.getInt("distancia_nucleo")));
				pv.setFechaInicio(rs.getDate("fecha_ini_vertido"));
				pv.setObservaciones(rs.getString("observ"));
				pv.setFechaRevision(rs.getDate("fecha_revision"));
				pv.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				pv.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					pv.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(pv);
				}else
					lstDatos.add(pv);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaServiciosAbastecimientos(String filtro,
			String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;
			
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_abast_serv.revision_actual, eiel_t_abast_serv.revision_expirada,* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
						
			sql+=" from eiel_t_abast_serv ";

			if(version){
				sql+="left join versionesalfa on eiel_t_abast_serv.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}		
			sql +=" where eiel_t_abast_serv.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_abast_serv.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				ServiciosAbastecimientosEIEL obj = (ServiciosAbastecimientosEIEL)element;
				sql += " and eiel_t_abast_serv.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_abast_serv.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_abast_serv.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_abast_serv.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				ServiciosAbastecimientosEIEL id = new ServiciosAbastecimientosEIEL();
				
				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setCodINEProvincia(rs.getString("codprov"));
				id.setCodINEMunicipio(rs.getString("codmunic"));
				id.setCodINEEntidad(rs.getString("codentidad"));
				id.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				/* Resto de Campos: String, Integer, Date */
				id.setViviendasConectadas(new Integer(rs
						.getInt("viviendas_c_conex")));
				id.setViviendasNoConectadas(new Integer(rs
						.getInt("viviendas_s_conexion")));
				id.setConsumoInvierno(new Integer(rs.getInt("consumo_inv")));
				id.setConsumoVerano(new Integer(rs.getInt("consumo_verano")));
				id.setViviendasExcesoPresion(new Integer(rs
						.getInt("viv_exceso_pres")));
				id.setViviendasDeficitPresion(new Integer(rs
						.getInt("viv_defic_presion")));
				id.setPerdidasAgua(new Integer(rs.getInt("perdidas_agua")));
				id.setCalidadServicio(rs.getString("calidad_serv"));
				id.setLongitudDeficitaria(new Integer(rs.getInt("long_deficit")));
				id.setViviendasDeficitarias(new Integer(rs
						.getInt("viv_deficitarias")));
				id.setPoblacionResidenteDeficitaria(new Integer(rs
						.getInt("pobl_res_afect")));
				id.setPoblacionEstacionalDeficitaria(new Integer(rs
						.getInt("pobl_est_afect")));
				id.setObservaciones(rs.getString("observ"));
				id.setFechaRevision(rs.getDate("fecha_revision"));
				id.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				id.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				lstDatos.add(id);

			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaCabildoConsejo(String filtro,
			String idMunicipio, boolean version, Object element) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_cabildo_consejo.revision_actual, eiel_t_cabildo_consejo.revision_expirada,eiel_t_cabildo_consejo.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
									
			sql+=" from eiel_t_cabildo_consejo ";

			if(version){
				sql+="left join versionesalfa on eiel_t_cabildo_consejo.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}					
			
			sql+="where eiel_t_cabildo_consejo.codprov='"
					+ idMunicipio.substring(0, 2) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				CabildoConsejoEIEL obj = (CabildoConsejoEIEL)element;
				sql += " and eiel_t_cabildo_consejo.codprov = '"+obj.getCodINEProvincia()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				CabildoConsejoEIEL id = new CabildoConsejoEIEL();
				

				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setCodINEProvincia(rs.getString("codprov"));
				/* Resto de Campos: String, Integer, Date */
				id.setCodIsla(rs.getString("cod_isla"));
				id.setDenominacion(rs.getString("denominacion"));
				id.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				lstDatos.add(id);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaCentrosAsistenciales(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_as.revision_actual, eiel_t_as.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_as.clave,eiel_t_as.codprov,eiel_t_as.codmunic,eiel_t_as.codentidad,eiel_t_as.codpoblamiento," +
					"eiel_t_as.orden_as,eiel_t_as.nombre,eiel_t_as.tipo,eiel_t_as.titular,eiel_t_as.gestor,eiel_t_as.plazas,eiel_t_as.s_cubierta,eiel_t_as.s_aire," +
					"eiel_t_as.s_solar,eiel_t_as.estado,eiel_t_as.acceso_s_ruedas,eiel_t_as.obra_ejec,eiel_t_as.fecha_inst,eiel_t_as.observ," +
					"eiel_t_as.fecha_revision,eiel_t_as.estado_revision,eiel_t_as.bloqueado";					
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_as.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
									
			sql+=" from eiel_t_as ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_as on eiel_t_as.clave=eiel_c_as.clave AND eiel_t_as.codprov=eiel_c_as.codprov AND eiel_t_as.codmunic=eiel_c_as.codmunic AND eiel_t_as.orden_as=eiel_c_as.orden_as " +
						" AND eiel_t_as.codentidad=eiel_c_as.codentidad AND eiel_t_as.codpoblamiento=eiel_c_as.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_as.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_as.clave || eiel_t_as.codprov || eiel_t_as.codmunic || eiel_t_as.codentidad || eiel_t_as.codpoblamiento || eiel_t_as.orden_as) ";

			sql+=" where eiel_t_as.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_as.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				CentrosAsistencialesEIEL obj = (CentrosAsistencialesEIEL)element;
				sql += " and eiel_t_as.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_as.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_as.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_as.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_as.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
				sql += " and eiel_t_as.orden_as = '"+obj.getOrdenAsistencial()+"'";
			}
						
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				CentrosAsistencialesEIEL as = new CentrosAsistencialesEIEL();
				as.setRevisionActual(rs.getLong("revision_actual"));
				as.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(as.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					as.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(as.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					as.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(as.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					as.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(as.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					as.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(as.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					as.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				as.setClave(rs.getString("clave"));
				as.setCodINEProvincia(rs.getString("codprov"));
				as.setCodINEMunicipio(rs.getString("codmunic"));
				as.setCodINEEntidad(rs.getString("codentidad"));
				as.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				as.setOrdenAsistencial(rs.getString("orden_as"));
				/* Resto de Campos: String, Integer, Date */
				as.setNombre(rs.getString("nombre"));
				as.setTipo(rs.getString("tipo"));
				as.setTitularidad(rs.getString("titular"));
				as.setGestion(rs.getString("gestor"));
				as.setPlazas(new Integer(rs.getInt("plazas")));
				as.setSuperficieCubierta(new Integer(rs.getInt("s_cubierta")));
				as.setSuperficieAireLibre(new Integer(rs.getInt("s_aire")));
				as.setSuperficieSolar(new Integer(rs.getInt("s_solar")));
				as.setEstado(rs.getString("estado"));
				as.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				as.setObra_ejec(rs.getString("obra_ejec"));
				as.setFechaIstalacion(rs.getDate("fecha_inst"));
				as.setObservaciones(rs.getString("observ"));
				as.setFechaRevision(rs.getDate("fecha_revision"));
				as.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				as.setBloqueado(rs.getString("bloqueado"));
				as.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				as.setVistaEIEL(rs.getString("vista_eiel"));
				as.setIdBien(rs.getInt("id_inventario"));
				as.setEpigInventario(rs.getInt("epig_inventario"));
				as.setIdMunicipio(rs.getInt("id_municipio"));
				as.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					as.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(as);
				}else
					lstDatos.add(as);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaCementerios(String filtro, String idMunicipio,boolean noGeoReferenciado, boolean version, Object element)  throws Exception{
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_ce.revision_actual, eiel_t_ce.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_ce.clave,eiel_t_ce.codprov,eiel_t_ce.codmunic,eiel_t_ce.codentidad,eiel_t_ce.codpoblamiento," +
					"eiel_t_ce.orden_ce,eiel_t_ce.nombre,eiel_t_ce.titular,eiel_t_ce.distancia,eiel_t_ce.acceso,capilla,eiel_t_ce.deposito," +
					"eiel_t_ce.ampliacion,eiel_t_ce.saturacion,eiel_t_ce.superficie,eiel_t_ce.crematorio,eiel_t_ce.fecha_inst," +
					"eiel_t_ce.observ,eiel_t_ce.fecha_revision,eiel_t_ce.estado_revision,eiel_t_ce.acceso_s_ruedas," +
					"eiel_t_ce.obra_ejec,eiel_t_ce.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_ce.\"GEOMETRY\")AS valida ";

			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
			
			sql+=" from eiel_t_ce ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_ce.clave || eiel_t_ce.codprov || eiel_t_ce.codmunic || eiel_t_ce.codentidad || eiel_t_ce.codpoblamiento || eiel_t_ce.orden_ce) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_ce on eiel_t_ce.clave=eiel_c_ce.clave AND eiel_t_ce.codprov=eiel_c_ce.codprov AND eiel_t_ce.codmunic=eiel_c_ce.codmunic AND eiel_t_ce.orden_ce=eiel_c_ce.orden_ce " +
						"AND eiel_t_ce.codentidad=eiel_c_ce.codentidad AND eiel_t_ce.codpoblamiento=eiel_c_ce.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_ce.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}			
			sql+="where eiel_t_ce.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_ce.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				CementeriosEIEL obj = (CementeriosEIEL)element;
				sql += " and eiel_t_ce.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_ce.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_ce.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_ce.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_ce.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
				sql += " and eiel_t_ce.orden_ce = '"+obj.getOrden()+"'";
			}
			
			logger.info("Sentencia SQL:"+sql);
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;

			while (rs.next()) {
				/* Campos Clave */
				CementeriosEIEL ce = new CementeriosEIEL();
				
				ce.setRevisionActual(rs.getLong("revision_actual"));
				ce.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(ce.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					ce.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(ce.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					ce.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(ce.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					ce.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(ce.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					ce.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(ce.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					ce.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				ce.setClave(rs.getString("clave"));
				ce.setCodINEProvincia(rs.getString("codprov"));
				ce.setCodINEMunicipio(rs.getString("codmunic"));
				ce.setCodINEEntidad(rs.getString("codentidad"));
				ce.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				ce.setOrden(rs.getString("orden_ce"));
				/* Resto de Campos: String, Integer, Date */
				ce.setNombre(rs.getString("nombre"));
				ce.setTitular(rs.getString("titular"));
				
				//logger.info("distancia:"+rs.getFloat("distancia"));
				ce.setDistancia(new Float(rs.getFloat("distancia")));
				ce.setAcceso(rs.getString("acceso"));
				ce.setCapilla(rs.getString("capilla"));
				ce.setDepositoCadaveres(rs.getString("deposito"));
				ce.setAmpliacion(rs.getString("ampliacion"));
				
				//logger.info("Saturacion:"+rs.getFloat("saturacion"));
				//logger.info("Superficie:"+rs.getInt("superficie"));
				
				ce.setSaturacion(new Float(rs.getFloat("saturacion")));
				ce.setSuperficie(new Integer(rs.getInt("superficie")));
				ce.setCrematorio(rs.getString("crematorio"));
				ce.setFechaInstalacion(rs.getDate("fecha_inst"));
				ce.setObservaciones(rs.getString("observ"));
				ce.setFechaRevision(rs.getDate("fecha_revision"));
				ce.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				ce.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				ce.setObra_ejec(rs.getString("obra_ejec"));
				ce.setBloqueado(rs.getString("bloqueado"));
				ce.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				ce.setVistaEIEL(rs.getString("vista_eiel"));
				ce.setIdBien(rs.getInt("id_inventario"));
				ce.setEpigInventario(rs.getInt("epig_inventario"));
				ce.setIdMunicipio(rs.getInt("id_municipio"));
				ce.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					ce.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(ce);
				}else
					lstDatos.add(ce);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaEntidadesSingulares(String filtro,
			String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception{
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;
			
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select "+eiel_t_entidad_singular+".revision_actual, "+eiel_t_entidad_singular+".revision_expirada,"+eiel_t_entidad_singular+".* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
			
			sql+=" from "+eiel_t_entidad_singular+" ";
			if(version){
				sql+="left join versionesalfa on "+eiel_t_entidad_singular+".revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}			
					
			sql+="where "+eiel_t_entidad_singular+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_t_entidad_singular+".codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				EntidadesSingularesEIEL obj = (EntidadesSingularesEIEL)element;
				sql += " and "+eiel_t_entidad_singular+".codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and "+eiel_t_entidad_singular+".codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and "+eiel_t_entidad_singular+".codentidad = '"+obj.getCodINEEntidad()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				EntidadesSingularesEIEL id = new EntidadesSingularesEIEL();
				

				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setCodINEProvincia(rs.getString("codprov"));
				id.setCodINEMunicipio(rs.getString("codmunic"));
				id.setCodINEEntidad(rs.getString("codentidad"));
				/* Resto de Campos: String, Integer, Date */
				id.setDenominacion(rs.getString("denominacion"));
				id.setObservaciones(rs.getString("observ"));
				id.setFechaRevision(rs.getDate("fecha_revision"));
				id.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				id.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				lstDatos.add(id);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}
	
	public ArrayList obtenerListaNucleosPoblacion(String filtro,
			String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception{
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;
			
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select "+eiel_c_nucleo_poblacion+".revision_actual, "+eiel_c_nucleo_poblacion+".revision_expirada,"+eiel_c_nucleo_poblacion+".* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
			
			sql+=" from "+eiel_c_nucleo_poblacion+" ";
			if(version){
				sql+="left join versionesalfa on "+eiel_c_nucleo_poblacion+".revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}			
					
			sql+="where "+eiel_c_nucleo_poblacion+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				NucleosPoblacionEIEL obj = (NucleosPoblacionEIEL)element;
				sql += " and "+eiel_c_nucleo_poblacion+".codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and "+eiel_c_nucleo_poblacion+".codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and "+eiel_c_nucleo_poblacion+".codentidad = '"+obj.getCodINEEntidad()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				NucleosPoblacionEIEL id = new NucleosPoblacionEIEL();
				

				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setCodINEProvincia(rs.getString("codprov"));
				id.setCodINEMunicipio(rs.getString("codmunic"));
				id.setCodINEEntidad(rs.getString("codentidad"));
				id.setCodINEPoblamiento(rs.getString("codpoblamiento"));

				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				lstDatos.add(id);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaInfoTerminosMunicipales(String filtro,
			String idMunicipio, boolean version, Object element) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_inf_ttmm.revision_actual, eiel_t_inf_ttmm.revision_expirada,eiel_t_inf_ttmm.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
			
			sql+=" from eiel_t_inf_ttmm ";
			if(version){
				sql+="left join versionesalfa on eiel_t_inf_ttmm.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}		
			sql+="where eiel_t_inf_ttmm.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_t_inf_ttmm.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				NucleoEncuestado7EIEL obj = (NucleoEncuestado7EIEL)element;
				sql += " and eiel_t_inf_ttmm.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_inf_ttmm.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_inf_ttmm.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_inf_ttmm.codpoblamiento ='"+obj.getCodINEPoblamiento()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				NucleoEncuestado7EIEL id = new NucleoEncuestado7EIEL();
				
				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setCodINEProvincia(rs.getString("codprov"));
				id.setCodINEMunicipio(rs.getString("codmunic"));
				id.setCodINEEntidad(rs.getString("codentidad"));
				id.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				/* Resto de Campos: String, Integer, Date */
				id.setTvAntena(rs.getString("tv_ant"));
				id.setTvCable(rs.getString("tv_ca"));
				id.setCalidadGSM(rs.getString("tm_gsm"));
				id.setCalidadUMTS(rs.getString("tm_umts"));
				id.setCalidadGPRS(rs.getString("tm_gprs"));
				id.setCorreos(rs.getString("correo"));
				id.setRdsi(rs.getString("ba_rd"));
				id.setAdsl(rs.getString("ba_xd"));
				id.setWifi(rs.getString("ba_wi"));
				id.setInternetTV(rs.getString("ba_ca"));
				id.setInternetRed(rs.getString("ba_rb"));
				id.setInternetSatelite(rs.getString("ba_st"));
				id.setInternetPublico(rs.getString("capi"));
				id.setCalidadElectricidad(rs.getString("electric"));
				id.setCalidadGas(rs.getString("gas"));
				id.setViviendasDeficitariasAlumbrado(new Integer(rs
						.getInt("alu_v_sin")));
				id.setLongitudDeficitariaAlumbrado(new Integer(rs
						.getInt("alu_l_sin")));
				id.setObservaciones(rs.getString("observ"));
				id.setFechaRevision(rs.getDate("fecha_revision"));
				id.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				id.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				lstDatos.add(id);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaIncendiosProteccion(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_ip.revision_actual, eiel_t_ip.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_ip.clave,eiel_t_ip.codprov,eiel_t_ip.codmunic,eiel_t_ip.codentidad," +
					"eiel_t_ip.codpoblamiento,eiel_t_ip.orden_ip,eiel_t_ip.nombre,eiel_t_ip.tipo,eiel_t_ip.titular," +
					"eiel_t_ip.gestor,eiel_t_ip.ambito,eiel_t_ip.s_cubierta,eiel_t_ip.s_aire,eiel_t_ip.s_solar," +
					"eiel_t_ip.plan_profe,eiel_t_ip.plan_volun,eiel_t_ip.estado,eiel_t_ip.vehic_incendio," +
					"eiel_t_ip.vehic_rescate,eiel_t_ip.ambulancia,eiel_t_ip.medios_aereos,eiel_t_ip.otros_vehc," +
					"eiel_t_ip.quitanieves,eiel_t_ip.detec_ince,eiel_t_ip.otros,eiel_t_ip.fecha_inst," +
					"eiel_t_ip.observ,eiel_t_ip.fecha_revision,eiel_t_ip.estado_revision,eiel_t_ip.acceso_s_ruedas," +
					"eiel_t_ip.obra_ejec,eiel_t_ip.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_ip.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
			
			
			sql+=" from eiel_t_ip ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_ip.clave || eiel_t_ip.codprov || eiel_t_ip.codmunic || eiel_t_ip.codentidad || eiel_t_ip.codpoblamiento || eiel_t_ip.orden_ip) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_ip on eiel_t_ip.clave=eiel_c_ip.clave AND eiel_t_ip.codprov=eiel_c_ip.codprov AND eiel_t_ip.codmunic=eiel_c_ip.codmunic AND eiel_t_ip.orden_ip=eiel_c_ip.orden_ip " +
						" AND eiel_t_ip.codentidad=eiel_c_ip.codentidad AND eiel_t_ip.codpoblamiento=eiel_c_ip.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_ip.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}		
			sql+=" where eiel_t_ip.codprov='"
					+ idMunicipio.substring(0, 2) + "' and eiel_t_ip.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				IncendiosProteccionEIEL obj = (IncendiosProteccionEIEL)element;
				sql += " and eiel_t_ip.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_ip.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_ip.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_ip.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_ip.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
				sql += " and eiel_t_ip.orden_ip = '"+obj.getOrden()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				IncendiosProteccionEIEL ip = new IncendiosProteccionEIEL();
				

				ip.setRevisionActual(rs.getLong("revision_actual"));
				ip.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(ip.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					ip.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(ip.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					ip.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(ip.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					ip.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(ip.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					ip.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(ip.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					ip.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				ip.setClave(rs.getString("clave"));
				ip.setCodINEProvincia(rs.getString("codprov"));
				ip.setCodINEMunicipio(rs.getString("codmunic"));
				ip.setCodINEEntidad(rs.getString("codentidad"));
				ip.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				ip.setOrden(rs.getString("orden_ip"));
				/* Resto de Campos: String, Integer, Date */
				ip.setNombre(rs.getString("nombre"));
				ip.setTipo(rs.getString("tipo"));
				ip.setTitular(rs.getString("titular"));
				ip.setGestor(rs.getString("gestor"));
				ip.setAmbito(rs.getString("ambito"));
				ip.setSuperficieCubierta(new Integer(rs.getInt("s_cubierta")));
				ip.setSuperficieAireLibre(new Integer(rs.getInt("s_aire")));
				ip.setSuperficieSolar(new Integer(rs.getInt("s_solar")));
				ip.setPlantillaProfesionales(new Integer(rs
						.getInt("plan_profe")));
				ip.setPlantillaVoluntarios(new Integer(rs.getInt("plan_volun")));
				ip.setEstado(rs.getString("estado"));
				ip.setVechiculosIncendios(new Integer(rs
						.getInt("vehic_incendio")));
				ip.setVechiculosRescate(new Integer(rs.getInt("vehic_rescate")));
				ip.setAmbulancias(new Integer(rs.getInt("ambulancia")));
				ip.setMediosAereos(new Integer(rs.getInt("medios_aereos")));
				ip.setOtrosVehiculos(new Integer(rs.getInt("otros_vehc")));
				ip.setQuitanieves(new Integer(rs.getInt("quitanieves")));
				ip.setSistemasDeteccionIncencios(new Integer(rs
						.getInt("detec_ince")));
				ip.setOtros(new Integer(rs.getInt("otros")));
				ip.setFechaInstalacion(rs.getDate("fecha_inst"));
				ip.setObservaciones(rs.getString("observ"));
				ip.setFechaRevision(rs.getDate("fecha_revision"));
				ip.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				ip.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				ip.setObra_ejec(rs.getString("obra_ejec"));
				ip.setBloqueado(rs.getString("bloqueado"));
				ip.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				ip.setVistaEIEL(rs.getString("vista_eiel"));
				ip.setIdBien(rs.getInt("id_inventario"));
				ip.setEpigInventario(rs.getInt("epig_inventario"));
				ip.setIdMunicipio(rs.getInt("id_municipio"));
				ip.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					ip.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(ip);
				}else
					lstDatos.add(ip);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaLonjasMercados(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_lm.revision_actual, eiel_t_lm.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_lm.clave,eiel_t_lm.codprov,eiel_t_lm.codmunic,eiel_t_lm.codentidad," +
					"eiel_t_lm.codpoblamiento,eiel_t_lm.orden_lm,eiel_t_lm.nombre,eiel_t_lm.tipo,eiel_t_lm.titular," +
					"eiel_t_lm.gestor,eiel_t_lm.s_cubierta,eiel_t_lm.s_aire,eiel_t_lm.s_solar,eiel_t_lm.estado," +
					"eiel_t_lm.fecha_inst,eiel_t_lm.observ,eiel_t_lm.fecha_revision,eiel_t_lm.estado_revision," +
					"eiel_t_lm.acceso_s_ruedas,eiel_t_lm.obra_ejec,eiel_t_lm.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_lm.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";									
						
			sql+=" from eiel_t_lm ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_lm.clave || eiel_t_lm.codprov || eiel_t_lm.codmunic || eiel_t_lm.codentidad || eiel_t_lm.codpoblamiento || eiel_t_lm.orden_lm) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_lm on eiel_t_lm.clave=eiel_c_lm.clave AND eiel_t_lm.codprov=eiel_c_lm.codprov AND eiel_t_lm.codmunic=eiel_c_lm.codmunic AND eiel_t_lm.orden_lm=eiel_c_lm.orden_lm " +
						" AND eiel_t_lm.codentidad=eiel_c_lm.codentidad AND eiel_t_lm.codpoblamiento=eiel_c_lm.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_lm.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}		
			sql+=" where eiel_t_lm.codprov='"
					+ idMunicipio.substring(0, 2) + "' and eiel_t_lm.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			
			if (element!=null){
				LonjasMercadosEIEL obj = (LonjasMercadosEIEL)element;
				sql += " and eiel_t_lm.clave= '"+obj.getClave()+"'";
				sql += " and eiel_t_lm.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_lm.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_lm.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_lm.codpoblamiento= '"+obj.getCodINEPoblamiento()+"'";
				sql += " and eiel_t_lm.orden_lm = '"+obj.getOrden()+"'";
			}
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				LonjasMercadosEIEL lm = new LonjasMercadosEIEL();
				

				lm.setRevisionActual(rs.getLong("revision_actual"));
				lm.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(lm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					lm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(lm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					lm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(lm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					lm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(lm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					lm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(lm.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					lm.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				lm.setClave(rs.getString("clave"));
				lm.setCodINEProvincia(rs.getString("codprov"));
				lm.setCodINEMunicipio(rs.getString("codmunic"));
				lm.setCodINEEntidad(rs.getString("codentidad"));
				lm.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				lm.setOrden(rs.getString("orden_lm"));
				/* Resto de Campos: String, Integer, Date */
				lm.setNombre(rs.getString("nombre"));
				lm.setTipo(rs.getString("tipo"));
				lm.setTitular(rs.getString("titular"));
				lm.setGestion(rs.getString("gestor"));
				lm.setSuperficieCubierta(new Integer(rs.getInt("s_cubierta")));
				lm.setSuperficieAireLibre(new Integer(rs.getInt("s_aire")));
				lm.setSuperficieSolar(new Integer(rs.getInt("s_solar")));
				lm.setEstado(rs.getString("estado"));
				lm.setFechaInstalacion(rs.getDate("fecha_inst"));
				lm.setObservaciones(rs.getString("observ"));
				lm.setFechaRevision(rs.getDate("fecha_revision"));
				lm.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				lm.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				lm.setObra_ejec(rs.getString("obra_ejec"));
				lm.setBloqueado(rs.getString("bloqueado"));
				lm.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				lm.setVistaEIEL(rs.getString("vista_eiel"));
				lm.setIdBien(rs.getInt("id_inventario"));
				lm.setEpigInventario(rs.getInt("epig_inventario"));
				lm.setIdMunicipio(rs.getInt("id_municipio"));
				lm.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					lm.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(lm);
				}else
					lstDatos.add(lm);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaMataderos(String filtro, String idMunicipio,boolean noGeoReferenciado, boolean version, Object element) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_mt.revision_actual, eiel_t_mt.revision_expirada,eiel_inventario.epig_inventario, eiel_inventario.union_clave_eiel, eiel_inventario.vista_eiel, eiel_inventario.id_inventario, eiel_inventario.id_municipio, eiel_inventario.titularidad_municipal, "+ 
					"eiel_t_mt.clave,eiel_t_mt.codprov,eiel_t_mt.codmunic,eiel_t_mt.codentidad," +
					"eiel_t_mt.codpoblamiento,eiel_t_mt.orden_mt,eiel_t_mt.nombre,eiel_t_mt.clase," +
					"eiel_t_mt.titular,eiel_t_mt.gestor,eiel_t_mt.s_cubierta,eiel_t_mt.s_aire,eiel_t_mt.s_solar," +
					"eiel_t_mt.estado,eiel_t_mt.capacidad,eiel_t_mt.utilizacion,eiel_t_mt.tunel," +
					"eiel_t_mt.bovino,eiel_t_mt.ovino,eiel_t_mt.porcino,eiel_t_mt.otros,eiel_t_mt.fecha_inst," +
					"eiel_t_mt.observ,eiel_t_mt.fecha_revision,eiel_t_mt.estado_revision," +
					"eiel_t_mt.acceso_s_ruedas,eiel_t_mt.obra_ejec,eiel_t_mt.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_mt.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			sql+=" from eiel_t_mt ";
			sql+="left join eiel_inventario on eiel_inventario.union_clave_eiel = (eiel_t_mt.clave || eiel_t_mt.codprov || eiel_t_mt.codmunic || eiel_t_mt.codentidad || eiel_t_mt.codpoblamiento || eiel_t_mt.orden_mt) ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_mt on eiel_t_mt.clave=eiel_c_mt.clave AND eiel_t_mt.codprov=eiel_c_mt.codprov AND eiel_t_mt.codmunic=eiel_c_mt.codmunic AND eiel_t_mt.orden_mt=eiel_c_mt.orden_mt " +
						" AND eiel_t_mt.codentidad=eiel_c_mt.codentidad AND eiel_t_mt.codpoblamiento=eiel_c_mt.codpoblamiento ";
			if(version){
				sql+="left join versionesalfa on eiel_t_mt.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}		
			sql+=" where eiel_t_mt.codprov='"
					+ idMunicipio.substring(0, 2) + "' and eiel_t_mt.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			if (element!=null){
				MataderosEIEL obj = (MataderosEIEL)element;
				sql += " and eiel_t_mt.clave= '"+obj.getClave()+"'";
				sql += " and eiel_t_mt.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_mt.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_mt.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_mt.codpoblamiento= '"+obj.getCodINEPoblamiento()+"'";
				sql += " and eiel_t_mt.orden_mt = '"+obj.getOrden()+"'";
			}
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				MataderosEIEL mt = new MataderosEIEL();
				
				mt.setRevisionActual(rs.getLong("revision_actual"));
				mt.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(mt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					mt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(mt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					mt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(mt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					mt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(mt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					mt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(mt.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					mt.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				mt.setClave(rs.getString("clave"));
				mt.setCodINEProvincia(rs.getString("codprov"));
				mt.setCodINEMunicipio(rs.getString("codmunic"));
				mt.setCodINEEntidad(rs.getString("codentidad"));
				mt.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				mt.setOrden(rs.getString("orden_mt"));
				/* Resto de Campos: String, Integer, Date */
				mt.setNombre(rs.getString("nombre"));
				mt.setClase(rs.getString("clase"));
				mt.setTitular(rs.getString("titular"));
				mt.setGestion(rs.getString("gestor"));
				mt.setSuperficieCubierta(new Integer(rs.getInt("s_cubierta")));
				mt.setSuperficieAireLibre(new Integer(rs.getInt("s_aire")));
				mt.setSuperficieSolar(new Integer(rs.getInt("s_solar")));
				mt.setEstado(rs.getString("estado"));
				mt.setCapacidadMax(new Integer(rs.getInt("capacidad")));
				mt.setCapacidadUtilizada(new Integer(rs.getInt("utilizacion")));
				mt.setTunel(rs.getString("tunel"));
				mt.setBovino(rs.getString("bovino"));
				mt.setOvino(rs.getString("ovino"));
				mt.setPorcino(rs.getString("porcino"));
				mt.setOtros(rs.getString("otros"));
				mt.setFechaInstalacion(rs.getDate("fecha_inst"));
				mt.setObservaciones(rs.getString("observ"));
				mt.setFechaRevision(rs.getDate("fecha_revision"));
				mt.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				mt.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				mt.setObra_ejec(rs.getString("obra_ejec"));
				mt.setBloqueado(rs.getString("bloqueado"));
				mt.setUnionClaveEIEL(rs.getString("union_clave_eiel"));
				mt.setVistaEIEL(rs.getString("vista_eiel"));
				mt.setIdBien(rs.getInt("id_inventario"));
				mt.setEpigInventario(rs.getInt("epig_inventario"));
				mt.setIdMunicipio(rs.getInt("id_municipio"));
				mt.setTitularidadMunicipal(rs.getString("titularidad_municipal"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					mt.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(mt);
				}else
					lstDatos.add(mt);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaTratamientosPotabilizacion(String filtro,
			String idMunicipio,boolean noGeoReferenciado, boolean version, Object element, int idMunicipioSeleccionado,String nucleoSeleccionado) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select eiel_t_abast_tp.revision_actual, eiel_t_abast_tp.revision_expirada,eiel_t_abast_tp.clave,eiel_t_abast_tp.codprov,eiel_t_abast_tp.codmunic," +
					"eiel_t_abast_tp.orden_tp,eiel_t_abast_tp.tipo,eiel_t_abast_tp.ubicacion," +
					"eiel_t_abast_tp.s_desinf,eiel_t_abast_tp.categoria_a1,eiel_t_abast_tp.categoria_a2," +
					"eiel_t_abast_tp.categoria_a3,eiel_t_abast_tp.desaladora,eiel_t_abast_tp.otros," +
					"eiel_t_abast_tp.desinf_1,eiel_t_abast_tp.desinf_2,eiel_t_abast_tp.desinf_3," +
					"eiel_t_abast_tp.periodicidad,eiel_t_abast_tp.organismo_control,eiel_t_abast_tp.estado," +
					"eiel_t_abast_tp.observ,eiel_t_abast_tp.fecha_inst,eiel_t_abast_tp.fecha_revision," +
					"eiel_t_abast_tp.estado_revision,eiel_t_abast_tp.bloqueado";
			if(noGeoReferenciado)	
				sql+=", ST_IsValid(eiel_c_abast_tp.\"GEOMETRY\")AS valida ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_abast_tp ";
			if(noGeoReferenciado)
				sql+="left join eiel_c_abast_tp on eiel_t_abast_tp.clave=eiel_c_abast_tp.clave AND eiel_t_abast_tp.codprov=eiel_c_abast_tp.codprov AND eiel_t_abast_tp.codmunic=eiel_c_abast_tp.codmunic AND eiel_t_abast_tp.orden_tp=eiel_c_abast_tp.orden_tp ";
			if(version){
				sql+="left join versionesalfa on eiel_t_abast_tp.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			if (idMunicipioSeleccionado==0){
				sql+=" where ((eiel_t_abast_tp.orden_tp,eiel_t_abast_tp.codprov,eiel_t_abast_tp.codmunic) IN ("
						+ "select eiel_tr_abast_tp_pobl.orden_tp, eiel_tr_abast_tp_pobl.codprov_tp, eiel_tr_abast_tp_pobl.codmunic_tp from eiel_tr_abast_tp_pobl where "
						+ "eiel_tr_abast_tp_pobl.codprov_pobl='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_tr_abast_tp_pobl.codmunic_pobl='"
						+ idMunicipio.substring(2, 5)
						+ "'"
						+ ")"
						+ "OR "
						+ "eiel_t_abast_tp.codprov='"
						+ idMunicipio.substring(0, 2)
						+ "' and eiel_t_abast_tp.codmunic='"
						+ idMunicipio.substring(2, 5) + "')";
			}
			else if (nucleoSeleccionado==null){
				sql+=" where (eiel_t_abast_tp.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "' and eiel_t_abast_tp.codmunic='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(2, 5) + "')";	
				
			}
			else{
				sql+=" where (eiel_t_abast_tp.codprov='"+ completarConCeros(String.valueOf(idMunicipioSeleccionado),5).substring(0, 2)
						+ "')";						
			}

			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			
			if (element!=null){
				TratamientosPotabilizacionEIEL obj = (TratamientosPotabilizacionEIEL)element;
				sql += " and eiel_t_abast_tp.clave = '"+obj.getClave()+"'";
				sql += " and eiel_t_abast_tp.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_abast_tp.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_abast_tp.orden_tp = '"+obj.getOrdenPotabilizadora()+"'";
			}
			
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				TratamientosPotabilizacionEIEL tp = new TratamientosPotabilizacionEIEL();
				
				tp.setRevisionActual(rs.getLong("revision_actual"));
				tp.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(tp.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					tp.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(tp.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					tp.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(tp.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					tp.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(tp.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					tp.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(tp.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					tp.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				tp.setClave(rs.getString("clave"));
				tp.setCodINEProvincia(rs.getString("codprov"));
				tp.setCodINEMunicipio(rs.getString("codmunic"));
				tp.setOrdenPotabilizadora(rs.getString("orden_tp"));
				/* Resto de Campos: String, Integer, Date */
				tp.setTipo(rs.getString("tipo"));
				tp.setUbicacion(rs.getString("ubicacion"));
				tp.setSoloDesinfeccion(rs.getString("s_desinf"));
				tp.setCategoriaA1(rs.getString("categoria_a1"));
				tp.setCategoriaA2(rs.getString("categoria_a2"));
				tp.setCategoriaA3(rs.getString("categoria_a3"));
				tp.setDesaladora(rs.getString("desaladora"));
				tp.setOtros(rs.getString("otros"));
				tp.setMetodoDesinfeccion1(rs.getString("desinf_1"));
				tp.setMetodoDesinfeccion2(rs.getString("desinf_2"));
				tp.setMetodoDesinfeccion3(rs.getString("desinf_3"));
				tp.setPerioricidad(rs.getString("periodicidad"));
				tp.setOrganismoControl(rs.getString("organismo_control"));
				tp.setEstado(rs.getString("estado"));
				tp.setObserv(rs.getString("observ"));
				tp.setFechaInstalacion(rs.getDate("fecha_inst"));
				tp.setFechaRevision(rs.getDate("fecha_revision"));
				tp.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				tp.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					tp.setVersion(versionEiel);
				}
				if(noGeoReferenciado){
					if(!rs.getBoolean("valida"))
						lstDatos.add(tp);
				}else
					lstDatos.add(tp);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaDiseminados(String filtro, String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;
	
			
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_mun_diseminados.revision_actual, eiel_t_mun_diseminados.revision_expirada,eiel_t_mun_diseminados.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_mun_diseminados ";
			if(version){
				sql+="left join versionesalfa on eiel_t_mun_diseminados.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+=" where codprov='"
					+ idMunicipio.substring(0, 2) + "' and codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			
			if (element!=null){
				DiseminadosEIEL obj = (DiseminadosEIEL)element;
				sql += " and eiel_t_mun_diseminados.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_mun_diseminados.codmunic = '"+obj.getCodINEMunicipio()+"'";
			}			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				DiseminadosEIEL id = new DiseminadosEIEL();

				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setCodINEProvincia(rs.getString("codprov"));
				id.setCodINEMunicipio(rs.getString("codmunic"));
				/* Resto de Campos: Integer y Float */
				id.setPadron(new Integer(rs.getInt("padron_dis")));
				id.setPoblacionEstacional(new Integer(rs.getInt("pob_estaci")));
				id.setViviendasTotales(new Integer(rs.getInt("viv_total")));
				id.setPlazasHoteleras(new Integer(rs.getInt("hoteles")));
				id.setPlazasCasasRurales(new Integer(rs.getInt("casas_rural")));
				id.setLongitudAbastecimiento(new Integer(rs.getInt("longitud")));
				id.setViviendasConAbastecimiento(new Integer(rs
						.getInt("aag_v_cone")));
				id.setViviendasSinAbastecimiento(new Integer(rs
						.getInt("aag_v_ncon")));
				id.setConsumoInvierno(new Integer(rs.getInt("aag_c_invi")));
				id.setConsumoVerano(new Integer(rs.getInt("aag_c_vera")));
				id.setViviendasExcesoPresion(new Integer(rs
						.getInt("aag_v_expr")));
				id.setViviendasDefectoPresion(new Integer(rs
						.getInt("aag_v_depr")));
				id.setLongDeficitariaAbast(new Integer(rs.getInt("aag_l_defi")));
				id.setViviendasDeficitAbast(new Integer(rs.getInt("aag_v_defi")));
				id.setPoblacionResidenteDefAbast(new Integer(rs
						.getInt("aag_pr_def")));
				id.setPoblacionEstacionalDefAbast(new Integer(rs
						.getInt("aag_pe_def")));
				id.setPoblacionResidenteAbastAuto(new Integer(rs
						.getInt("aau_pob_re")));
				id.setPoblacionEstacionalAbastAuto(new Integer(rs
						.getInt("aau_pob_es")));
				id.setViviendasDefAbastAuto(new Integer(rs.getInt("aau_def_vi")));
				id.setPoblacionResidenteDefAbastAuto(new Integer(rs
						.getInt("aau_def_re")));
				id.setPoblacionEstacionalDefAbastAuto(new Integer(rs
						.getInt("aau_def_es")));
				id.setFuentesNoControladas(new Integer(rs.getInt("aau_fencon")));
				id.setLongitudSaneamiento(new Integer(rs.getInt("longi_ramal")));
				id.setViviendasConSaneamiento(new Integer(rs
						.getInt("syd_v_cone")));
				id.setViviendasSinSaneamiento(new Integer(rs
						.getInt("syd_v_ncon")));
				id.setLongDeficitariaSaneam(new Integer(rs.getInt("syd_l_defi")));
				id.setViviendasDefSaneam(new Integer(rs.getInt("syd_v_defi")));
				id.setPoblacionResidenteDefSaneam(new Integer(rs
						.getInt("syd_pr_def")));
				id.setPoblacionEstacionalDefSaneam(new Integer(rs
						.getInt("syd_pe_def")));
				id.setCaudalDesaguado(new Integer(rs.getInt("syd_c_desa")));
				id.setCaudalTratado(new Integer(rs.getInt("syd_c_trat")));
				id.setViviendasSaneamientoAuto(new Integer(rs
						.getInt("sau_vivien")));
				id.setPoblacionEstacionalSaneamAuto(new Integer(rs
						.getInt("sau_pob_es")));
				id.setViviendasDeficitSaneamAuto(new Integer(rs
						.getInt("sau_vi_def")));
				id.setPoblacionResidenteDefSaneamAuto(new Integer(rs
						.getInt("sau_pob_re_def")));
				id.setPoblacionEstacionalDefSaneamAuto(new Integer(rs
						.getInt("sau_pob_es_def")));
				id.setTmBasura(new Float(rs.getFloat("produ_basu")));
				id.setContenedores(new Integer(rs.getInt("contenedores")));
				id.setViviendasSinBasura(new Integer(rs.getInt("rba_v_sser")));
				id.setPoblacionResidenteSinBasura(new Integer(rs
						.getInt("rba_pr_sse")));
				id.setPoblacionEstacionalSinBasura(new Integer(rs
						.getInt("rba_pe_sse")));
				id.setPlantillaLimpieza(new Integer(rs.getInt("rba_plalim")));
				id.setPuntosLuz(new Integer(rs.getInt("puntos_luz")));
				id.setViviendasSinAlumbrado(new Integer(rs.getInt("alu_v_sin")));
				id.setLongDeficitariaAlumbrado(new Integer(rs
						.getInt("alu_l_sin")));
				id.setVivendasAbastecimientoAuto(new Integer(rs
						.getInt("aau_vivien")));
				id.setFuentesControladas(new Integer(rs.getInt("aau_fecont")));
				id.setPoblacionResidenteSaneamAuto(new Integer(rs
						.getInt("sau_pob_re")));
				id.setFecha(rs.getDate("fecha_revision"));
				id.setEstado(new Integer(rs.getInt("estado_revision")));
				id.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				lstDatos.add(id);
			}

		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			safeClose(rs, statement, connection);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaEncuestados1(String filtro, String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception{
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;
			
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select "+eiel_t_nucl_encuest_1+".revision_actual, "+eiel_t_nucl_encuest_1+".revision_expirada,"+eiel_t_nucl_encuest_1+".* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from "+eiel_t_nucl_encuest_1+" ";
			if(version){
				sql+="left join versionesalfa on "+eiel_t_nucl_encuest_1+".revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+= " where codprov='"
					+ idMunicipio.substring(0, 2) + "' and codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			
			if (element!=null){
				Encuestados1EIEL obj = (Encuestados1EIEL)element;
				sql += " and "+eiel_t_nucl_encuest_1+".codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and "+eiel_t_nucl_encuest_1+".codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and "+eiel_t_nucl_encuest_1+".codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and "+eiel_t_nucl_encuest_1+".codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}			
			
			sql+=" order by "+eiel_t_nucl_encuest_1+".codentidad";
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				Encuestados1EIEL id = new Encuestados1EIEL();
				
				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setCodINEProvincia(rs.getString("codprov"));
				id.setCodINEMunicipio(rs.getString("codmunic"));
				id.setCodINEEntidad(rs.getString("codentidad"));
				id.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				/* Resto de Campos: String, Integer, Date */
				id.setPadron(new Integer(rs.getInt("padron")));
				id.setPoblacionEstacional(new Integer(rs
						.getInt("pob_estacional")));
				id.setAltitud(new Integer(rs.getInt("altitud")));
				id.setViviendasTotales(new Integer(rs.getInt("viviendas_total")));
				id.setPlazasHoteleras(new Integer(rs.getInt("hoteles")));
				id.setPlazasCasasRurales(new Integer(rs.getInt("casas_rural")));
				id.setAccesibilidad(rs.getString("accesibilidad"));
				id.setFechaRevision(rs.getDate("fecha_revision"));
				id.setObservaciones(rs.getString("observ"));
				id.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				id.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				lstDatos.add(id);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaEncuestados2(String filtro, String idMunicipio, boolean version, Object element,String idMunicipioBusqueda) throws Exception{
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			if (idMunicipioBusqueda!=null)
				idMunicipio=idMunicipioBusqueda;
			
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_nucl_encuest_2.revision_actual, eiel_t_nucl_encuest_2.revision_expirada,eiel_t_nucl_encuest_2.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_nucl_encuest_2 ";
			if(version){
				sql+="left join versionesalfa on eiel_t_nucl_encuest_2.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
					
			sql+="where codprov='"
					+ idMunicipio.substring(0, 2) + "' and codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			
			if (element!=null){
				Encuestados2EIEL obj = (Encuestados2EIEL)element;
				sql += " and eiel_t_nucl_encuest_2.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_nucl_encuest_2.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_nucl_encuest_2.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_nucl_encuest_2.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}			
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				Encuestados2EIEL id = new Encuestados2EIEL();
				
				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setCodINEProvincia(rs.getString("codprov"));
				id.setCodINEMunicipio(rs.getString("codmunic"));
				id.setCodINEEntidad(rs.getString("codentidad"));
				id.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				/* Resto de Campos: String, Integer, Date */
				id.setDisponibilidadCaudal(rs.getString("aag_caudal"));
				id.setRestriccionesAgua(rs.getString("aag_restri"));
				id.setContadores(rs.getString("aag_contad"));
				id.setTasa(rs.getString("aag_tasa"));
				id.setAnnoInstalacion(rs.getString("aag_instal"));
				id.setHidrantes(rs.getString("aag_hidran"));
				id.setEstadoHidrantes(rs.getString("aag_est_hi"));
				id.setValvulas(rs.getString("aag_valvul"));
				id.setEstadoValvulas(rs.getString("aag_est_va"));
				id.setBocasRiego(rs.getString("aag_bocasr"));
				id.setEstadoBocasRiego(rs.getString("aag_est_bo"));
				id.setCisterna(rs.getString("cisterna"));
				id.setFechaRevision(rs.getDate("fecha_revision"));
				id.setObservaciones(rs.getString("observ"));
				id.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				id.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				lstDatos.add(id);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList obtenerListaNucleosAbandonados(String filtro,
			String idMunicipio, boolean version, Object element) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select eiel_t_nucleo_aband.revision_actual, eiel_t_nucleo_aband.revision_expirada,eiel_t_nucleo_aband.* ";
			if (version)
				sql+=", versionesalfa.revision, iuseruserhdr.name, versionesalfa.fecha, versionesalfa.tipocambio  ";												
			
			sql+=" from eiel_t_nucleo_aband ";
			
			if(version){
				sql+="left join versionesalfa on eiel_t_nucleo_aband.revision_actual = versionesalfa.revision  ";
				sql+="left join iuseruserhdr on iuseruserhdr.id = versionesalfa.id_autor  ";
			}
			sql+=" where codprov='"
					+ idMunicipio.substring(0, 2) + "' and codmunic='"
					+ idMunicipio.substring(2, 5)+ "'";
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " and " + filtro;
			}
			
			if (element!=null){
				NucleosAbandonadosEIEL obj = (NucleosAbandonadosEIEL)element;
				sql += " and eiel_t_nucleo_aband.codprov = '"+obj.getCodINEProvincia()+"'";
				sql += " and eiel_t_nucleo_aband.codmunic = '"+obj.getCodINEMunicipio()+"'";
				sql += " and eiel_t_nucleo_aband.codentidad = '"+obj.getCodINEEntidad()+"'";
				sql += " and eiel_t_nucleo_aband.codpoblamiento = '"+obj.getCodINEPoblamiento()+"'";
			}			
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				NucleosAbandonadosEIEL id = new NucleosAbandonadosEIEL();
				id.setRevisionActual(rs.getLong("revision_actual"));
				id.setRevisionExpirada(rs.getLong("revision_expirada"));
				if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_TEMPORAL);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_VALIDA)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_VALIDO);
				}
				else if (String.valueOf(id.getRevisionExpirada()).equals(ConstantesLocalGISEIEL.REVISION_BORRABLE)){
					id.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_BORRABLE);
				}
				
				id.setCodINEProvincia(rs.getString("codprov"));
				id.setCodINEMunicipio(rs.getString("codmunic"));
				id.setCodINEEntidad(rs.getString("codentidad"));
				id.setCodINEPoblamiento(rs.getString("codpoblamiento"));
				/* Resto de Campos: String, Integer, Date */
				id.setAnnoAbandono(rs.getString("a_abandono"));
				id.setCausaAbandono(rs.getString("causa_abandono"));
				id.setTitularidad(rs.getString("titular_abandono"));
				id.setRehabilitacion(rs.getString("rehabilitacion"));
				id.setAcceso(rs.getString("acceso"));
				id.setServicioAgua(rs.getString("serv_agua"));
				id.setServicioElectricidad(rs.getString("serv_elect"));
				id.setFechaRevision(rs.getDate("fecha_revision"));
				id.setObservaciones(rs.getString("observ"));
				id.setEstadoRevision(new Integer(rs.getInt("estado_revision")));
				id.setBloqueado(rs.getString("bloqueado"));
				//Si se hace una consulta de version, se obtienen los datos de la version
				if (version){
					versionEiel = new VersionEiel();
					versionEiel.setIdVersion(rs.getInt("revision"));
					versionEiel.setFecha(rs.getDate("fecha"));
					versionEiel.setUsuario(rs.getString("name"));
					versionEiel.setAccion(rs.getString("tipocambio"));
					
					id.setVersion(versionEiel);
				}
				lstDatos.add(id);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}
	
	public ArrayList obtenerListaPadron(String filtro,
			String idMunicipio, boolean version, Object element,String nombreTabla) throws Exception {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select * ";												
			
			sql+=" from "+nombreTabla;
						
			if (filtro != null && !filtro.equals("")) {
				sql = sql + " where " + filtro;
			}
								
			logger.info("Sentencia SQL Padron:"+sql);
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				/* Campos Clave */
				InfoPadronEIEL infoPadron = new InfoPadronEIEL();
				
				
				infoPadron.setC(rs.getString("C"));
				infoPadron.setP(rs.getString("P"));
				infoPadron.setES(rs.getString("ES"));
				infoPadron.setND(rs.getString("N/D"));
				infoPadron.setOficial(rs.getString("Oficial"));
				infoPadron.setTradicional(rs.getString("Tradicional"));
				infoPadron.setCategoria(rs.getString("Categoría"));
				infoPadron.setTotalPop(rs.getFloat("Total Pop"));
				infoPadron.setHombres(rs.getFloat("Hombres"));
				infoPadron.setMujeres(rs.getFloat("Mujeres"));
				infoPadron.setTotalViv(rs.getFloat("Total Viv"));
				infoPadron.setPrincipales(rs.getFloat("Principales"));
				infoPadron.setNoprincipales(rs.getFloat("No principales"));
				infoPadron.setComentario(rs.getString("Comentario"));
				infoPadron.setCON3(rs.getString("CON3"));
	
				lstDatos.add(infoPadron);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			throw ex;
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesAbastecimientoAutonomo(
			AbastecimientoAutonomoEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where "+eiel_c_nucleo_poblacion+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic="
					+ idMunicipio.substring(2, 5)
					+ " and "+eiel_c_nucleo_poblacion+".codentidad ='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINENucleo() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesDepuradoras1(Depuradora1EIEL object,
			String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_saneam_ed where eiel_c_saneam_ed.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_saneam_ed.codmunic='"
					+ object.getCodINEMunicipio()
					+ "' and eiel_c_saneam_ed.clave ='"
					+ object.getClave()
					+ "' and eiel_c_saneam_ed.orden_ed='"
					+ object.getCodOrden() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);

			}
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesCaptaciones(CaptacionesEIEL object,
			String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_abast_ca where eiel_c_abast_ca.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_abast_ca.codmunic='"
					+ object.getCodINEMunicipio()
					+ "' and eiel_c_abast_ca.clave ='"
					+ object.getClave()
					+ "' and eiel_c_abast_ca.orden_ca='"
					+ object.getCodOrden()
					+ "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);

			}
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesDepuradoras2(Depuradora2EIEL object,
			String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_saneam_ed where eiel_c_saneam_ed.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_saneam_ed.codmunic='"
					+ object.getCodINEMunicipio()
					+ "' and eiel_c_saneam_ed.clave ='"
					+ object.getClave()
					+ "' and eiel_c_saneam_ed.orden_ed='"
					+ object.getCodOrden() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);

			}
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesCasasConsistoriales(
			CasasConsistorialesEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_cc where eiel_c_cc.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_cc.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_cc.clave ='"
					+ object.getClave() + "' and eiel_c_cc.orden_cc='"
					+ object.getCodOrden() + "' and eiel_c_cc.codentidad='"
					+ object.getCodINEEntidad()
					+ "' and eiel_c_cc.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesCentrosCulturales(
			CentrosCulturalesEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_cu where eiel_c_cu.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_cu.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_cu.clave ='"
					+ object.getClave() + "' and eiel_c_cu.orden_cu='"
					+ object.getCodOrden() + "' and eiel_c_cu.codentidad='"
					+ object.getCodINEEntidad()
					+ "' and eiel_c_cu.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesCentrosEnsenianza(
			CentrosEnsenianzaEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_en where eiel_c_en.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_en.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_en.clave ='"
					+ object.getClave() + "' and eiel_c_en.orden_en='"
					+ object.getCodOrden() + "' and eiel_c_en.codentidad='"
					+ object.getCodINEEntidad()
					+ "' and eiel_c_en.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesInstalacionesDeportivas(
			InstalacionesDeportivasEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_id where eiel_c_id.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_id.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_id.clave ='"
					+ object.getClave() + "' and eiel_c_id.orden_id='"
					+ object.getOrdenIdDeportes()
					+ "' and eiel_c_id.codentidad='"
					+ object.getCodINEEntidad()
					+ "' and eiel_c_id.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesNucleosPoblacion(
			NucleosPoblacionEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where eiel_c_nucleo_poblacion.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and "+eiel_c_nucleo_poblacion+".codentidad='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesOtrosServMunicipales(
			OtrosServMunicipalesEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_municipios where eiel_c_municipios.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_municipios.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesPadronNucleos(PadronNucleosEIEL object,
			String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where eiel_c_nucleo_poblacion.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and "+eiel_c_nucleo_poblacion+".codentidad='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesPadronMunicipios(
			PadronMunicipiosEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_municipios where eiel_c_municipios.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_municipios.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesParquesJardines(
			ParquesJardinesEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_pj where eiel_c_pj.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_pj.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_pj.clave ='"
					+ object.getClave() + "' and eiel_c_pj.orden_pj='"
					+ object.getCodOrden() + "' and eiel_c_pj.codentidad='"
					+ object.getCodINEEntidad()
					+ "' and eiel_c_pj.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesPlaneamientoUrbano(
			PlaneamientoUrbanoEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_municipios where eiel_c_municipios.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_municipios.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesPoblamiento(PoblamientoEIEL object,
			String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where eiel_c_nucleo_poblacion.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and "+eiel_c_nucleo_poblacion+".codentidad='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesRecogidaBasuras(
			RecogidaBasurasEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where "+eiel_c_nucleo_poblacion+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and "+eiel_c_nucleo_poblacion+".codentidad='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesCentrosSanitarios(
			CentrosSanitariosEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_sa where eiel_c_sa.clave='"
					+ object.getClave() + "' and eiel_c_sa.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_sa.codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and eiel_c_sa.codentidad='"
					+ object.getCodINEEntidad()
					+ "' and eiel_c_sa.codpoblamiento='"
					+ object.getCodINEPoblamiento()
					+ "' and eiel_c_sa.orden_sa='" + object.getOrden() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesSaneamientoAutonomo(
			SaneamientoAutonomoEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where "+eiel_c_nucleo_poblacion+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and "+eiel_c_nucleo_poblacion+".codentidad='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesServiciosSaneamiento(
			ServiciosSaneamientoEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where "+eiel_c_nucleo_poblacion+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and "+eiel_c_nucleo_poblacion+".codentidad='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesServiciosRecogidaBasuras(
			ServiciosRecogidaBasuraEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where "+eiel_c_nucleo_poblacion+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and "+eiel_c_nucleo_poblacion+".codentidad='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesEdificiosSinUso(
			EdificiosSinUsoEIEL object, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_su where eiel_c_su.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_su.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_su.clave ='"
					+ object.getClave() + "' and eiel_c_su.orden_su='"
					+ object.getCodOrden() + "' and eiel_c_su.codentidad='"
					+ object.getCodINEEntidad()
					+ "' and eiel_c_su.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesTanatorios(TanatoriosEIEL object,
			String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_ta where eiel_c_ta.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_ta.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_ta.clave ='"
					+ object.getClave() + "' and eiel_c_ta.orden_ta='"
					+ object.getCodOrden() + "' and eiel_c_ta.codentidad='"
					+ object.getCodINEEntidad()
					+ "' and eiel_c_ta.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesVertederos(VertederosEIEL object,
			String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_vt where eiel_c_vt.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_vt.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_vt.clave ='"
					+ object.getClave() + "' and eiel_c_vt.orden_vt='"
					+ object.getCodOrden() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesCarreteras(TramosCarreterasEIEL object,
			String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id,revision_expirada from eiel_c_tramos_carreteras where eiel_c_tramos_carreteras.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_tramos_carreteras.codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and eiel_c_tramos_carreteras.cod_carrt='"
					+ object.getCodCarretera() + "'";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}

	private Collection obtenerFeaturesDepositos(DepositosEIEL object,
			String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_abast_de where eiel_c_abast_de.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_abast_de.codmunic='"
					+ object.getCodINEMunicipio()
					+ "' and eiel_c_abast_de.clave ='"
					+ object.getClave()
					+ "' and eiel_c_abast_de.orden_de='"
					+ object.getOrdenDeposito() + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesPuntosVertido(PuntosVertidoEIEL object,
			String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_saneam_pv where eiel_c_saneam_pv.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_saneam_pv.codmunic='"
					+ object.getCodINEMunicipio()
					+ "' and eiel_c_saneam_pv.clave ='"
					+ object.getClave()
					+ "' and eiel_c_saneam_pv.orden_pv='"
					+ object.getOrden()
					+ "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesServiciosAbastecimientos(
			ServiciosAbastecimientosEIEL object, String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where "+eiel_c_nucleo_poblacion+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and "+eiel_c_nucleo_poblacion+".codentidad ='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesCentrosAsistenciales(
			CentrosAsistencialesEIEL object, String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_as where eiel_c_as.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_as.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_as.clave ='"
					+ object.getClave() + "' and eiel_c_as.codentidad ='"
					+ object.getCodINEEntidad() + "' and eiel_c_as.orden_as ='"
					+ object.getOrdenAsistencial()
					+ "' and eiel_c_as.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesCabildoConsejo(CabildoConsejoEIEL object,
			String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_provincia where eiel_c_provincia.codprov='"
					+ idMunicipio.substring(0, 2) + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesCementerios(CementeriosEIEL object,
			String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_ce where eiel_c_ce.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_ce.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_ce.clave ='"
					+ object.getClave() + "' and eiel_c_ce.codentidad ='"
					+ object.getCodINEEntidad() + "' and eiel_c_ce.orden_ce ='"
					+ object.getOrden() + "' and eiel_c_ce.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesEntidadesSingulares(
			EntidadesSingularesEIEL object, String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_municipios where eiel_c_municipios.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_municipios.codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesInfoTerminosMunicipales(
			NucleoEncuestado7EIEL object, String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where "+eiel_c_nucleo_poblacion+".codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and "+eiel_c_nucleo_poblacion+".codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "' and "+eiel_c_nucleo_poblacion+".codentidad ='"
					+ object.getCodINEEntidad()
					+ "' and "+eiel_c_nucleo_poblacion+".codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesIncendiosProteccion(
			IncendiosProteccionEIEL object, String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_ip where eiel_c_ip.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_ip.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_ip.clave ='"
					+ object.getClave() + "' and eiel_c_ip.codentidad ='"
					+ object.getCodINEEntidad() + "' and eiel_c_ip.orden_ip ='"
					+ object.getOrden() + "' and eiel_c_ip.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesLonjasMercados(LonjasMercadosEIEL object,
			String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_lm where eiel_c_lm.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_lm.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_lm.clave ='"
					+ object.getClave() + "' and eiel_c_lm.codentidad ='"
					+ object.getCodINEEntidad() + "' and eiel_c_lm.orden_lm ='"
					+ object.getOrden() + "' and eiel_c_lm.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesMataderos(MataderosEIEL object,
			String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_mt where eiel_c_mt.codprov='"
					+ idMunicipio.substring(0, 2)
					+ "' and eiel_c_mt.codmunic='"
					+ idMunicipio.substring(2, 5) + "' and eiel_c_mt.clave ='"
					+ object.getClave() + "' and eiel_c_mt.codentidad ='"
					+ object.getCodINEEntidad() + "' and eiel_c_mt.orden_mt ='"
					+ object.getOrden() + "' and eiel_c_mt.codpoblamiento='"
					+ object.getCodINEPoblamiento() + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesTratamientosPotabilizacion(
			TratamientosPotabilizacionEIEL object, String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_abast_tp where codprov='"
					+ idMunicipio.substring(0, 2) + "'" + " and codmunic='"
					+ idMunicipio.substring(2, 5) + "'" + " and clave ='"
					+ object.getClave() + "'" + " and orden_tp ='"
					+ object.getOrdenPotabilizadora() + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesDiseminados(DiseminadosEIEL object,
			String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_municipios where codprov='"
					+ idMunicipio.substring(0, 2) + "'" + " and codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesEncuestados1(Encuestados1EIEL object,
			String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where codprov='"
					+ idMunicipio.substring(0, 2)
					+ "'"
					+ " and codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "'"
					+ " and codentidad ='"
					+ object.getCodINEEntidad()
					+ "'"
					+ " and codpoblamiento ='"
					+ object.getCodINEPoblamiento()
					+ "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesEncuestados2(Encuestados2EIEL object,
			String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from "+eiel_c_nucleo_poblacion+" where codprov='"
					+ idMunicipio.substring(0, 2)
					+ "'"
					+ " and codmunic='"
					+ idMunicipio.substring(2, 5)
					+ "'"
					+ " and codentidad ='"
					+ object.getCodINEEntidad()
					+ "'"
					+ " and codpoblamiento ='"
					+ object.getCodINEPoblamiento()
					+ "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	private Collection obtenerFeaturesNucleosAbandonados(
			NucleosAbandonadosEIEL object, String idMunicipio) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Collection lstDatos = new ArrayList();
		try {
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			String sql = "select id,revision_expirada from eiel_c_municipios where codprov='"
					+ idMunicipio.substring(0, 2) + "'" + " and codmunic='"
					+ idMunicipio.substring(2, 5) + "'";
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				long revision_expirada=0;				
				try {revision_expirada=rs.getLong("revision_expirada");	} catch (Exception e) {	}
				FeatureEIELSimple feature=new FeatureEIELSimple(id,String.valueOf(revision_expirada));
				lstDatos.add(feature);;
			}
		} catch (Exception ex) {
			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return lstDatos;
	}

	public ArrayList<MapaEIEL> getMapas(String patronNombreMapa, String locale,String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList listaMapas = new ArrayList();

		try {

			//logger.debug("Inicio.");

			// ****************************************
			// ** Obtener una conexion de la base de datos
			// ****************************************************
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				logger.warn("Cannot get connection");
				return null;
			}
			String sql="select distinct(m.id_map),traduccion from maps m, dictionary d where m.id_name=d.id_vocablo and locale='"+locale+"' and " +
					"d.traduccion like '%"+patronNombreMapa+"%' and (id_entidad=0 or id_entidad IN (select id_entidad from entidades_municipios where id_municipio="+idMunicipio+"))";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				MapaEIEL mapa=new MapaEIEL();
				mapa.setIdMapa(rs.getInt("id_map"));
				mapa.setNombreMapa(rs.getString("traduccion"));
				
				listaMapas.add(mapa);
			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			logger.error("Exception: " + sw.toString());
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return listaMapas;
	}
	
	public Integer getIdMapa(String nombreMapa, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Integer idMapa = null;

		try {

			//logger.debug("Inicio.");

			// ****************************************
			// ** Obtener una conexion de la base de datos
			// ****************************************************
			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				logger.warn("Cannot get connection");
				return null;
			}
			String sql="select distinct(m.id_map) from maps m, dictionary d where m.id_name=d.id_vocablo and " +
					"d.traduccion='"+nombreMapa+"' and (id_entidad=0 or id_entidad IN (select id_entidad from entidades_municipios where id_municipio="+idMunicipio+"))";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				idMapa = new Integer(rs.getInt("id_map"));

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			logger.error("Exception: " + sw.toString());
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return idMapa;
	}

	public String getNombreMapa(Integer idMapa, String idEntidad) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		String nombreMapa = null;

		try {

			if (idMapa != null) {
				logger.debug("Inicio.");

				// ****************************************
				// ** Obtener una conexion de la base de datos
				// ****************************************************
				connection = CPoolDatabase.getConnection();
				if (connection == null) {
					logger.warn("Cannot get connection");
					return null;
				}

				statement = connection
						.prepareStatement("select d.traduccion as traduccion "
								+ "from maps m, dictionary d "
								+ "where m.id_name=d.id_vocablo and id_map="
								+ idMapa.intValue()
								+ " and (id_entidad = 0  or id_entidad="
								+ idEntidad + ")");
				rs = statement.executeQuery();

				while (rs.next()) {

					nombreMapa = rs.getString("traduccion");

				}
			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			logger.error("Exception: " + sw.toString());
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return nombreMapa;
	}

	public ArrayList obtenerListaDominios(Connection connection,
			String domainName, String idMunicipio, int tipo,String locale)
			throws SQLException {
		ArrayList listaDominios = new ArrayList();

		//ESTE METODO TARDA MUCHO
		DomainNode dominio = obtenerDominioPadre(connection, domainName,
				idMunicipio, tipo,locale);

		if (dominio != null && dominio.getIdNode() != null) {
			listaDominios.add(dominio);
		}

		return listaDominios;
	}

	public DomainNode obtenerDominioPadre(Connection connection,
			String dominio, String idMunicipio, int tipo,String locale) throws SQLException {

		DomainNode oldDomainNode = null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;

		try {

			String sentenciaSQL = "select id_node, id_vocablo, parentdomain, id_domain,"
					+ " pattern, locale, traduccion from v_domain where "
					+ "upper(nombre)=upper(?) and tipo = ? and "
					+ "id_domain_node=id_domain and id_description = id_vocablo "
					+ "and id_municipio is null";
			
			if (locale!=null)
				sentenciaSQL+=" and locale='"+locale+"'";

			preparedStatement = connection.prepareStatement(sentenciaSQL);

			preparedStatement.setString(1, dominio);
			preparedStatement.setInt(2, tipo);
			rs = preparedStatement.executeQuery();

			boolean hayDatos = true;
			if (!rs.next()) {
				sentenciaSQL = "select id_node, id_vocablo, parentdomain, id_domain,"
						+ " pattern, locale, traduccion from v_domain where "
						+ "upper(nombre)=upper(?) and tipo = ? and "
						+ "id_domain_node=id_domain and id_description = id_vocablo "
						+ "and id_municipio = ?";
				if (locale!=null)
					sentenciaSQL+=" and locale='"+locale+"'";


				preparedStatement = connection.prepareStatement(sentenciaSQL);
				preparedStatement.setString(1, dominio);
				preparedStatement.setInt(2, 2);
				preparedStatement.setString(3, null);
				rs = preparedStatement.executeQuery();

				if (!rs.next()) {
					hayDatos = false;
				}
			}
			if (hayDatos) {
				do {
					//logger.debug("Recuperando Dominio Padre:"+rs.getString("traduccion"));
					String newIdDomainNode = rs.getString("id_node");
					if ((oldDomainNode == null)
							|| (!oldDomainNode.getIdNode().equals(
									newIdDomainNode))) {
						oldDomainNode = new DomainNode(rs.getString("id_node"),
								rs.getString("id_vocablo"), 2,
								rs.getString("parentdomain"), idMunicipio,
								rs.getString("id_domain"),
								rs.getString("pattern"));
						if (rs.getString("id_vocablo") != null)
							oldDomainNode.addTerm(rs.getString("locale"),
									rs.getString("traduccion"));

						oldDomainNode = obtenerDominiosHijo(connection,
								oldDomainNode, idMunicipio,locale);
					} else {
						oldDomainNode.addTerm(rs.getString("locale"),
								rs.getString("traduccion"));
					}
				} while (rs.next());
			}

		} finally {

			safeClose(rs, preparedStatement, connection);
		}

		return oldDomainNode;
	}

	public void returnBloquearElemento(ObjectOutputStream oos, Object object,
			boolean bloqueado, String tipoElemento, Sesion userSesion)
			throws Exception {
		try {
			Object elemento = null;

			
			if (object instanceof WorkflowEIEL){
				elemento = bloquearElemento((WorkflowEIEL) object,bloqueado,userSesion);
			}
			else{
				logger.error("OBJETO NO ENCONTRADO 1");
			}
			
			oos.writeObject(elemento);

		} catch (Exception e) {
			oos.writeObject(new ACException(e));
			throw e;
		}
	}

	public void returnBloqueado(ObjectOutputStream oos, Object object,
			String tipoElemento) throws Exception {
		try {
			String bloqueado = null;

			if (object instanceof WorkflowEIEL){
				bloqueado = bloqueadoElemento((WorkflowEIEL) object);
			}
			else{
				logger.error("OBJETO NO ENCONTRADO 2");
			}
			
			oos.writeObject(bloqueado);

		} catch (Exception e) {
			oos.writeObject(new ACException(e));
			throw e;
		}
	}
	
	
	public void returnPublicarElemento(ObjectOutputStream oos, Object object,
			String tipoElemento, Sesion userSesion)
			throws Exception {
		try {
			Object elemento = null;
			
			elemento = publicarElemento((WorkflowEIEL) object,userSesion);
			
			oos.writeObject(elemento);

		} catch (Exception e) {
			oos.writeObject(new ACException(e));
			throw e;
		}
	}
	
	/**
	 * Publicacion del elemento
	 * @param object
	 * @param userSesion
	 * @return
	 * @throws Exception
	 */
	private Object publicarElemento(WorkflowEIEL object,Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String tabla=object.getNombreTablaAlfanumerica();
		String tablaUsos=object.getNombreTablaAlfanumericaUsos();
		
		String sqlBusqueda=object.getFilterSQL();
		String sSQL = "update "+tabla+" set revision_expirada="+
					ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" where "+sqlBusqueda+" and revision_expirada="+ConstantesLocalGISEIEL.REVISION_TEMPORAL;

		String sSQL2=null;
		if (tablaUsos!=null){
			String sqlBusquedaUsos=sqlBusqueda.replaceAll(tabla, tablaUsos);
			sSQL2 = "update "+tablaUsos+" set revision_expirada="+
				ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" where "+sqlBusquedaUsos+" and revision_expirada="+ConstantesLocalGISEIEL.REVISION_TEMPORAL;
		}
		
		PreparedStatement ps = null;
		PreparedStatement ps2 = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);			
			ps.execute();
			
			if (sSQL2!=null){
				ps2 = conn.prepareStatement(sSQL2);			
				ps2.execute();
			}
			
			conn.commit();			
		} catch (Exception e) {
			throw e;
		}
		finally{
			safeClose(null, ps, conn);
			safeClose(null, ps2, null);
		}
		return object;
	}
	
	public void returnValidarElemento(ObjectOutputStream oos, Object object,
			String tipoElemento, Sesion userSesion)
			throws Exception {
		try {
			//PUBLICACIóN MOVILIDAD
			if  (object instanceof WorkflowEIEL){
	    		WorkflowEIEL selectedElement=(WorkflowEIEL)object;
	    		if (selectedElement.isEstadoAutoPublicable()){
	    			selectedElement.setEstadoValidacionAnterior(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD);
		    		selectedElement.setEstadoValidacion(ConstantesLocalGISEIEL.ESTADO_PUBLICABLE);		    		
		    	}		    	
	    	}
			
			insertarElemento(object, null, tipoElemento, userSesion);
			
			oos.writeObject(object);

		} catch (Exception e) {
			oos.writeObject(new ACException(e));
			throw e;
		}
	}
	
	public void insertarElemento(ObjectOutputStream oos, Object object,
			String idLayer, String tipoElemento, Sesion userSesion)
			throws Exception {
		try {

			insertarElemento(object, idLayer, tipoElemento, userSesion);

		} catch (Exception e) {
			oos.writeObject(new ACException(e));
			throw e;
		}
	}

	private void insertarElemento(Object object, String idLayer,
			String tipoElemento, Sesion userSesion) throws Exception {

		if (idLayer!=null)
			checkPermissionLayer(idLayer, userSesion);

		if (tipoElemento.equals(ConstantesLocalGISEIEL.ABASTECIMIENTO_AUTONOMO)) {
			insertarAbastecimientoAutonomo((AbastecimientoAutonomoEIEL) object, userSesion);
		//MARKED
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CAPTACIONES)) {
			insertarCaptacion((CaptacionesEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPURADORAS1)) {
			insertarDepuradora1((Depuradora1EIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPURADORAS2)) {
			insertarDepuradora2((Depuradora2EIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CASAS_CONSISTORIALES)) {
			insertarCasaConsistorial((CasasConsistorialesEIEL) object, userSesion);
//			insertarUsosCasaConsistorial((CasasConsistorialesEIEL) object, userSesion);
		}
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.CENTROS_ASISTENCIALES)) {
			insertarCentrosAsistenciales((CentrosAsistencialesEIEL) object, userSesion);
		}
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.CENTROS_CULTURALES)) {
			insertarCentroCultural((CentrosCulturalesEIEL) object, userSesion);
//			insertarUsosCentroCultural((CentrosCulturalesEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CENTROS_ENSENIANZA)) {
			insertarCentroEnsenianza((CentrosEnsenianzaEIEL) object, userSesion);
//			insertarNivelesCentroEnsenianza((CentrosEnsenianzaEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.INSTALACIONES_DEPORTIVAS)) {
			insertarInstalacionDeportiva((InstalacionesDeportivasEIEL) object, userSesion);
//			insertarDeportesInstalacionDeportiva((InstalacionesDeportivasEIEL) object, userSesion);
		} /*else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.NUCLEOS_POBLACION)) {
			insertarNucleosPoblacion((NucleosPoblacionEIEL) object, userSesion);
		}*/ else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.OTROS_SERVICIOS_MUNICIPALES)) {
			insertarOtrosServMunicipales((OtrosServMunicipalesEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PADRON_NUCLEOS)) {
			insertarPadronNucleos((PadronNucleosEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.PADRON_MUNICIPIOS)) {
			insertarPadronMunicipios((PadronMunicipiosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PARQUES_JARDINES)) {
			insertarParquesJardines((ParquesJardinesEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.PLANEAMIENTO_URBANO)) {
			insertarPlaneamientoUrbano((PlaneamientoUrbanoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.POBLAMIENTO)) {
			insertarPoblamiento((PoblamientoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.RECOGIDA_BASURAS)) {
			insertarRecogidaBasuras((RecogidaBasurasEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.CENTROS_SANITARIOS)) {
			insertarCentrosSanitarios((CentrosSanitariosEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.SANEAMIENTO_AUTONOMO)) {
			insertarSaneamientoAutonomo((SaneamientoAutonomoEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.DATOS_SERVICIOS_SANEAMIENTO)) {
			insertarServiciosSaneamiento((ServiciosSaneamientoEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.SERVICIOS_RECOGIDA_BASURA)) {
			insertarServiciosRecogidaBasuras((ServiciosRecogidaBasuraEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.EDIFICIOS_SIN_USO)) {
			insertarEdificiosSinUso((EdificiosSinUsoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.TANATORIOS)) {
			insertarTanatorios((TanatoriosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DATOS_VERTEDEROS)) {
			insertarVertederos((VertederosEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TRAMOS_CARRETERAS)) {
			insertarTramosCarreteras((TramosCarreterasEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPOSITOS)) {
			insertarDepositos((DepositosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PUNTOS_VERTIDO)) {
			insertarPuntosVertido((PuntosVertidoEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.DATOS_SERVICIOS_ABASTECIMIENTOS)) {
			insertarServiciosAbastecimientos((ServiciosAbastecimientosEIEL) object, userSesion);
		}  else if (tipoElemento.equals(ConstantesLocalGISEIEL.CABILDO)) {
			insertarCabildoConsejo((CabildoConsejoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CEMENTERIOS)) {
			insertarCementerios((CementeriosEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.ENTIDADES_SINGULARES)) {
			insertarEntidadesSingulares((EntidadesSingularesEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.C_NUCLEOS_POBLACION)) {
			insertarNucleosPoblacion((NucleosPoblacionEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.NUCLEO_ENCT_7)) {
			insertarInfoTerminosMunicipales((NucleoEncuestado7EIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.INCENDIOS_PROTECCION)) {
			insertarIncendiosProteccion((IncendiosProteccionEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.LONJAS_MERCADOS)) {
			insertarLonjasMercados((LonjasMercadosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.MATADEROS)) {
			insertarMataderos((MataderosEIEL) object, userSesion);
		} else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TRATAMIENTOS_POTABILIZACION)) {
			insertarTratamientosPotabilizacion((TratamientosPotabilizacionEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DISEMINADOS)) {
			insertarDiseminados((DiseminadosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.ENCUESTADOS1)) {
			insertarEncuestados1((Encuestados1EIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.ENCUESTADOS2)) {
			insertarEncuestados2((Encuestados2EIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.NUCLEOS_ABANDONADOS)) {
			insertarNucleosAbandonados((NucleosAbandonadosEIEL) object, userSesion);
		}
		else if(tipoElemento.equals(ConstantesLocalGISEIEL.AGRUPACIONES6000)){
			insertarEntidadesAgrupadas((EntidadesAgrupadasEIEL)object, userSesion);
		}
		//Prueba de concepto Elementos sin informacion alfanumerica.
		//ALFANUMERICOS
		//- EMISARIOS
		else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.EMISARIOS)) {
			insertarEmisario((EmisariosEIEL) object, userSesion);
		}
		else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TCONDUCCION)) {
			insertarTramoConduccion((TramosConduccionEIEL) object, userSesion);
		}
		else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.TCOLECTOR)) {
			insertarColector((ColectorEIEL) object, userSesion);
		}
//		else if (tipoElemento.equals(ConstantesLocalGISEIEL.AGRUPACIONES6000)) {
//				insertarAgrupacion6000((Agrupaciones6000EIEL) object, userSesion);
	}


	public void eliminarElemento(ObjectOutputStream oos, Object object,
			Collection lstFeatures, String idLayer, String tipoElemento,
			Sesion userSesion) throws Exception {
		try {

			Object elemento = eliminarElemento(object, lstFeatures, idLayer,
					tipoElemento, userSesion);
			oos.writeObject(elemento);

		} catch (Exception e) {
			oos.writeObject(new ACException(e));
			throw e;
		}
	}

	private String eliminarElemento(Object object, Collection lstFeatures,
			String idLayer, String tipoElemento, Sesion userSesion)
			throws Exception {

		String bloqueado = null;
		if (idLayer!=null){
			Iterator iterFeatures = lstFeatures.iterator();
			while (iterFeatures.hasNext()) {
	
				Integer idFeature = new Integer(iterFeatures.next().toString());
				checkPermissionLock(idLayer, idFeature, userSesion);
			}
		}
		
		if (object instanceof WorkflowEIEL){
			bloqueado = bloqueadoElemento((WorkflowEIEL) object);
		}
		else{
			logger.error("OBJETO NO ENCONTRADO 3");
		}	
		
		if (bloqueado == null || bloqueado.equals("")
				|| bloqueado.equals(userSesion.getUserPrincipal().getName())) {
			eliminar(object, tipoElemento, userSesion);
		} else {
			throw new LockException("locked");
		}

		return bloqueado;
	}

	private void eliminar(Object object, String tipoElemento, Sesion userSesion) throws Exception {

		if (object instanceof WorkflowEIEL){
			String revisionExpirada = String.valueOf(((WorkflowEIEL)object).getRevisionExpirada());
			
			if (((WorkflowEIEL)object).isEstadoTemporal() && revisionExpirada == ConstantesLocalGISEIEL.REVISION_TEMPORAL){			
				eliminarVersionAnterior(null,null,(WorkflowEIEL)object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);
				return;
			}
			if (((WorkflowEIEL)object).isEstadoPublicable() && revisionExpirada == ConstantesLocalGISEIEL.REVISION_PUBLICABLE){			
				eliminarVersionAnterior(null,null,(WorkflowEIEL)object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);
				return;
			}
			if (((WorkflowEIEL)object).isEstadoAutoPublicable() && revisionExpirada == ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD){			
				eliminarVersionAnterior(null,null,(WorkflowEIEL)object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);
				return;
			}
		}
		
		
		if (tipoElemento.equals(ConstantesLocalGISEIEL.ABASTECIMIENTO_AUTONOMO)) {
			eliminarAbastecimientoAutonomo((AbastecimientoAutonomoEIEL) object, userSesion);
		//MARKED
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CAPTACIONES)) {
			eliminarCaptacion((CaptacionesEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPURADORAS1)) {
			eliminarDepuradora1((Depuradora1EIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPURADORAS2)) {
			eliminarDepuradora2((Depuradora2EIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CASAS_CONSISTORIALES)) {
			eliminarCasaConsistorial((CasasConsistorialesEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CENTROS_CULTURALES)) {
			eliminarCentroCultural((CentrosCulturalesEIEL) object, userSesion);
		} 
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.CENTROS_ENSENIANZA)) {
			eliminarCentroEnsenianza((CentrosEnsenianzaEIEL) object, userSesion);
		}else if (tipoElemento.equals(ConstantesLocalGISEIEL.INSTALACIONES_DEPORTIVAS)) {
			eliminarInstalacionDeportiva((InstalacionesDeportivasEIEL) object, userSesion);
		} 
		
		/*else if (tipoElemento
				.equals(ConstantesLocalGISEIEL.NUCLEOS_POBLACION)) {
			eliminarNucleosPoblacion((NucleosPoblacionEIEL) object, userSesion);
		}*/ else if (tipoElemento.equals(ConstantesLocalGISEIEL.OTROS_SERVICIOS_MUNICIPALES)) {
			eliminarOtrosServMunicipales((OtrosServMunicipalesEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PADRON_NUCLEOS)) {
			eliminarPadronNucleos((PadronNucleosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PADRON_MUNICIPIOS)) {
			eliminarPadronMunicipios((PadronMunicipiosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PARQUES_JARDINES)) {
			eliminarParquesJardines((ParquesJardinesEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PLANEAMIENTO_URBANO)) {
			eliminarPlaneamientoUrbano((PlaneamientoUrbanoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.POBLAMIENTO)) {
			eliminarPoblamiento((PoblamientoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.RECOGIDA_BASURAS)) {
			eliminarRecogidaBasuras((RecogidaBasurasEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CENTROS_SANITARIOS)) {
			eliminarCentrosSanitarios((CentrosSanitariosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.SANEAMIENTO_AUTONOMO)) {
			eliminarSaneamientoAutonomo((SaneamientoAutonomoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DATOS_SERVICIOS_SANEAMIENTO)) {
			eliminarServiciosSaneamiento((ServiciosSaneamientoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.SERVICIOS_RECOGIDA_BASURA)) {
			eliminarServiciosRecogidaBasuras((ServiciosRecogidaBasuraEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.EDIFICIOS_SIN_USO)) {
			eliminarEdificiosSinUso((EdificiosSinUsoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.TANATORIOS)) {
			eliminarTanatorios((TanatoriosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DATOS_VERTEDEROS)) {
			eliminarVertederos((VertederosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.TRAMOS_CARRETERAS)) {
			eliminarCarreteras((TramosCarreterasEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DEPOSITOS)) {
			eliminarDepositos((DepositosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.PUNTOS_VERTIDO)) {
			eliminarPuntosVertido((PuntosVertidoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DATOS_SERVICIOS_ABASTECIMIENTOS)) {
			eliminarServiciosAbastecimientos((ServiciosAbastecimientosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CENTROS_ASISTENCIALES)) {
			eliminarCentrosAsistenciales((CentrosAsistencialesEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CABILDO)) {
			eliminarCabildoConsejo((CabildoConsejoEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.CEMENTERIOS)) {
			eliminarCementerios((CementeriosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.ENTIDADES_SINGULARES)) {
			eliminarEntidadesSingulares((EntidadesSingularesEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.C_NUCLEOS_POBLACION)) {
			eliminarNucleosPoblacion((NucleosPoblacionEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.NUCLEO_ENCT_7)) {
			eliminarInfoTerminosMunicipales((NucleoEncuestado7EIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.INCENDIOS_PROTECCION)) {
			eliminarIncendiosProteccion((IncendiosProteccionEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.LONJAS_MERCADOS)) {
			eliminarLonjasMercados((LonjasMercadosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.MATADEROS)) {
			eliminarMataderos((MataderosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.TRATAMIENTOS_POTABILIZACION)) {
			eliminarTratamientosPotabilizacion((TratamientosPotabilizacionEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.DISEMINADOS)) {
			eliminarDiseminados((DiseminadosEIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.ENCUESTADOS1)) {
			eliminarEncuestados1((Encuestados1EIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.ENCUESTADOS2)) {
			eliminarEncuestados2((Encuestados2EIEL) object, userSesion);
		} else if (tipoElemento.equals(ConstantesLocalGISEIEL.NUCLEOS_ABANDONADOS)) {
			eliminarNucleosAbandonados((NucleosAbandonadosEIEL) object, userSesion);
		}
		//Prueba de concepto Elementos sin informacion alfanumerica.
		//ALFANUMERICOS
		//- EMISARIOS
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.EMISARIOS)) {
			eliminarEmisario((EmisariosEIEL) object, userSesion);
		}
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.TCONDUCCION)) {
			eliminarTramoConduccion((TramosConduccionEIEL) object, userSesion);
		}
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.TCOLECTOR)) {
			eliminarColector((ColectorEIEL) object, userSesion);
				
		} 
		else if (tipoElemento.equals(ConstantesLocalGISEIEL.AGRUPACIONES6000)) {
			eliminarEntidadesAgrupadas((EntidadesAgrupadasEIEL) object, userSesion);
		}
	}
	
	

//	private void eliminarAbastecimientoAutonomo(
//			AbastecimientoAutonomoEIEL object) throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_abast_au where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.setString(5, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarCaptacion(CaptacionesEIEL object) throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_abast_ca where clave=? and codprov=? and codmunic=? and orden_ca=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarDepuradora1(Depuradora1EIEL object) throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t1_saneam_ed where clave=? and codprov=? and codmunic=? and orden_ed=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarDepuradora2(Depuradora2EIEL object) throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t2_saneam_ed where clave=? and codprov=? and codmunic=? and orden_ed=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarCasaConsistorial(CasasConsistorialesEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_cc where clave=? and codprov=? and codmunic=? and orden_cc=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.setString(5, object.getCodINEEntidad());
//			ps.setString(6, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarCentroCultural(CentrosCulturalesEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_cu where clave=? and codprov=? and codmunic=? and orden_cu=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.setString(5, object.getCodINEEntidad());
//			ps.setString(6, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//	
//
//	private void eliminarCentroEnsenianza(CentrosEnsenianzaEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_en where clave=? and codprov=? and codmunic=? and orden_en=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.setString(5, object.getCodINEEntidad());
//			ps.setString(6, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarInstalacionDeportiva(InstalacionesDeportivasEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_id where clave=? and codprov=? and codmunic=? and orden_id=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getOrdenIdDeportes());
//			ps.setString(5, object.getCodINEEntidad());
//			ps.setString(6, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarNucleosPoblacion(NucleosPoblacionEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_nucleos_poblacion where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.setString(3, object.getCodINEEntidad());
//			ps.setString(4, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarOtrosServMunicipales(OtrosServMunicipalesEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_otros_serv_munic where codprov=? and codmunic=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarPadronNucleos(PadronNucleosEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_padron_nd where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.setString(3, object.getCodINEEntidad());
//			ps.setString(4, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarPadronMunicipios(PadronMunicipiosEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_padron_ttmm where codprov=? and codmunic=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarParquesJardines(ParquesJardinesEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_pj where clave=? and codprov=? and codmunic=? and orden_pj=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.setString(5, object.getCodINEEntidad());
//			ps.setString(6, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarPlaneamientoUrbano(PlaneamientoUrbanoEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_planeam_urban where codprov=? and codmunic=? and tipo_urba=? and denominacion=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.setString(3, object.getTipo());
//			ps.setString(4, object.getDenominacion());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarPoblamiento(PoblamientoEIEL object) throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_poblamiento where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.setString(3, object.getCodINEEntidad());
//			ps.setString(4, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarRecogidaBasuras(RecogidaBasurasEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_rb where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and tipo=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.setString(5, object.getCodINEPoblamiento());
//			ps.setString(6, object.getTipo());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarCentrosSanitarios(CentrosSanitariosEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_sa where clave=? and codprov=? and codmunic=? and orden_sa=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getOrden());
//			ps.setString(5, object.getCodINEEntidad());
//			ps.setString(6, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarSaneamientoAutonomo(SaneamientoAutonomoEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_saneam_au where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.setString(5, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarServiciosSaneamiento(ServiciosSaneamientoEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_saneam_serv where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.setString(3, object.getCodINEEntidad());
//			ps.setString(4, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarServiciosRecogidaBasuras(
//			ServiciosRecogidaBasuraEIEL object) throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_srb where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.setString(3, object.getCodINEEntidad());
//			ps.setString(4, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarEdificiosSinUso(EdificiosSinUsoEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_su where clave=? and codprov=? and codmunic=? and orden_su=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.setString(5, object.getCodINEEntidad());
//			ps.setString(6, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarTanatorios(TanatoriosEIEL object) throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_ta where clave=? and codprov=? and codmunic=? and orden_ta=? and codentidad=? and codpoblamiento=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.setString(5, object.getCodINEEntidad());
//			ps.setString(6, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarVertederos(VertederosEIEL object) throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_vt where clave=? and codprov=? and codmunic=? and orden_vt=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodOrden());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarCarreteras(TramosCarreterasEIEL object)
//			throws Exception {
//
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//		String sSQL = "delete from eiel_t_carreteras where codprov=? and cod_carrt=?";
//
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodCarretera());
//			ps.execute();
//			ps.close();
//
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarDepositos(DepositosEIEL object) throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_abast_de where clave=? and codprov=? and codmunic=? and orden_de=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getOrdenDeposito());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarPuntosVertido(PuntosVertidoEIEL object)
//			throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_saneam_pv where clave=? and codprov=? and codmunic=? and orden_pv=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getOrden());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarServiciosAbastecimientos(
//			ServiciosAbastecimientosEIEL object) throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_abast_serv where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.setString(3, object.getCodINEEntidad());
//			ps.setString(4, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarCentrosAsistenciales(CentrosAsistencialesEIEL object)
//			throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_as where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_as=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.setString(5, object.getCodINEPoblamiento());
//			ps.setString(6, object.getOrdenAsistencial());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarCabildoConsejo(CabildoConsejoEIEL object)
//			throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_cabildo_consejo where codprov=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarCementerios(CementeriosEIEL object) throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_ce where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ce=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.setString(5, object.getCodINEPoblamiento());
//			ps.setString(6, object.getOrden());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarEntidadesSingulares(EntidadesSingularesEIEL object)
//			throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_entidad_singular where codprov=? and codmunic=? and codentidad=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.setString(3, object.getCodINEEntidad());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarInfoTerminosMunicipales(NucleoEncuestado7EIEL object)
//			throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_inf_ttmm where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.setString(3, object.getCodINEEntidad());
//			ps.setString(4, object.getCodINEPoblamiento());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarIncendiosProteccion(IncendiosProteccionEIEL object)
//			throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_ip where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ip=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.setString(5, object.getCodINEPoblamiento());
//			ps.setString(6, object.getOrden());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarLonjasMercados(LonjasMercadosEIEL object)
//			throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_lm where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_lm=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.setString(5, object.getCodINEPoblamiento());
//			ps.setString(6, object.getOrden());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarMataderos(MataderosEIEL object) throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_mt where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_mt=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.setString(5, object.getCodINEPoblamiento());
//			ps.setString(6, object.getOrden());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarTratamientosPotabilizacion(
//			TratamientosPotabilizacionEIEL object) throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_abast_tp where clave=? and codprov=? and codmunic=? and orden_tp=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getClave());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getOrdenPotabilizadora());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarDiseminados(DiseminadosEIEL object) throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_mun_diseminados where codprov=? and codmunic=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEProvincia());
//			ps.setString(2, object.getCodINEMunicipio());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarEncuestados1(Encuestados1EIEL object) throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_nucl_encuest_1 where codpoblamiento=? and codprov=? and codmunic=? and codentidad=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEPoblamiento());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarEncuestados2(Encuestados2EIEL object) throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_nucl_encuest_2 where codpoblamiento=? and codprov=? and codmunic=? and codentidad=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEPoblamiento());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}
//
//	private void eliminarNucleosAbandonados(NucleosAbandonadosEIEL object)
//			throws Exception {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String sSQL = "delete from eiel_t_nucleo_aband where codpoblamiento=? and codprov=? and codmunic=? and codentidad=?";
//		try {
//			conn = CPoolDatabase.getConnection();
//			ps = conn.prepareStatement(sSQL);
//			ps.setString(1, object.getCodINEPoblamiento());
//			ps.setString(2, object.getCodINEProvincia());
//			ps.setString(3, object.getCodINEMunicipio());
//			ps.setString(4, object.getCodINEEntidad());
//			ps.execute();
//			ps.close();
//		} catch (Exception e) {
//			throw e;
//		} finally {
//			safeClose(rs, ps, conn);
//		}
//	}

	public void checkPermissionLock(String idLayer, Integer idFeature,
			Sesion userSesion) throws Exception {

		String sSQL = "select l.name as name,l.acl as acl "
				+ "from layers l where l.name='" + idLayer + "'";

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		long aclLayer = -1;
		String nameLayer = idLayer;// Le incluyo aquí el nombre de la capa
		try {
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			rs = ps.executeQuery();
			if (rs.next()) {
				aclLayer = rs.getLong("acl");
			}
			rs.close();
			ps.close();
			/** Permisos sobre el layer */
			if (!checkPermission(
					userSesion,
					aclLayer,
					com.geopista.server.administradorCartografia.Const.PERM_LAYER_WRITE))
				throw new PermissionException(
						com.geopista.server.administradorCartografia.Const.PERM_LAYER_WRITE);

			/** Bloqueo sobre la feature */
			int iLock = canLockFeature(
					Integer.parseInt(userSesion.getIdMunicipio()), nameLayer,
					idFeature, Integer.parseInt(userSesion.getIdUser()));
			if (!(iLock == com.geopista.server.administradorCartografia.Const.LOCK_FEATURE_OWN
					|| iLock == com.geopista.server.administradorCartografia.Const.LOCK_LAYER_OWN || iLock == com.geopista.server.administradorCartografia.Const.LOCK_LAYER_LOCKED)) {
				String sMsg = null;
				switch (iLock) {
				case com.geopista.server.administradorCartografia.Const.LOCK_LAYER_OTHER:
					sMsg = "locked: layer " + idLayer;
					break;
				case com.geopista.server.administradorCartografia.Const.LOCK_FEATURE_OTHER:
					sMsg = "locked: feature";
					break;
				default:
					sMsg = "Lock error";
				}
				throw new LockException(sMsg + " (" + iLock + ")");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, ps, conn);
		}
	}

	public void checkPermissionLayer(String idLayer, Sesion userSesion)
			throws Exception {

		String sSQL = "select l.name as name,l.acl as acl,acl.name as nameacl " + "from layers l inner join acl on  l.acl=acl.idacl ";

		try {
			Integer.parseInt(idLayer);
			sSQL += "where l.id_layer= ?";
		} catch (java.lang.NumberFormatException e) {
			sSQL += "where l.name= ?";
		}

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		long aclLayer = -1;
		String nameLayer = "";
		String nameacl="";
		try {
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, idLayer);
			//logger.info("SQL Ejecutando query checkPermissionLayer: "+((org.postgresql.PGStatement)ps).toString());
			rs = ps.executeQuery();
			if (rs.next()) {
				aclLayer = rs.getLong("acl");
				nameLayer = rs.getString("name");
				nameacl = rs.getString("nameacl");
			}
			rs.close();
			ps.close();
			/** Permisos sobre el layer */
			if (!checkPermission(
					userSesion,
					aclLayer,
					com.geopista.server.administradorCartografia.Const.PERM_LAYER_WRITE)){
				logger.error("No dispone de permisos de escritura sobre la capa: "+nameLayer+ " ACL:"+nameacl+"("+aclLayer+")");	
				throw new PermissionException(
						com.geopista.server.administradorCartografia.Const.PERM_LAYER_WRITE+"->capa: "+nameLayer+ " ACL:"+nameacl+"("+aclLayer+")");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, ps, conn);
		}
	}

	public boolean checkPermission(Sesion sSesion, long lACL, String sPerm)
			throws Exception {
		//GeopistaAcl acl = sSesion.getPerfil(lACL);
		GeopistaAcl acl=SesionUtils_LCGIII.getPerfil(sSesion,lACL);
		if (acl == null)
			return false;
		return acl.checkPermission(new GeopistaPermission(sPerm));
	}

	private int canLockFeature(int iMunicipio, String sLayer, int iFeature,
			int iUser) throws Exception {
		int iRet = 0;
		// Comparar ids de Feature y bloqueos de layer con la geometria de
		// iFeature...
		int iFeatureLock = featureLocked(iMunicipio, sLayer, iFeature);
		if (iFeatureLock != -1)
			return (iFeatureLock == iUser ? com.geopista.server.administradorCartografia.Const.LOCK_FEATURE_OWN
					: com.geopista.server.administradorCartografia.Const.LOCK_FEATURE_OTHER);
		// Obtener la tabla donde esta la geometria...
		String sSQLTable = "select t.name as table,l.id_layer from tables t,columns c,attributes a,layers l "
				+ "where a.id_layer=l.id_layer and l.name=? and c.id_table=t.id_table and c.name='GEOMETRY' and a.id_column=c.id";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQLTable);
			ps.setString(1, sLayer);
			rs = ps.executeQuery();
			String sTable = null;
			if (rs.next()) {
				sTable = rs.getString("table");
			}
			rs.close();
			ps.close();
			String sSQLGeom = "";
			if (CPoolDatabase.isPostgres(conn))
				sSQLGeom = "select ll.user_id from locks_layer ll," + sTable
						+ " t "
						+ "where t.id=? and ll.municipio=? and ll.layer=? ";
						//+ " and t.\"GEOMETRY\" ";
						//+"&& setsrid(ll.\"GEOMETRY\","+ srid.getSRID(iMunicipio) + ");";
			else
				sSQLGeom = "select ll.user_id from locks_layer ll,"
						+ sTable
						+ " t "
						+ "where t.id=? and ll.municipio=? and ll.layer=? "
						+ " and sdo_relate(t.geometry,ll.geometry, 'mask=anyinteract querytype=window') = 'TRUE'";

			ps = conn.prepareStatement(sSQLGeom);
			ps.setInt(1, iFeature);
			ps.setInt(2, iMunicipio);
			ps.setString(3, sLayer);
			rs = ps.executeQuery();
			if (rs.next())
				iRet = (rs.getInt("user_id") != iUser) ? com.geopista.server.administradorCartografia.Const.LOCK_LAYER_OTHER
						: com.geopista.server.administradorCartografia.Const.LOCK_LAYER_OWN;
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, ps, conn);
		}
		return iRet;
	}

	public int featureLocked(int iMunicipio, String sLayer, int iFeature)
			throws Exception {
		int iRet = -1;
		String sSQL = "select user_id,ts from locks_feature " + "where "
				+ "municipio=? and " + "layer=? and " + "feature_id=?";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setInt(1, iMunicipio);
			ps.setString(2, sLayer);
			ps.setInt(3, iFeature);
			rs = ps.executeQuery();
			if (rs.next()) {
				iRet = rs.getInt("user_id");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, ps, conn);
		}
		return iRet;
	}

	private String bloqueadoAbastecimientoAutonomo(
			AbastecimientoAutonomoEIEL object) throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;

		String sSQL = "select bloqueado from eiel_t_abast_au where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			preparedStatement.setString(5, object.getCodINENucleo());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoElemento(WorkflowEIEL object) throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		
		String tabla=object.getNombreTablaAlfanumerica();
		if (tabla==null)
			return null;
		String query=object.getFilterSQL();
		
		if (tabla.equals("eiel_c_nucleo_poblacion"))
			return null;
		
		String sSQL = "select bloqueado from "+tabla+" where "+query;
		sSQL+=" and revision_actual="+object.getRevisionActual()+" and revision_expirada="+object.getRevisionExpirada();

		try {

			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			logger.error ("Exception al comprobar bloqueo:",e);
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoDepuradora1(Depuradora1EIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t1_saneam_ed where clave=? and codprov=? and codmunic=? and orden_ed=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodOrden());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoDepuradora2(Depuradora2EIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t2_saneam_ed where clave=? and codprov=? and codmunic=? and orden_ed=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodOrden());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoCasaConsistorial(CasasConsistorialesEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_cc where clave=? and codprov=? and codmunic=? and orden_cc=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodOrden());
			preparedStatement.setString(5, object.getCodINEEntidad());
			preparedStatement.setString(6, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoCentroCultural(CentrosCulturalesEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_cu where clave=? and codprov=? and codmunic=? and orden_cu=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodOrden());
			preparedStatement.setString(5, object.getCodINEEntidad());
			preparedStatement.setString(6, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoCentroEnsenianza(CentrosEnsenianzaEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_en where clave=? and codprov=? and codmunic=? and orden_en=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodOrden());
			preparedStatement.setString(5, object.getCodINEEntidad());
			preparedStatement.setString(6, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoInstalacionDeportiva(
			InstalacionesDeportivasEIEL object) throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_id where clave=? and codprov=? and codmunic=? and orden_id=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getOrdenIdDeportes());
			preparedStatement.setString(5, object.getCodINEEntidad());
			preparedStatement.setString(6, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	/*private String bloqueadoNucleosPoblacion(NucleosPoblacionEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_nucleos_poblacion where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			preparedStatement.setString(3, object.getCodINEEntidad());
			preparedStatement.setString(4, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}*/

	private String bloqueadoOtrosServMunicipales(OtrosServMunicipalesEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_otros_serv_munic where codprov=? and codmunic=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoPadronNucleos(PadronNucleosEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_padron_nd where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			preparedStatement.setString(3, object.getCodINEEntidad());
			preparedStatement.setString(4, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoPadronMunicipios(PadronMunicipiosEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from "+eiel_t_padron_ttmm+" where codprov=? and codmunic=? ";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoParquesJardines(ParquesJardinesEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_pj where clave=? and codprov=? and codmunic=? and orden_pj=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodOrden());
			preparedStatement.setString(5, object.getCodINEEntidad());
			preparedStatement.setString(6, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoPlaneamientoUrbano(PlaneamientoUrbanoEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_planeam_urban where codprov=? and codmunic=? ";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoPoblamiento(PoblamientoEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from "+eiel_t_poblamiento+" where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			preparedStatement.setString(3, object.getCodINEEntidad());
			preparedStatement.setString(4, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoRecogidaBasuras(RecogidaBasurasEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_rb where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			preparedStatement.setString(5, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoCentrosSanitarios(CentrosSanitariosEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_sa where clave=? and codprov=? and codmunic=? and orden_sa=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getOrden());
			preparedStatement.setString(5, object.getCodINEEntidad());
			preparedStatement.setString(6, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoSaneamientoAutonomo(SaneamientoAutonomoEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_saneam_au where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			preparedStatement.setString(5, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoServiciosSaneamiento(ServiciosSaneamientoEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_saneam_serv where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			preparedStatement.setString(3, object.getCodINEEntidad());
			preparedStatement.setString(4, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoServiciosRecogidaBasuras(
			ServiciosRecogidaBasuraEIEL object) throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_rb_serv where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			preparedStatement.setString(3, object.getCodINEEntidad());
			preparedStatement.setString(4, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoEdificiosSinUso(EdificiosSinUsoEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_su where clave=? and codprov=? and codmunic=? and orden_su=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodOrden());
			preparedStatement.setString(5, object.getCodINEEntidad());
			preparedStatement.setString(6, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoTanatorios(TanatoriosEIEL object) throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_ta where clave=? and codprov=? and codmunic=? and orden_ta=? and codentidad=? and codpoblamiento=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodOrden());
			preparedStatement.setString(5, object.getCodINEEntidad());
			preparedStatement.setString(6, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoVertederos(VertederosEIEL object) throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_vt where clave=? and codprov=? and codmunic=? and orden_vt=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodOrden());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoCarreteras(TramosCarreterasEIEL object)
			throws Exception {

		if (object == null)
			return null;

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_carreteras where codprov=? and cod_carrt=?";

		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);

			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodCarretera());
			rs = preparedStatement.executeQuery();

			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoDepositos(DepositosEIEL object) throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_abast_de where clave=? and codprov=? and codmunic=? and orden_de=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getOrdenDeposito());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoPuntosVertido(PuntosVertidoEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_saneam_pv where clave=? and codprov=? and codmunic=? and orden_pv=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getOrden());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoServiciosAbastecimientos(
			ServiciosAbastecimientosEIEL object) throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_abast_serv where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			preparedStatement.setString(3, object.getCodINEEntidad());
			preparedStatement.setString(4, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoCentrosAsistenciales(CentrosAsistencialesEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_as where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_as=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			preparedStatement.setString(5, object.getCodINEPoblamiento());
			preparedStatement.setString(6, object.getOrdenAsistencial());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoCabildoConsejo(CabildoConsejoEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_cabildo_consejo where codprov=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEProvincia());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoCementerios(CementeriosEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_ce where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ce=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			preparedStatement.setString(5, object.getCodINEPoblamiento());
			preparedStatement.setString(6, object.getOrden());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoEntidadesSingulares(EntidadesSingularesEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from "+eiel_t_entidad_singular+" where codprov=? and codmunic=? and codentidad=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			preparedStatement.setString(3, object.getCodINEEntidad());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}
	
	private String bloqueadoNucleosPoblacion(NucleosPoblacionEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from "+eiel_c_nucleo_poblacion+" where codprov=? and codmunic=? and codentidad=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			preparedStatement.setString(3, object.getCodINEEntidad());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoInfoTerminosMunicipales(NucleoEncuestado7EIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_inf_ttmm where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			preparedStatement.setString(3, object.getCodINEEntidad());
			preparedStatement.setString(4, object.getCodINEPoblamiento());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoIncendiosProteccion(IncendiosProteccionEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_ip where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ip=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			preparedStatement.setString(5, object.getCodINEPoblamiento());
			preparedStatement.setString(6, object.getOrden());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoLonjasMercados(LonjasMercadosEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_lm where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_lm=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			preparedStatement.setString(5, object.getCodINEPoblamiento());
			preparedStatement.setString(6, object.getOrden());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoMataderos(MataderosEIEL object) throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_mt where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_mt=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			preparedStatement.setString(5, object.getCodINEPoblamiento());
			preparedStatement.setString(6, object.getOrden());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoTratamientosPotabilizacion(
			TratamientosPotabilizacionEIEL object) throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_abast_tp where clave=? and codprov=? and codmunic=? and orden_tp=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getClave());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getOrdenPotabilizadora());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoDiseminados(DiseminadosEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_mun_diseminados where codprov=? and codmunic=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEProvincia());
			preparedStatement.setString(2, object.getCodINEMunicipio());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoEncuestados1(Encuestados1EIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from "+eiel_t_nucl_encuest_1+" where codpoblamiento=? and codprov=? and codmunic=? and codentidad=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEPoblamiento());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private String bloqueadoEncuestados2(Encuestados2EIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_nucl_encuest_2 where codpoblamiento=? and codprov=? and codmunic=? and codentidad=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEPoblamiento());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}
	
	private String bloqueadoEntidadesAgrupadas(EntidadesAgrupadasEIEL object) throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from "+eiel_t_entidades_agrupadas+" " +
				"where codmunicipio=? and codentidad=? and codnucleo=? ";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEMunicipio());
			preparedStatement.setString(2, object.getCodEntidad());
			preparedStatement.setString(3, object.getCodNucleo());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}
		
	

	private String bloqueadoNucleosAbandonados(NucleosAbandonadosEIEL object)
			throws Exception {
		if (object == null)
			return null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		Connection conn = null;
		String bloqueado = null;
		String sSQL = "select bloqueado from eiel_t_nucleo_aband where codpoblamiento=? and codprov=? and codmunic=? and codentidad=?";
		try {
			conn = CPoolDatabase.getConnection();
			preparedStatement = conn.prepareStatement(sSQL);
			preparedStatement.setString(1, object.getCodINEPoblamiento());
			preparedStatement.setString(2, object.getCodINEProvincia());
			preparedStatement.setString(3, object.getCodINEMunicipio());
			preparedStatement.setString(4, object.getCodINEEntidad());
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				bloqueado = rs.getString("bloqueado");
			}
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(rs, preparedStatement, conn);
		}
		return bloqueado;
	}

	private AbastecimientoAutonomoEIEL bloquearAbastecimientoAutonomo(
			AbastecimientoAutonomoEIEL object, boolean bloqueado,
			Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_abast_au set bloqueado=? where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINENucleo());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private WorkflowEIEL bloquearElemento(WorkflowEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String tabla=object.getNombreTablaAlfanumerica();
		if (tabla==null)
			return null;
		String query=object.getFilterSQL();
		
		
		String sSQL = "update "+tabla+" set bloqueado=? where "+query;
		sSQL+="and revision_actual="+object.getRevisionActual()+" and revision_expirada="+object.getRevisionExpirada();

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			logger.error("Exception al bloquear",e);
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private Depuradora1EIEL bloquearDepuradora1(Depuradora1EIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t1_saneam_ed set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_ed=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodOrden());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private Depuradora2EIEL bloquearDepuradora2(Depuradora2EIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t2_saneam_ed set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_ed=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodOrden());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private CasasConsistorialesEIEL bloquearCasaConsistorial(
			CasasConsistorialesEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_cc set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_cc=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodOrden());
			ps.setString(6, object.getCodINEEntidad());
			ps.setString(7, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private CentrosCulturalesEIEL bloquearCentroCultural(
			CentrosCulturalesEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_cu set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_cu=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodOrden());
			ps.setString(6, object.getCodINEEntidad());
			ps.setString(7, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private CentrosEnsenianzaEIEL bloquearCentroEnsenianza(
			CentrosEnsenianzaEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_en set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_en=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodOrden());
			ps.setString(6, object.getCodINEEntidad());
			ps.setString(7, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private InstalacionesDeportivasEIEL bloquearInstalacionDeportiva(
			InstalacionesDeportivasEIEL object, boolean bloqueado,
			Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_id set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_id=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getOrdenIdDeportes());
			ps.setString(6, object.getCodINEEntidad());
			ps.setString(7, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private NucleosPoblacionEIEL bloquearNucleosPoblacion(
			NucleosPoblacionEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update "+eiel_c_nucleo_poblacion+" set bloqueado=? where codprov=? and codmunic=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private OtrosServMunicipalesEIEL bloquearOtrosServMunicipales(
			OtrosServMunicipalesEIEL object, boolean bloqueado,
			Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_otros_serv_munic set bloqueado=? where codprov=? and codmunic=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private PadronNucleosEIEL bloquearPadronNucleos(PadronNucleosEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_padron_nd set bloqueado=? where codprov=? and codmunic=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private PadronMunicipiosEIEL bloquearPadronMunicipios(
			PadronMunicipiosEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update "+eiel_t_padron_ttmm+" set bloqueado=? where codprov=? and codmunic=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private ParquesJardinesEIEL bloquearParquesJardines(
			ParquesJardinesEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_pj set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_pj=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodOrden());
			ps.setString(6, object.getCodINEEntidad());
			ps.setString(7, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private PlaneamientoUrbanoEIEL bloquearPlaneamientoUrbano(
			PlaneamientoUrbanoEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_planeam_urban set bloqueado=? where codprov=? and codmunic=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private PoblamientoEIEL bloquearPoblamiento(PoblamientoEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update "+eiel_t_poblamiento+" set bloqueado=? where codprov=? and codmunic=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private RecogidaBasurasEIEL bloquearRecogidaBasuras(
			RecogidaBasurasEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_rb set bloqueado=? where clave=? and codprov=? and codmunic=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private CentrosSanitariosEIEL bloquearCentrosSanitarios(
			CentrosSanitariosEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_sa set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_sa=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getOrden());
			ps.setString(6, object.getCodINEEntidad());
			ps.setString(7, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private SaneamientoAutonomoEIEL bloquearSaneamientoAutonomo(
			SaneamientoAutonomoEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_saneam_au set bloqueado=? where clave=? and codprov=? and codmunic=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private ServiciosSaneamientoEIEL bloquearServiciosSaneamiento(
			ServiciosSaneamientoEIEL object, boolean bloqueado,
			Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_saneam_serv set bloqueado=? where codprov=? and codmunic=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private ServiciosRecogidaBasuraEIEL bloquearServiciosRecogidaBasura(
			ServiciosRecogidaBasuraEIEL object, boolean bloqueado,
			Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_rb_serv set bloqueado=? where codprov=? and codmunic=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private EdificiosSinUsoEIEL bloquearEdificiosSinUso(
			EdificiosSinUsoEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_su set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_su=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodOrden());
			ps.setString(6, object.getCodINEEntidad());
			ps.setString(7, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private TanatoriosEIEL bloquearTanatorios(TanatoriosEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_ta set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_ta=? "
				+ "and codentidad=? and codpoblamiento=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodOrden());
			ps.setString(6, object.getCodINEEntidad());
			ps.setString(7, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private VertederosEIEL bloquearVertederos(VertederosEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_vt set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_vt=? ";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodOrden());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private TramosCarreterasEIEL bloquearCarreteras(
			TramosCarreterasEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {

		if (object == null)
			return null;

		String sSQL = "update eiel_t_carreteras set bloqueado=? where codprov=? and cod_carrt=?";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodCarretera());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private DepositosEIEL bloquearDeposito(DepositosEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_abast_de set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_de=? ";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getOrdenDeposito());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private PuntosVertidoEIEL bloquearPuntosVertido(PuntosVertidoEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_saneam_pv set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_pv=? ";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getOrden());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private ServiciosAbastecimientosEIEL bloquearServiciosAbastecimientos(
			ServiciosAbastecimientosEIEL object, boolean bloqueado,
			Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_abast_serv set bloqueado=? where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private CentrosAsistencialesEIEL bloquearCentrosAsistenciales(
			CentrosAsistencialesEIEL object, boolean bloqueado,
			Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_as set bloqueado=? where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_as=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ps.setString(7, object.getOrdenAsistencial());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private CabildoConsejoEIEL bloquearCabildoConsejo(
			CabildoConsejoEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_cabildo_consejo set bloqueado=? where codprov=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private CementeriosEIEL bloquearCementerios(CementeriosEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_ce set bloqueado=? where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ce=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ps.setString(7, object.getOrden());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private EntidadesSingularesEIEL bloquearEntidadesSingulares(
			EntidadesSingularesEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {
		if (object == null)
			return null;
		String sSQL = "update "+eiel_t_entidad_singular+" set bloqueado=? where codprov=? and codmunic=? and codentidad=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private NucleoEncuestado7EIEL bloquearInfoTerminosMunicipales(
			NucleoEncuestado7EIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_inf_ttmm set bloqueado=? where codprov=? and codmunic=? and codentidad=? and codpoblamiento=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private IncendiosProteccionEIEL bloquearIncendiosProteccion(
			IncendiosProteccionEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_ip set bloqueado=? where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ip=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ps.setString(7, object.getOrden());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private LonjasMercadosEIEL bloquearLonjasMercados(
			LonjasMercadosEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_lm set bloqueado=? where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_lm=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ps.setString(7, object.getOrden());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private MataderosEIEL bloquearMataderos(MataderosEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_mt set bloqueado=? where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_mt=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ps.setString(7, object.getOrden());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private TratamientosPotabilizacionEIEL bloquearTratamientosPotabilizacion(
			TratamientosPotabilizacionEIEL object, boolean bloqueado,
			Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_abast_tp set bloqueado=? where clave=? and codprov=? and codmunic=? and orden_tp=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getClave());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getOrdenPotabilizadora());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private DiseminadosEIEL bloquearDiseminados(DiseminadosEIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_mun_diseminados set bloqueado=? where codprov=? and codmunic=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private Encuestados1EIEL bloquearEncuestados1(Encuestados1EIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update "+eiel_t_nucl_encuest_1+" set bloqueado=? where codpoblamiento=? and codprov=? and codmunic=? and codentidad=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEPoblamiento());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private Encuestados2EIEL bloquearEncuestados2(Encuestados2EIEL object,
			boolean bloqueado, Sesion userSesion) throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_nucl_encuest_2 set bloqueado=? where codpoblamiento=? and codprov=? and codmunic=? and codentidad=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEPoblamiento());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
		return object;
	}

	private NucleosAbandonadosEIEL bloquearNucleosAbandonados(
			NucleosAbandonadosEIEL object, boolean bloqueado, Sesion userSesion)
			throws Exception {
		if (object == null)
			return null;
		String sSQL = "update eiel_t_nucleo_aband set bloqueado=? where codpoblamiento=? and codprov=? and codmunic=? and codentidad=?";
		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			if (bloqueado)
				ps.setString(1, userSesion.getUserPrincipal().getName());
			else
				ps.setNull(1, java.sql.Types.VARCHAR);
			ps.setString(2, object.getCodINEPoblamiento());
			ps.setString(3, object.getCodINEProvincia());
			ps.setString(4, object.getCodINEMunicipio());
			ps.setString(5, object.getCodINEEntidad());
			ps.execute();
			conn.commit();
			object.setBloqueado(bloqueado ? userSesion.getUserPrincipal()
					.getName() : null);
		} catch (Exception e) {
			throw e;
		}
		finally{
			safeClose(null, ps, conn);
		}
		return object;
	}

	public DomainNode obtenerDominiosHijo(Connection connection,
			DomainNode dominioPadre, String idMunicipio,String locale) throws SQLException {
		boolean hayDatos = false;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;

		try {

			String sentenciaSQL = "select id_node, id_vocablo, parentdomain, id_domain, "
					+ "pattern, locale, traduccion, tipo from v_domain where "
					+ "parentdomain = ? and id_domain_node = id_domain and "
					+ "id_description = id_vocablo and id_municipio is null";

			if (locale!=null)
				sentenciaSQL+=" and locale='"+locale+"'";

			preparedStatement = connection.prepareStatement(sentenciaSQL);
			//preparedStatement.setString(1, dominioPadre.getIdNode());
			preparedStatement.setInt(1, Integer.parseInt(dominioPadre.getIdNode(),10));

			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				//logger.debug("Recuperando Dominio Hijo1:"+rs.getString("traduccion"));

				hayDatos = true;
				DomainNode childDomainNode = null;
				String newChildIdDomainNode = rs.getString("id_node");
				if ((childDomainNode == null)
						|| (!childDomainNode.getIdNode().equals(
								newChildIdDomainNode))) {
					childDomainNode = new DomainNode(rs.getString("id_node"),
							rs.getString("id_vocablo"), rs.getInt("tipo"),
							new Integer(rs.getInt("parentdomain")).toString(),
							idMunicipio, rs.getString("id_domain"),
							rs.getString("pattern"));
					if (rs.getString("id_vocablo") != null)
						childDomainNode.addTerm(rs.getString("locale"),
								rs.getString("traduccion"));

					childDomainNode = obtenerDominiosHijo(connection,
							childDomainNode, idMunicipio,locale);
					dominioPadre.addHijo(childDomainNode);
				} else {
					childDomainNode.addTerm(rs.getString("locale"),
							rs.getString("traduccion"));
				}

			}

			if (hayDatos)
				return dominioPadre;

			sentenciaSQL = "select id_node, id_vocablo, parentdomain, id_domain, "
					+ "pattern, locale, traduccion, tipo from v_domain where "
					+ "parentdomain = ? and id_domain_node = id_domain and "
					+ "id_description = id_vocablo and id_municipio = ?";

			if (locale!=null)
				sentenciaSQL+=" and locale='"+locale+"'";

			preparedStatement = connection.prepareStatement(sentenciaSQL);

			preparedStatement.setString(1, dominioPadre.getIdNode());
			preparedStatement.setInt(2, new Integer(idMunicipio).intValue());

			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				logger.debug("Recuperando Dominio Hijo2:"+rs.getString("traduccion"));

				DomainNode childDomainNode = null;
				String newChildIdDomainNode = rs.getString("id_node");
				if ((childDomainNode == null)
						|| (!childDomainNode.getIdNode().equals(
								newChildIdDomainNode))) {
					childDomainNode = new DomainNode(rs.getString("id_node"),
							rs.getString("id_vocablo"), rs.getInt("tipo"),
							new Integer(rs.getInt("parentdomain")).toString(),
							idMunicipio, rs.getString("id_domain"),
							rs.getString("pattern"));
					if (rs.getString("id_vocablo") != null)
						childDomainNode.addTerm(rs.getString("locale"),
								rs.getString("traduccion"));

					childDomainNode = obtenerDominiosHijo(connection,
							childDomainNode, idMunicipio,locale);
					dominioPadre.addHijo(childDomainNode);
				} else {
					childDomainNode.addTerm(rs.getString("locale"),
							rs.getString("traduccion"));
				}

			}
			return dominioPadre;

		} catch (Exception e) {
			e.printStackTrace();
		}
		finally{
			safeClose(rs, preparedStatement, null);
		}
		return dominioPadre;

	}

	public ArrayList getLstDomains(String domainName, String idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDomains = null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			statement = connection
					.prepareStatement("select domains.id as id_domain,domainnodes.id as id_node, "
							+ "domainnodes.pattern as pattern,domainnodes.id_description as id_descripcion, "
							+ "dictionary.locale as locale, dictionary.traduccion as traduccion from domains,"
							+ "domainnodes,dictionary where upper(domains.name)=upper('"
							+ domainName
							+ "') and domainnodes.type="
							+ com.geopista.feature.Domain.TREE
							+ " and domainnodes.id_domain=domains.id and "
							+ "domainnodes.id_description= dictionary.id_vocablo ");

			rs = statement.executeQuery();

			DomainNode oldDomainNode = null;
			while (rs.next()) {

			}

			statement = connection
					.prepareStatement("select domains.id as id_domain,domainnodes.id as id_node, "
							+ "domainnodes.pattern as pattern,domainnodes.id_description as id_descripcion, "
							+ "dictionary.locale as locale, dictionary.traduccion as traduccion from domains,"
							+ "domainnodes,dictionary where upper(domains.name)=upper('"
							+ domainName
							+ "') and domainnodes.type="
							+ com.geopista.feature.Domain.CODEDENTRY
							+ " and domainnodes.id_domain=domains.id and "
							+ "domainnodes.id_description= dictionary.id_vocablo ");

			rs = statement.executeQuery();

			while (rs.next()) {
				String newIdDomainNode = rs.getString("id_node");
				if ((oldDomainNode == null)
						|| (!oldDomainNode.getIdNode().equals(newIdDomainNode))) {
					oldDomainNode = new DomainNode(rs.getString("id_node"),
							rs.getString("id_descripcion"),
							com.geopista.feature.Domain.CODEDENTRY, null,
							new Integer(com.geopista.security.SecurityManager
									.getIdMunicipio()).toString(),
							rs.getString("id_domain"), rs.getString("pattern"));
					if (rs.getString("id_descripcion") != null)
						oldDomainNode.addTerm(rs.getString("locale"),
								rs.getString("traduccion"));
					lstDomains.add(oldDomainNode);
				} else {
					oldDomainNode.addTerm(rs.getString("locale"),
							rs.getString("traduccion"));
				}
			}
			;

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
			logger.error("Exception: " + sw.toString());
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDomains;
	}

	public void calcularIndicesMunicipales(ObjectOutputStream oos,
			Sesion userSesion) throws Exception {

		try {
			ArrayList lstIndices = getLstIndicesMunicipales(userSesion);
			insertarIndicesMunicipales(lstIndices);

			ArrayList lstComarcas = getLstComarcas(userSesion);
			ArrayList lstIndComarcales = getLstIdMunicComarca(userSesion,
					lstComarcas);
			insertarIndicesComarcales(lstIndComarcales);

		} catch (Exception e) {
			logger.error("calcularIndicesMunicipales: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
	}

	public void calcularIndicesObras(ObjectOutputStream oos, Sesion userSesion)
			throws Exception {

		try {

			ArrayList lstComarcas = getLstComarcas(userSesion);

			ArrayList lstEstadoObrasComarcal = getLstEstadoObrasComarcas(
					userSesion, lstComarcas);
			insertarEstadoObrasComarcales(lstEstadoObrasComarcal);

			ArrayList lstInvMediaComarcal = getLstInversionMediaComarcas(
					userSesion, lstComarcas);
			insertarInvMediaComarcales(lstInvMediaComarcal);

		} catch (Exception e) {
			logger.error("calcularIndicesMunicipales: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
	}

	private ArrayList getLstIndicesMunicipales(Sesion userSesion) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();
		ArrayList lstDatosResult = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			GeopistaAcl acl = getPermission(userSesion,
					ConstantesLocalGISEIEL.ACL_INDICADORES, connection);
			if (!checkPerm(userSesion, acl,
					ConstantesLocalGISEIEL.PERM_LAYER_READ))
				throw new PermissionException("PermissionException: "
						+ ConstantesLocalGISEIEL.PERM_LAYER_READ);

			String sql = "select * from indicadoresmunicipales";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				IndicadorMunicipal indicador = new IndicadorMunicipal();

				indicador.setNumHabViv(new Double(rs.getDouble("num_hab_viv")));
				indicador.setPlaneamUrban(rs.getString("planeam_urban"));
				indicador.setCapRegDer(new Double(rs.getDouble("cap_reg_der")));
				indicador.setCapRegEst(new Double(rs.getDouble("cap_reg_est")));
				indicador.setIndPuntosLuz(new Double(rs
						.getDouble("ind_puntos_luz")));
				indicador.setPobDefDer(new Integer(rs.getInt("pob_def_der")));
				indicador.setPobDefEst(new Integer(rs.getInt("pob_def_est")));
				indicador.setIndCapt(new Double(rs.getDouble("ind_capt")));
				indicador.setIndPot(new Double(rs.getDouble("ind_pot")));
				indicador.setIndDep(new Double(rs.getDouble("ind_dep")));
				indicador.setIndDist(new Double(rs.getDouble("ind_dist")));
				indicador.setIndSaneam(new Double(rs.getDouble("ind_saneam")));
				indicador.setIndDepu(new Double(rs.getDouble("ind_depu")));
				indicador.setIndPav(new Double(rs.getDouble("ind_pav")));
				indicador.setIndAlum(new Double(rs.getDouble("ind_alum")));
				indicador.setIndBas(new Double(rs.getDouble("ind_bas")));
				indicador.setIndRes(new Double(rs.getDouble("ind_res")));
				indicador.setIndCul(new Double(rs.getDouble("ind_cul")));
				indicador.setIndDepo(new Double(rs.getDouble("ind_depo")));
				indicador.setIndVer(new Double(rs.getDouble("ind_ver")));
				indicador.setIndAdm(new Double(rs.getDouble("ind_adm")));
				indicador.setIndGlobal(new Double(rs.getDouble("ind_global")));
				indicador.setIndSupDer(new Double(rs.getDouble("ind_sup_der")));
				indicador.setIndSupEst(new Double(rs.getDouble("ind_sup_est")));
				indicador.setIdMunicipio(new Integer(rs.getInt("id")));

				lstDatos.add(indicador);

			}

			double mediaCul = 0;
			double mediaDepo = 0;
			double mediaVer = 0;
			double mediaAdm = 0;

			double desvAdm = 0;
			double desvCul = 0;
			double desvDepo = 0;
			double desvVer = 0;

			for (Iterator iterIndicadores = lstDatos.iterator(); iterIndicadores
					.hasNext();) {

				IndicadorMunicipal indicador = (IndicadorMunicipal) iterIndicadores
						.next();
				mediaCul = mediaCul + indicador.getIndCul().doubleValue();
				mediaDepo = mediaDepo + indicador.getIndDepo().doubleValue();
				mediaVer = mediaVer + indicador.getIndVer().doubleValue();
				mediaAdm = mediaAdm + indicador.getIndAdm().doubleValue();

			}

			mediaCul = mediaCul / lstDatos.size();
			mediaDepo = mediaDepo / lstDatos.size();
			mediaVer = mediaVer / lstDatos.size();
			mediaAdm = mediaAdm / lstDatos.size();

			for (Iterator iterIndicadores = lstDatos.iterator(); iterIndicadores
					.hasNext();) {

				IndicadorMunicipal indicador = (IndicadorMunicipal) iterIndicadores
						.next();
				desvCul = desvCul
						+ Math.pow(
								(indicador.getIndCul().doubleValue() - mediaCul),
								2);
				desvDepo = desvDepo
						+ Math.pow(
								(indicador.getIndDepo().doubleValue() - mediaCul),
								2);
				desvVer = desvVer
						+ Math.pow(
								(indicador.getIndVer().doubleValue() - mediaCul),
								2);
				desvAdm = desvAdm
						+ Math.pow(
								(indicador.getIndAdm().doubleValue() - mediaCul),
								2);
			}

			desvCul = Math.sqrt(desvCul / (lstDatos.size() - 1));
			desvDepo = Math.sqrt(desvDepo / (lstDatos.size() - 1));
			desvVer = Math.sqrt(desvVer / (lstDatos.size() - 1));
			desvAdm = Math.sqrt(desvAdm / (lstDatos.size() - 1));

			double culMax = mediaCul + desvCul;
			double depoMax = mediaDepo + desvDepo;
			double verMax = mediaVer + desvVer;
			double admMax = mediaAdm + desvAdm;

			for (Iterator iterIndicadores = lstDatos.iterator(); iterIndicadores
					.hasNext();) {

				IndicadorMunicipal indicador = (IndicadorMunicipal) iterIndicadores
						.next();

				if (indicador.getIndCul().doubleValue() > culMax) {
					indicador.setIndCul(new Double(0));
				} else {
					indicador.setIndCul(new Double(100 - (100 * indicador
							.getIndCul().doubleValue() / culMax)));
				}

				if (indicador.getIndDepo().doubleValue() > depoMax) {
					indicador.setIndDepo(new Double(0));
				} else {
					indicador.setIndDepo(new Double(100 - (100 * indicador
							.getIndDepo().doubleValue() / depoMax)));
				}

				if (indicador.getIndVer().doubleValue() > verMax) {
					indicador.setIndVer(new Double(0));
				} else {
					indicador.setIndVer(new Double(100 - (100 * indicador
							.getIndVer().doubleValue() / verMax)));
				}

				if (indicador.getIndAdm().doubleValue() > admMax) {
					indicador.setIndAdm(new Double(0));
				} else {
					indicador.setIndAdm(new Double(100 - (100 * indicador
							.getIndAdm().doubleValue() / admMax)));
				}

				double indGlobal = (indicador.getIndCapt().doubleValue() * 14
						+ indicador.getIndPot().doubleValue() * 10
						+ indicador.getIndDep().doubleValue() * 8
						+ indicador.getIndDist().doubleValue() * 8
						+ indicador.getIndSaneam().doubleValue() * 8
						+ indicador.getIndDepu().doubleValue() * 10
						+ indicador.getIndPav().doubleValue() * 6
						+ indicador.getIndAlum().doubleValue() * 6
						+ indicador.getIndBas().doubleValue() * 6
						+ indicador.getIndRes().doubleValue() * 6
						+ indicador.getIndCul().doubleValue() * 6
						+ indicador.getIndDepo().doubleValue() * 6
						+ indicador.getIndVer().doubleValue() * 3 + indicador
						.getIndAdm().doubleValue() * 3) / 100;

				indicador.setIndGlobal(new Double(indGlobal));

				lstDatosResult.add(indicador);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatosResult;
	}

	private IndicadorMunicipal getLstIndicesMunicipales(Sesion userSesion,
			Integer idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		IndicadorMunicipal indicador = null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			GeopistaAcl acl = getPermission(userSesion,
					ConstantesLocalGISEIEL.ACL_INDICADORES, connection);
			if (!checkPerm(userSesion, acl,
					ConstantesLocalGISEIEL.PERM_LAYER_READ))
				throw new PermissionException("PermissionException: "
						+ ConstantesLocalGISEIEL.PERM_LAYER_READ);

			String sql = "select * from indicadores where id_municipio=?";

			statement = connection.prepareStatement(sql);
			statement.setInt(1, idMunicipio.intValue());
			rs = statement.executeQuery();

			while (rs.next()) {

				indicador = new IndicadorMunicipal();

				indicador.setNumHabViv(new Double(rs.getDouble("num_hab_viv")));
				indicador.setPlaneamUrban(rs.getString("planeam_urban"));
				indicador.setCapRegDer(new Double(rs.getDouble("cap_reg_der")));
				indicador.setCapRegEst(new Double(rs.getDouble("cap_reg_est")));
				indicador.setIndPuntosLuz(new Double(rs
						.getDouble("ind_puntos_luz")));
				indicador.setPobDefDer(new Integer(rs.getInt("pob_def_der")));
				indicador.setPobDefEst(new Integer(rs.getInt("pob_def_est")));
				indicador.setIndCapt(new Double(rs.getDouble("ind_capt")));
				indicador.setIndPot(new Double(rs.getDouble("ind_pot")));
				indicador.setIndDep(new Double(rs.getDouble("ind_dep")));
				indicador.setIndDist(new Double(rs.getDouble("ind_dist")));
				indicador.setIndSaneam(new Double(rs.getDouble("ind_saneam")));
				indicador.setIndDepu(new Double(rs.getDouble("ind_depu")));
				indicador.setIndPav(new Double(rs.getDouble("ind_pav")));
				indicador.setIndAlum(new Double(rs.getDouble("ind_alum")));
				indicador.setIndBas(new Double(rs.getDouble("ind_bas")));
				indicador.setIndRes(new Double(rs.getDouble("ind_res")));
				indicador.setIndCul(new Double(rs.getDouble("ind_cul")));
				indicador.setIndDepo(new Double(rs.getDouble("ind_depo")));
				indicador.setIndVer(new Double(rs.getDouble("ind_ver")));
				indicador.setIndAdm(new Double(rs.getDouble("ind_adm")));
				indicador.setIndGlobal(new Double(rs.getDouble("ind_global")));
				indicador.setIndSupDer(new Double(rs.getDouble("ind_sup_der")));
				indicador.setIndSupEst(new Double(rs.getDouble("ind_sup_est")));
				indicador
						.setIdMunicipio(new Integer(rs.getInt("id_municipio")));

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return indicador;
	}

	private EstadoObrasMunicipal getLstObrasMunicipales(Sesion userSesion,
			Integer idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		EstadoObrasMunicipal indicador = null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			GeopistaAcl acl = getPermission(userSesion,
					ConstantesLocalGISEIEL.ACL_INDICADORES, connection);
			if (!checkPerm(userSesion, acl,
					ConstantesLocalGISEIEL.PERM_LAYER_READ))
				throw new PermissionException("PermissionException: "
						+ ConstantesLocalGISEIEL.PERM_LAYER_READ);

			String sql = "select * from estado_obras where id_municipio=?";

			statement = connection.prepareStatement(sql);
			statement.setInt(1, idMunicipio.intValue());
			rs = statement.executeQuery();

			while (rs.next()) {

				indicador = new EstadoObrasMunicipal();

				indicador.setNomAyto(rs.getString("nomayto"));
				indicador.setAutorizadas(new Integer(rs.getInt("autorizadas")));
				indicador.setAnuladas(new Integer(rs.getInt("anuladas")));
				indicador.setContratadas(new Integer(rs.getInt("contratadas")));
				indicador.setEnEjecucion(new Integer(rs.getInt("enejecucion")));
				indicador.setLiquidadas(new Integer(rs.getInt("liquidadas")));
				indicador.setRevocadas(new Integer(rs.getInt("revocadas")));
				indicador.setTotal(new Integer(rs.getInt("total")));
				indicador
						.setIdMunicipio(new Integer(rs.getInt("id_municipio")));

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return indicador;
	}

	private InvMediaMunicipal getInversionMediaMunicipales(Sesion userSesion,
			Integer idMunicipio) {

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		InvMediaMunicipal indicador = null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			GeopistaAcl acl = getPermission(userSesion,
					ConstantesLocalGISEIEL.ACL_INDICADORES, connection);
			if (!checkPerm(userSesion, acl,
					ConstantesLocalGISEIEL.PERM_LAYER_READ))
				throw new PermissionException("PermissionException: "
						+ ConstantesLocalGISEIEL.PERM_LAYER_READ);

			String sql = "select * from inv_media_anual where id_municipio=?";

			statement = connection.prepareStatement(sql);
			statement.setInt(1, idMunicipio.intValue());
			rs = statement.executeQuery();

			while (rs.next()) {

				indicador = new InvMediaMunicipal();

				indicador.setNomAyto(rs.getString("nomayto"));
				indicador.setPrto2005(new Double(rs.getDouble("prto2005")));
				indicador.setPrto2006(new Double(rs.getDouble("prto2006")));
				indicador.setPrto2007(new Double(rs.getDouble("prto2007")));
				indicador.setPrto2008(new Double(rs.getDouble("prto2008")));
				indicador.setPrto2009(new Double(rs.getDouble("prto2009")));
				indicador.setInvHab(new Double(rs.getDouble("invhab")));
				indicador.setInvMedAnual(new Double(rs
						.getDouble("invmediaanual")));
				indicador.setTotalInv(new Double(rs.getDouble("totalinv")));
				indicador
						.setIdMunicipio(new Integer(rs.getInt("id_municipio")));

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return indicador;
	}

	private GeopistaAcl getPermission(Sesion sSesion, long lACL, Connection conn)
			throws Exception {
		GeopistaAcl acl = sSesion.getPerfil(lACL, conn);
		if (acl == null) {
			throw new PermissionException("El usuario "
					+ sSesion.getUserPrincipal().getName() + " no tiene"
					+ " permisos para ver todas las capas del mapa.");
		}
		return acl;
	}

	private boolean checkPerm(Sesion sesion, GeopistaAcl acl, String perm)
			throws Exception {
		boolean permiso = acl.checkPermission(new GeopistaPermission(perm));
		if (!permiso) {
			return false;
		}
		return true;
	}

	private void insertarIndicesMunicipales(ArrayList lstIndMunic)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;

		for (Iterator iterLstIndMunic = lstIndMunic.iterator(); iterLstIndMunic
				.hasNext();) {

			Object object = iterLstIndMunic.next();

			if (object instanceof IndicadorMunicipal) {

				IndicadorMunicipal indicador = (IndicadorMunicipal) object;
				try {

					sSQL = "select * from indicadores where id_municipio=?";

					conn = CPoolDatabase.getConnection();
					ps = conn.prepareStatement(sSQL);
					ps.setInt(1, indicador.getIdMunicipio().intValue());

					rs = ps.executeQuery();

					if (rs.next()) {

						sSQL = "update indicadores set num_hab_viv=?, planeam_urban=?, cap_reg_der=?, cap_reg_est=?, ind_puntos_luz=?,"
								+ " pob_def_der=?, pob_def_est=?, ind_capt=?, ind_pot=?, ind_dep=?, ind_dist=?, ind_saneam=?, ind_depu=?, "
								+ "ind_pav=?, ind_alum=?, ind_bas=?, ind_res=?, ind_cul=?, ind_depo=?, ind_ver=?, ind_adm=?, ind_global=?, "
								+ "ind_sup_der=?, ind_sup_est=? where id_municipio=?";
					} else {

						sSQL = "insert into indicadores (num_hab_viv, planeam_urban, cap_reg_der, cap_reg_est, ind_puntos_luz,"
								+ " pob_def_der, pob_def_est, ind_capt, ind_pot, ind_dep, ind_dist, ind_saneam, ind_depu, "
								+ "ind_pav, ind_alum, ind_bas, ind_res, ind_cul, ind_depo, ind_ver, ind_adm, ind_global, "
								+ "ind_sup_der, ind_sup_est, id_municipio) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
								+ "?, ?, ?, ?, ?, ?, ? , ?)";
					}

					ps = conn.prepareStatement(sSQL);

					NumberFormat formatter1 = new DecimalFormat("0000000.000");
					NumberFormat formatter2 = new DecimalFormat("000.000");

					ps.setDouble(
							1,
							new Double(formatter1.format(
									indicador.getNumHabViv().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setString(2, indicador.getPlaneamUrban());
					ps.setDouble(
							3,
							new Double(formatter1.format(
									indicador.getCapRegDer().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							4,
							new Double(formatter1.format(
									indicador.getCapRegEst().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							5,
							new Double(formatter1.format(
									indicador.getIndPuntosLuz().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setInt(6, indicador.getPobDefDer().intValue());
					ps.setInt(7, indicador.getPobDefEst().intValue());
					ps.setDouble(
							8,
							new Double(formatter2.format(
									indicador.getIndCapt().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							9,
							new Double(formatter2.format(
									indicador.getIndPot().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							10,
							new Double(formatter2.format(
									indicador.getIndDep().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							11,
							new Double(formatter2.format(
									indicador.getIndDist().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							12,
							new Double(formatter2.format(
									indicador.getIndSaneam().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							13,
							new Double(formatter2.format(
									indicador.getIndDepu().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							14,
							new Double(formatter2.format(
									indicador.getIndPav().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							15,
							new Double(formatter2.format(
									indicador.getIndAlum().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							16,
							new Double(formatter2.format(
									indicador.getIndBas().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							17,
							new Double(formatter2.format(
									indicador.getIndRes().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							18,
							new Double(formatter2.format(
									indicador.getIndCul().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							19,
							new Double(formatter2.format(
									indicador.getIndDepo().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							20,
							new Double(formatter2.format(
									indicador.getIndVer().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							21,
							new Double(formatter2.format(
									indicador.getIndAdm().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							22,
							new Double(formatter2.format(
									indicador.getIndGlobal().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							23,
							new Double(formatter1.format(
									indicador.getIndSupDer().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setDouble(
							24,
							new Double(formatter1.format(
									indicador.getIndSupEst().doubleValue())
									.replace(',', '.')).doubleValue());
					ps.setInt(25, indicador.getIdMunicipio().intValue());


				} catch (Exception e) {
					e.printStackTrace();
					throw new Exception(e.getMessage());

				} finally {
					safeClose(rs, ps, conn);
				}
			}

		}
	}

	private ArrayList getLstComarcas(Sesion userSesion) {

		ArrayList lstComarcas = new ArrayList();

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			GeopistaAcl acl = getPermission(userSesion,
					ConstantesLocalGISEIEL.ACL_INDICADORES, connection);
			if (!checkPerm(userSesion, acl,
					ConstantesLocalGISEIEL.PERM_LAYER_READ))
				throw new PermissionException("PermissionException: "
						+ ConstantesLocalGISEIEL.PERM_LAYER_READ);

			String sql = "select * from eiel_c_comarcas";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				ComarcaEIEL comarca = new ComarcaEIEL();

				comarca.setCodComarca(rs.getString("codcomarca"));
				comarca.setCodMunicCapital1(rs.getString("codmunic_capital1"));
				comarca.setCodMunicCapital2(rs.getString("codmunic_capital2"));
				comarca.setFechaRevision(rs.getDate("fecha_revision"));
				comarca.setHectareas(new Double(rs.getDouble("hectareas")));
				comarca.setIdMunicipio(new Integer(rs.getInt("id_municipio")));
				comarca.setNombreComarca(rs.getString("nombre_comarca"));
				comarca.setObservaciones(rs.getString("observ"));
				comarca.setPerimetro(new Double(rs.getDouble("perimetro")));
				comarca.setUsoUtm(new Integer(rs.getInt("uso_utm")));

				lstComarcas.add(comarca);

			}

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:"+ex);

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstComarcas;
	}

	private ArrayList getLstEstadoObrasComarcas(Sesion userSesion,
			ArrayList lstComarcas) {

		ArrayList lstIdMunicipios = new ArrayList();
		ArrayList lstIndComarcales = new ArrayList();

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		for (Iterator iterLstComarcas = lstComarcas.iterator(); iterLstComarcas
				.hasNext();) {

			Object object = iterLstComarcas.next();

			if (object instanceof ComarcaEIEL) {

				ComarcaEIEL comarca = (ComarcaEIEL) object;

				try {

					connection = CPoolDatabase.getConnection();
					if (connection == null) {
						return null;
					}

					String sql = "select * from eiel_c_municipios where id_comarca=?";

					statement = connection.prepareStatement(sql);
					statement.setString(1, comarca.getCodComarca());
					rs = statement.executeQuery();

					while (rs.next()) {

						String codProv = rs.getString("codprov");
						String codMunic = rs.getString("codmunic");

						codProv = LocalGISEIELUtils.completarConCeros(codProv, 2);
						codMunic = LocalGISEIELUtils.completarConCeros(codMunic, 3);

						Integer idMunicipio = new Integer(codProv + codMunic);

						EstadoObrasMunicipal indicador = getLstObrasMunicipales(
								userSesion, idMunicipio);

						lstIdMunicipios.add(indicador);

					}

					EstadoObrasComarcal indicadorComarcal = new EstadoObrasComarcal();
					indicadorComarcal.setIdComarca(comarca.getCodComarca());
					indicadorComarcal.setNomAyto(comarca.getNombreComarca());

					for (Iterator iterLstIndicadores = lstIdMunicipios
							.iterator(); iterLstIndicadores.hasNext();) {

						EstadoObrasMunicipal indMunic = (EstadoObrasMunicipal) iterLstIndicadores
								.next();

						if (indicadorComarcal.getAutorizadas() != null
								&& indMunic != null
								&& indMunic.getAutorizadas() != null) {
							indicadorComarcal.setAutorizadas(indicadorComarcal
									.getAutorizadas()
									+ indMunic.getAutorizadas());
						} else if (indMunic != null
								&& indMunic.getAutorizadas() != null) {
							indicadorComarcal.setAutorizadas(indMunic
									.getAutorizadas());
						}

						if (indicadorComarcal.getAnuladas() != null
								&& indMunic != null
								&& indMunic.getAnuladas() != null) {
							indicadorComarcal.setAnuladas(indicadorComarcal
									.getAnuladas() + indMunic.getAnuladas());
						} else if (indMunic != null
								&& indMunic.getAnuladas() != null) {
							indicadorComarcal.setAnuladas(indMunic
									.getAnuladas());
						}

						if (indicadorComarcal.getContratadas() != null
								&& indMunic != null
								&& indMunic.getContratadas() != null) {
							indicadorComarcal.setContratadas(indicadorComarcal
									.getContratadas()
									+ indMunic.getContratadas());
						} else if (indMunic != null
								&& indMunic.getContratadas() != null) {
							indicadorComarcal.setContratadas(indMunic
									.getContratadas());
						}

						if (indicadorComarcal.getEnEjecucion() != null
								&& indMunic != null
								&& indMunic.getEnEjecucion() != null) {
							indicadorComarcal.setEnEjecucion(indicadorComarcal
									.getEnEjecucion()
									+ indMunic.getEnEjecucion());
						} else if (indMunic != null
								&& indMunic.getEnEjecucion() != null) {
							indicadorComarcal.setEnEjecucion(indMunic
									.getEnEjecucion());
						}

						if (indicadorComarcal.getLiquidadas() != null
								&& indMunic != null
								&& indMunic.getLiquidadas() != null) {
							indicadorComarcal
									.setLiquidadas(indicadorComarcal
											.getLiquidadas()
											+ indMunic.getLiquidadas());
						} else if (indMunic != null
								&& indMunic.getLiquidadas() != null) {
							indicadorComarcal.setLiquidadas(indMunic
									.getLiquidadas());
						}

						if (indicadorComarcal.getRevocadas() != null
								&& indMunic != null
								&& indMunic.getRevocadas() != null) {
							indicadorComarcal.setRevocadas(indicadorComarcal
									.getRevocadas() + indMunic.getRevocadas());
						} else if (indMunic != null
								&& indMunic.getRevocadas() != null) {
							indicadorComarcal.setRevocadas(indMunic
									.getRevocadas());
						}

						if (indicadorComarcal.getTotal() != null
								&& indMunic != null
								&& indMunic.getTotal() != null) {
							indicadorComarcal.setTotal(indicadorComarcal
									.getTotal() + indMunic.getTotal());
						} else if (indMunic != null
								&& indMunic.getTotal() != null) {
							indicadorComarcal.setTotal(indMunic.getTotal());
						}
					}

					if (indicadorComarcal.getAutorizadas() != null
							&& lstIdMunicipios.size() > 1) {
						indicadorComarcal.setAutorizadas(indicadorComarcal
								.getAutorizadas() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setAutorizadas(new Integer(0));
					}

					if (indicadorComarcal.getAnuladas() != null
							&& lstIdMunicipios.size() > 1) {
						indicadorComarcal.setAnuladas(indicadorComarcal
								.getAnuladas() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setAnuladas(new Integer(0));
					}

					if (indicadorComarcal.getContratadas() != null
							&& lstIdMunicipios.size() > 1) {
						indicadorComarcal.setContratadas(indicadorComarcal
								.getContratadas() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setContratadas(new Integer(0));
					}

					if (indicadorComarcal.getEnEjecucion() != null
							&& lstIdMunicipios.size() > 1) {
						indicadorComarcal.setEnEjecucion(indicadorComarcal
								.getEnEjecucion() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setEnEjecucion(new Integer(0));
					}

					if (indicadorComarcal.getLiquidadas() != null
							&& lstIdMunicipios.size() > 1) {
						indicadorComarcal.setLiquidadas(indicadorComarcal
								.getLiquidadas() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setLiquidadas(new Integer(0));
					}

					if (indicadorComarcal.getRevocadas() != null
							&& lstIdMunicipios.size() > 1) {
						indicadorComarcal.setRevocadas(indicadorComarcal
								.getRevocadas() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setRevocadas(new Integer(0));
					}

					if (indicadorComarcal.getTotal() != null
							&& lstIdMunicipios.size() > 1) {
						indicadorComarcal
								.setTotal(indicadorComarcal.getTotal());
					} else {
						indicadorComarcal.setTotal(new Integer(0));
					}

					lstIndComarcales.add(indicadorComarcal);


				} catch (Exception ex) {

					logger.error("Error al ejecutar la sentencia:"+ex);

					StringWriter sw = new StringWriter();
					PrintWriter pw = new PrintWriter(sw);
					ex.printStackTrace(pw);
					ex.printStackTrace();
				}
				finally{
					safeClose(rs, statement, connection);
				}

			}

		}
		return lstIndComarcales;
	}

	private ArrayList getLstInversionMediaComarcas(Sesion userSesion,
			ArrayList lstComarcas) {

		ArrayList lstIdMunicipios = new ArrayList();
		ArrayList lstIndComarcales = new ArrayList();

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		for (Iterator iterLstComarcas = lstComarcas.iterator(); iterLstComarcas
				.hasNext();) {

			Object object = iterLstComarcas.next();

			if (object instanceof ComarcaEIEL) {

				ComarcaEIEL comarca = (ComarcaEIEL) object;

				try {

					connection = CPoolDatabase.getConnection();
					if (connection == null) {
						return null;
					}

					String sql = "select * from eiel_c_municipios where id_comarca=?";

					statement = connection.prepareStatement(sql);
					statement.setString(1, comarca.getCodComarca());
					rs = statement.executeQuery();

					while (rs.next()) {

						String codProv = rs.getString("codprov");
						String codMunic = rs.getString("codmunic");

						codProv = LocalGISEIELUtils.completarConCeros(codProv, 2);
						codMunic = LocalGISEIELUtils.completarConCeros(codMunic, 3);

						Integer idMunicipio = new Integer(codProv + codMunic);

						InvMediaMunicipal indicador = getInversionMediaMunicipales(
								userSesion, idMunicipio);

						lstIdMunicipios.add(indicador);

					}

					InvMediaComarcal indicadorComarcal = new InvMediaComarcal();
					indicadorComarcal.setIdComarca(comarca.getCodComarca());
					indicadorComarcal.setNomAyto(comarca.getNombreComarca());

					for (Iterator iterLstIndicadores = lstIdMunicipios
							.iterator(); iterLstIndicadores.hasNext();) {

						InvMediaMunicipal indMunic = (InvMediaMunicipal) iterLstIndicadores
								.next();

						if (indicadorComarcal.getPrto2005() != null
								&& indMunic != null
								&& indMunic.getPrto2005() != null) {
							indicadorComarcal.setPrto2005(indicadorComarcal
									.getPrto2005() + indMunic.getPrto2005());
						} else if (indMunic != null
								&& indMunic.getPrto2005() != null) {
							indicadorComarcal.setPrto2005(indMunic
									.getPrto2005());
						}

						if (indicadorComarcal.getPrto2006() != null
								&& indMunic != null
								&& indMunic.getPrto2006() != null) {
							indicadorComarcal.setPrto2006(indicadorComarcal
									.getPrto2006() + indMunic.getPrto2006());
						} else if (indMunic != null
								&& indMunic.getPrto2006() != null) {
							indicadorComarcal.setPrto2006(indMunic
									.getPrto2006());
						}

						if (indicadorComarcal.getPrto2007() != null
								&& indMunic != null
								&& indMunic.getPrto2007() != null) {
							indicadorComarcal.setPrto2007(indicadorComarcal
									.getPrto2007() + indMunic.getPrto2007());
						} else if (indMunic != null
								&& indMunic.getPrto2007() != null) {
							indicadorComarcal.setPrto2007(indMunic
									.getPrto2007());
						}

						if (indicadorComarcal.getPrto2008() != null
								&& indMunic != null
								&& indMunic.getPrto2008() != null) {
							indicadorComarcal.setPrto2008(indicadorComarcal
									.getPrto2008() + indMunic.getPrto2008());
						} else if (indMunic != null
								&& indMunic.getPrto2008() != null) {
							indicadorComarcal.setPrto2008(indMunic
									.getPrto2008());
						}

						if (indicadorComarcal.getPrto2009() != null
								&& indMunic != null
								&& indMunic.getPrto2009() != null) {
							indicadorComarcal.setPrto2009(indicadorComarcal
									.getPrto2009() + indMunic.getPrto2009());
						} else if (indMunic != null
								&& indMunic.getPrto2009() != null) {
							indicadorComarcal.setPrto2009(indMunic
									.getPrto2009());
						}

						if (indicadorComarcal.getInvHab() != null
								&& indMunic != null
								&& indMunic.getInvHab() != null) {
							indicadorComarcal.setInvHab(indicadorComarcal
									.getInvHab() + indMunic.getInvHab());
						} else if (indMunic != null
								&& indMunic.getInvHab() != null) {
							indicadorComarcal.setInvHab(indMunic.getInvHab());
						}

						if (indicadorComarcal.getInvMedAnual() != null
								&& indMunic != null
								&& indMunic.getInvMedAnual() != null) {
							indicadorComarcal.setInvMedAnual(indicadorComarcal
									.getInvMedAnual()
									+ indMunic.getInvMedAnual());
						} else if (indMunic != null
								&& indMunic.getInvMedAnual() != null) {
							indicadorComarcal.setInvMedAnual(indMunic
									.getInvMedAnual());
						}

						if (indicadorComarcal.getTotalInv() != null
								&& indMunic != null
								&& indMunic.getTotalInv() != null) {
							indicadorComarcal.setTotalInv(indicadorComarcal
									.getTotalInv() + indMunic.getTotalInv());
						} else if (indMunic != null
								&& indMunic.getTotalInv() != null) {
							indicadorComarcal.setTotalInv(indMunic
									.getTotalInv());
						}
					}

					if (indicadorComarcal.getPrto2005() != null
							&& lstIdMunicipios.size() > 0) {
						indicadorComarcal.setPrto2005(indicadorComarcal
								.getPrto2005() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setPrto2005(new Double(0));
					}

					if (indicadorComarcal.getPrto2006() != null
							&& lstIdMunicipios.size() > 0) {
						indicadorComarcal.setPrto2006(indicadorComarcal
								.getPrto2006() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setPrto2006(new Double(0));
					}

					if (indicadorComarcal.getPrto2007() != null
							&& lstIdMunicipios.size() > 0) {
						indicadorComarcal.setPrto2007(indicadorComarcal
								.getPrto2007() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setPrto2007(new Double(0));
					}

					if (indicadorComarcal.getPrto2008() != null
							&& lstIdMunicipios.size() > 1) {
						indicadorComarcal.setPrto2008(indicadorComarcal
								.getPrto2008() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setPrto2008(new Double(0));
					}

					if (indicadorComarcal.getPrto2009() != null
							&& lstIdMunicipios.size() > 0) {
						indicadorComarcal.setPrto2009(indicadorComarcal
								.getPrto2009() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setPrto2009(new Double(0));
					}

					if (indicadorComarcal.getInvHab() != null
							&& lstIdMunicipios.size() > 0) {
						indicadorComarcal.setInvHab(indicadorComarcal
								.getInvHab() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setInvHab(new Double(0));
					}

					if (indicadorComarcal.getInvMedAnual() != null
							&& lstIdMunicipios.size() > 0) {
						indicadorComarcal.setInvMedAnual(indicadorComarcal
								.getInvMedAnual() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setInvMedAnual(new Double(0));
					}

					if (indicadorComarcal.getTotalInv() != null
							&& lstIdMunicipios.size() > 0) {
						indicadorComarcal.setTotalInv(indicadorComarcal
								.getTotalInv() / lstIdMunicipios.size());
					} else {
						indicadorComarcal.setTotalInv(new Double(0));
					}

					lstIndComarcales.add(indicadorComarcal);


				} catch (Exception ex) {

					logger.error("Error al ejecutar la sentencia:"+ex);

					StringWriter sw = new StringWriter();
					PrintWriter pw = new PrintWriter(sw);
					ex.printStackTrace(pw);
					ex.printStackTrace();
				}
				finally{
					safeClose(rs, statement, connection);
				}

			}

		}
		return lstIndComarcales;
	}

	private ArrayList getLstIdMunicComarca(Sesion userSesion,
			ArrayList lstComarcas) {

		ArrayList lstIdMunicipios = new ArrayList();
		ArrayList lstIndComarcales = new ArrayList();

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		for (Iterator iterLstComarcas = lstComarcas.iterator(); iterLstComarcas
				.hasNext();) {

			Object object = iterLstComarcas.next();

			if (object instanceof ComarcaEIEL) {

				ComarcaEIEL comarca = (ComarcaEIEL) object;

				try {

					connection = CPoolDatabase.getConnection();
					if (connection == null) {
						return null;
					}

					String sql = "select * from eiel_c_municipios where id_comarca=?";

					statement = connection.prepareStatement(sql);
					statement.setString(1, comarca.getCodComarca());
					rs = statement.executeQuery();

					while (rs.next()) {

						String codProv = rs.getString("codprov");
						String codMunic = rs.getString("codmunic");

						codProv = LocalGISEIELUtils.completarConCeros(codProv, 2);
						codMunic = LocalGISEIELUtils.completarConCeros(codMunic, 3);

						Integer idMunicipio = new Integer(codProv + codMunic);

						IndicadorMunicipal indicador = getLstIndicesMunicipales(
								userSesion, idMunicipio);

						lstIdMunicipios.add(indicador);

					}

					IndicadorMunicipal indicadorComarcal = new IndicadorMunicipal();
					indicadorComarcal.setIdMunicipio(new Integer(comarca
							.getCodComarca()));

					for (Iterator iterLstIndicadores = lstIdMunicipios
							.iterator(); iterLstIndicadores.hasNext();) {

						IndicadorMunicipal indMunic = (IndicadorMunicipal) iterLstIndicadores
								.next();

						if (indicadorComarcal.getCapRegDer() != null) {
							indicadorComarcal.setCapRegDer(indicadorComarcal
									.getCapRegDer() + indMunic.getCapRegDer());
						} else {
							indicadorComarcal.setCapRegDer(indMunic
									.getCapRegDer());
						}

						if (indicadorComarcal.getCapRegEst() != null) {
							indicadorComarcal.setCapRegEst(indicadorComarcal
									.getCapRegEst() + indMunic.getCapRegEst());
						} else {
							indicadorComarcal.setCapRegEst(indMunic
									.getCapRegEst());
						}

						if (indicadorComarcal.getIndAdm() != null) {
							indicadorComarcal.setIndAdm(indicadorComarcal
									.getIndAdm() + indMunic.getIndAdm());
						} else {
							indicadorComarcal.setIndAdm(indMunic.getIndAdm());
						}

						if (indicadorComarcal.getIndAlum() != null) {
							indicadorComarcal.setIndAlum(indicadorComarcal
									.getIndAlum() + indMunic.getIndAlum());
						} else {
							indicadorComarcal.setIndAlum(indMunic.getIndAdm());
						}

						if (indicadorComarcal.getIndBas() != null) {
							indicadorComarcal.setIndBas(indicadorComarcal
									.getIndBas() + indMunic.getIndBas());
						} else {
							indicadorComarcal.setIndBas(indMunic.getIndBas());
						}

						if (indicadorComarcal.getIndCapt() != null) {
							indicadorComarcal.setIndCapt(indicadorComarcal
									.getIndCapt() + indMunic.getIndCapt());
						} else {
							indicadorComarcal.setIndCapt(indMunic.getIndCapt());
						}

						if (indicadorComarcal.getIndCul() != null) {
							indicadorComarcal.setIndCul(indicadorComarcal
									.getIndCul() + indMunic.getIndCul());
						} else {
							indicadorComarcal.setIndCul(indMunic.getIndCul());
						}

						if (indicadorComarcal.getIndCul() != null) {
							indicadorComarcal.setIndCul(indicadorComarcal
									.getIndCul() + indMunic.getIndCul());
						} else {
							indicadorComarcal.setIndCul(indMunic.getIndCul());
						}

						if (indicadorComarcal.getIndDep() != null) {
							indicadorComarcal.setIndDep(indicadorComarcal
									.getIndDep() + indMunic.getIndDep());
						} else {
							indicadorComarcal.setIndDep(indMunic.getIndDep());
						}

						if (indicadorComarcal.getIndDepo() != null) {
							indicadorComarcal.setIndDepo(indicadorComarcal
									.getIndDepo() + indMunic.getIndDepo());
						} else {
							indicadorComarcal.setIndDepo(indMunic.getIndDepo());
						}

						if (indicadorComarcal.getIndDepu() != null) {
							indicadorComarcal.setIndDepu(indicadorComarcal
									.getIndDepu() + indMunic.getIndDepu());
						} else {
							indicadorComarcal.setIndDepu(indMunic.getIndDepu());
						}

						if (indicadorComarcal.getIndDist() != null) {
							indicadorComarcal.setIndDist(indicadorComarcal
									.getIndDist() + indMunic.getIndDist());
						} else {
							indicadorComarcal.setIndDist(indMunic.getIndDist());
						}

						if (indicadorComarcal.getIndGlobal() != null) {
							indicadorComarcal.setIndGlobal(indicadorComarcal
									.getIndGlobal() + indMunic.getIndGlobal());
						} else {
							indicadorComarcal.setIndGlobal(indMunic
									.getIndGlobal());
						}

						if (indicadorComarcal.getIndPav() != null) {
							indicadorComarcal.setIndPav(indicadorComarcal
									.getIndPav() + indMunic.getIndPav());
						} else {
							indicadorComarcal.setIndPav(indMunic.getIndPav());
						}

						if (indicadorComarcal.getIndPot() != null) {
							indicadorComarcal.setIndPot(indicadorComarcal
									.getIndPot() + indMunic.getIndPot());
						} else {
							indicadorComarcal.setIndPot(indMunic.getIndPot());
						}

						if (indicadorComarcal.getIndPuntosLuz() != null) {
							indicadorComarcal.setIndPuntosLuz(indicadorComarcal
									.getIndPuntosLuz()
									+ indMunic.getIndPuntosLuz());
						} else {
							indicadorComarcal.setIndPuntosLuz(indMunic
									.getIndPuntosLuz());
						}

						if (indicadorComarcal.getIndRes() != null) {
							indicadorComarcal.setIndRes(indicadorComarcal
									.getIndRes() + indMunic.getIndRes());
						} else {
							indicadorComarcal.setIndRes(indMunic.getIndRes());
						}

						if (indicadorComarcal.getIndSaneam() != null) {
							indicadorComarcal.setIndSaneam(indicadorComarcal
									.getIndSaneam() + indMunic.getIndSaneam());
						} else {
							indicadorComarcal.setIndSaneam(indMunic
									.getIndSaneam());
						}

						if (indicadorComarcal.getIndSupDer() != null) {
							indicadorComarcal.setIndSupDer(indicadorComarcal
									.getIndSupDer() + indMunic.getIndSupDer());
						} else {
							indicadorComarcal.setIndSupDer(indMunic
									.getIndSupDer());
						}

						if (indicadorComarcal.getIndSupEst() != null) {
							indicadorComarcal.setIndSupEst(indicadorComarcal
									.getIndSupEst() + indMunic.getIndSupEst());
						} else {
							indicadorComarcal.setIndSupEst(indMunic
									.getIndSupEst());
						}

						if (indicadorComarcal.getIndVer() != null) {
							indicadorComarcal.setIndVer(indicadorComarcal
									.getIndVer() + indMunic.getIndVer());
						} else {
							indicadorComarcal.setIndVer(indMunic.getIndVer());
						}

						if (indicadorComarcal.getNumHabViv() != null) {
							indicadorComarcal.setNumHabViv(indicadorComarcal
									.getNumHabViv() + indMunic.getNumHabViv());
						} else {
							indicadorComarcal.setNumHabViv(indMunic
									.getNumHabViv());
						}

						if (indicadorComarcal.getPlaneamUrban() != null) {
							if (indicadorComarcal.getPlaneamUrban()
									.equals("SI")
									&& indMunic.getPlaneamUrban().equals("SI")) {

								indicadorComarcal.setPlaneamUrban("SI");
							} else {
								indicadorComarcal.setPlaneamUrban("NO");
							}
						} else {
							indicadorComarcal.setPlaneamUrban(indMunic
									.getPlaneamUrban());
						}

						if (indicadorComarcal.getPobDefDer() != null) {
							indicadorComarcal.setPobDefDer(indicadorComarcal
									.getPobDefDer() + indMunic.getPobDefDer());
						} else {
							indicadorComarcal.setPobDefDer(indMunic
									.getPobDefDer());
						}

						if (indicadorComarcal.getPobDefEst() != null) {
							indicadorComarcal.setPobDefEst(indicadorComarcal
									.getPobDefEst() + indMunic.getPobDefEst());
						} else {
							indicadorComarcal.setPobDefEst(indMunic
									.getPobDefEst());
						}
					}

					indicadorComarcal.setCapRegDer(indicadorComarcal
							.getCapRegDer() / lstIdMunicipios.size());
					indicadorComarcal.setCapRegEst(indicadorComarcal
							.getCapRegEst() / lstIdMunicipios.size());
					indicadorComarcal.setIndAdm(indicadorComarcal.getIndAdm()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndAlum(indicadorComarcal.getIndAlum()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndBas(indicadorComarcal.getIndBas()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndCapt(indicadorComarcal.getIndCapt()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndCul(indicadorComarcal.getIndCul()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndCul(indicadorComarcal.getIndCul()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndDep(indicadorComarcal.getIndDep()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndDepo(indicadorComarcal.getIndDepo()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndDepu(indicadorComarcal.getIndDepu()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndDist(indicadorComarcal.getIndDist()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndGlobal(indicadorComarcal
							.getIndGlobal() / lstIdMunicipios.size());
					indicadorComarcal.setIndPav(indicadorComarcal.getIndPav()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndPot(indicadorComarcal.getIndPot()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndPuntosLuz(indicadorComarcal
							.getIndPuntosLuz() / lstIdMunicipios.size());
					indicadorComarcal.setIndRes(indicadorComarcal.getIndRes()
							/ lstIdMunicipios.size());
					indicadorComarcal.setIndSaneam(indicadorComarcal
							.getIndSaneam() / lstIdMunicipios.size());
					indicadorComarcal.setIndSupDer(indicadorComarcal
							.getIndSupDer() / lstIdMunicipios.size());
					indicadorComarcal.setIndSupEst(indicadorComarcal
							.getIndSupEst() / lstIdMunicipios.size());
					indicadorComarcal.setIndVer(indicadorComarcal.getIndVer()
							/ lstIdMunicipios.size());
					indicadorComarcal.setNumHabViv(indicadorComarcal
							.getNumHabViv() / lstIdMunicipios.size());
					indicadorComarcal.setPobDefDer(Math.round(indicadorComarcal
							.getPobDefDer() / lstIdMunicipios.size()));
					indicadorComarcal.setPobDefEst(Math.round(indicadorComarcal
							.getPobDefEst() / lstIdMunicipios.size()));

					lstIndComarcales.add(indicadorComarcal);


				} catch (Exception ex) {

					logger.error("Error al ejecutar la sentencia:"+ex);

					StringWriter sw = new StringWriter();
					PrintWriter pw = new PrintWriter(sw);
					ex.printStackTrace(pw);
					ex.printStackTrace();
				}
				finally{
					safeClose(rs, statement, connection);
				}
			}
		}

		return lstIndComarcales;
	}

	private void insertarIndicesComarcales(ArrayList lstIndComarcales)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;

		for (Iterator iterLstIndComarcales = lstIndComarcales.iterator(); iterLstIndComarcales
				.hasNext();) {

			Object object = iterLstIndComarcales.next();

			if (object instanceof IndicadorMunicipal) {

				IndicadorMunicipal indicadorComarcal = (IndicadorMunicipal) object;
				try {

					sSQL = "select * from indicadores_comarcales where id_comarca=?";

					conn = CPoolDatabase.getConnection();
					ps = conn.prepareStatement(sSQL);
					ps.setInt(1, indicadorComarcal.getIdMunicipio().intValue());

					rs = ps.executeQuery();

					if (rs.next()) {

						sSQL = "update indicadores_comarcales set num_hab_viv=?, planeam_urban=?, cap_reg_der=?, cap_reg_est=?, ind_puntos_luz=?,"
								+ " pob_def_der=?, pob_def_est=?, ind_capt=?, ind_pot=?, ind_dep=?, ind_dist=?, ind_saneam=?, ind_depu=?, "
								+ "ind_pav=?, ind_alum=?, ind_bas=?, ind_res=?, ind_cul=?, ind_depo=?, ind_ver=?, ind_adm=?, ind_global=?, "
								+ "ind_sup_der=?, ind_sup_est=? where id_comarca=?";
					} else {

						sSQL = "insert into indicadores_comarcales (num_hab_viv, planeam_urban, cap_reg_der, cap_reg_est, ind_puntos_luz,"
								+ " pob_def_der, pob_def_est, ind_capt, ind_pot, ind_dep, ind_dist, ind_saneam, ind_depu, "
								+ "ind_pav, ind_alum, ind_bas, ind_res, ind_cul, ind_depo, ind_ver, ind_adm, ind_global, "
								+ "ind_sup_der, ind_sup_est, id_comarca) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
								+ "?, ?, ?, ?, ?, ?, ? , ?)";
					}

					ps = conn.prepareStatement(sSQL);

					NumberFormat formatter1 = new DecimalFormat("0000000.00");
					NumberFormat formatter2 = new DecimalFormat("000.00");

					ps.setDouble(
							1,
							new Double(formatter1.format(
									indicadorComarcal.getNumHabViv()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setString(2, indicadorComarcal.getPlaneamUrban());
					ps.setDouble(
							3,
							new Double(formatter1.format(
									indicadorComarcal.getCapRegDer()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							4,
							new Double(formatter1.format(
									indicadorComarcal.getCapRegEst()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							5,
							new Double(formatter1.format(
									indicadorComarcal.getIndPuntosLuz()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setInt(6, indicadorComarcal.getPobDefDer().intValue());
					ps.setInt(7, indicadorComarcal.getPobDefEst().intValue());
					ps.setDouble(
							8,
							new Double(formatter2.format(
									indicadorComarcal.getIndCapt()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							9,
							new Double(formatter2
									.format(indicadorComarcal.getIndPot()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							10,
							new Double(formatter2
									.format(indicadorComarcal.getIndDep()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							11,
							new Double(formatter2.format(
									indicadorComarcal.getIndDist()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							12,
							new Double(formatter2.format(
									indicadorComarcal.getIndSaneam()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							13,
							new Double(formatter2.format(
									indicadorComarcal.getIndDepu()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							14,
							new Double(formatter2
									.format(indicadorComarcal.getIndPav()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							15,
							new Double(formatter2.format(
									indicadorComarcal.getIndAlum()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							16,
							new Double(formatter2
									.format(indicadorComarcal.getIndBas()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							17,
							new Double(formatter2
									.format(indicadorComarcal.getIndRes()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							18,
							new Double(formatter2
									.format(indicadorComarcal.getIndCul()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							19,
							new Double(formatter2.format(
									indicadorComarcal.getIndDepo()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							20,
							new Double(formatter2
									.format(indicadorComarcal.getIndVer()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							21,
							new Double(formatter2
									.format(indicadorComarcal.getIndAdm()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							22,
							new Double(formatter2.format(
									indicadorComarcal.getIndGlobal()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							23,
							new Double(formatter1.format(
									indicadorComarcal.getIndSupDer()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setDouble(
							24,
							new Double(formatter1.format(
									indicadorComarcal.getIndSupEst()
											.doubleValue()).replace(',', '.'))
									.doubleValue());
					ps.setInt(25, indicadorComarcal.getIdMunicipio().intValue());

					ps.execute();


				} catch (Exception e) {
					e.printStackTrace();
					throw new Exception(e.getMessage());

				} finally {
					safeClose(rs, ps, conn);
				}
			}

		}
	}

	private void insertarEstadoObrasComarcales(ArrayList lstIndComarcales)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;

		for (Iterator iterLstIndComarcales = lstIndComarcales.iterator(); iterLstIndComarcales
				.hasNext();) {

			Object object = iterLstIndComarcales.next();

			if (object instanceof EstadoObrasComarcal) {

				EstadoObrasComarcal indicadorComarcal = (EstadoObrasComarcal) object;
				try {

					sSQL = "select * from estado_obras_comarcal where id_comarca=?";

					conn = CPoolDatabase.getConnection();
					ps = conn.prepareStatement(sSQL);
					ps.setString(1, indicadorComarcal.getIdComarca());

					rs = ps.executeQuery();

					if (rs.next()) {

						sSQL = "update estado_obras_comarcal set nomayto=?, autorizadas=?, anuladas=?, contratadas=?, enejecucion=?, revocadas=?, liquidadas=?, total=? where id_comarca=?";
					} else {

						sSQL = "insert into estado_obras_comarcal (nomayto, autorizadas, anuladas, contratadas, enejecucion, revocadas, liquidadas, total, id_comarca) "
								+ "values (?, ?, ?, ?, ?, ?, ?, ?, ?)";
					}

					ps = conn.prepareStatement(sSQL);

					ps.setString(1, indicadorComarcal.getNomAyto());
					ps.setInt(2,
							new Integer(indicadorComarcal.getAutorizadas())
									.intValue());
					ps.setInt(3, new Integer(indicadorComarcal.getAnuladas())
							.intValue());
					ps.setInt(4,
							new Integer(indicadorComarcal.getContratadas())
									.intValue());
					ps.setInt(5,
							new Integer(indicadorComarcal.getEnEjecucion())
									.intValue());
					ps.setInt(6, new Integer(indicadorComarcal.getRevocadas())
							.intValue());
					ps.setInt(7, new Integer(indicadorComarcal.getLiquidadas())
							.intValue());
					ps.setInt(8, new Integer(indicadorComarcal.getTotal())
							.intValue());

					ps.setString(9, indicadorComarcal.getIdComarca());

					ps.execute();

				} catch (Exception e) {
					e.printStackTrace();
					throw new Exception(e.getMessage());

				} finally {
					safeClose(rs, ps, conn);
				}
			}

		}
	}

	private void insertarInvMediaComarcales(ArrayList lstIndComarcales)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;

		for (Iterator iterLstIndComarcales = lstIndComarcales.iterator(); iterLstIndComarcales
				.hasNext();) {

			Object object = iterLstIndComarcales.next();

			if (object instanceof InvMediaComarcal) {

				InvMediaComarcal indicadorComarcal = (InvMediaComarcal) object;
				try {

					sSQL = "select * from inv_media_anual_comarcal where id_comarca=?";

					conn = CPoolDatabase.getConnection();
					ps = conn.prepareStatement(sSQL);
					ps.setString(1, indicadorComarcal.getIdComarca());

					rs = ps.executeQuery();

					if (rs.next()) {

						sSQL = "update inv_media_anual_comarcal set prto2005=?, prto2006=?, prto2007=?, prto2008=?, prto2009=?, totalinv=?, invmedanual=?, invhab=? where id_comarca=?";
					} else {

						sSQL = "insert into inv_media_anual_comarcal (prto2005, prto2006, prto2007, prto2008, prto2009, totalinv, invmedanual, invhab, id_comarca) "
								+ "values (?, ?, ?, ?, ?, ?,?,?,?)";
					}

					ps = conn.prepareStatement(sSQL);

					ps.setDouble(1, new Double(indicadorComarcal.getPrto2005())
							.doubleValue());
					ps.setDouble(2, new Double(indicadorComarcal.getPrto2006())
							.doubleValue());
					ps.setDouble(3, new Double(indicadorComarcal.getPrto2007())
							.doubleValue());
					ps.setDouble(4, new Double(indicadorComarcal.getPrto2008())
							.doubleValue());
					ps.setDouble(5, new Double(indicadorComarcal.getPrto2009())
							.doubleValue());
					ps.setDouble(6, new Double(indicadorComarcal.getTotalInv())
							.doubleValue());
					ps.setDouble(7,
							new Double(indicadorComarcal.getInvMedAnual())
									.doubleValue());
					ps.setDouble(8, new Double(indicadorComarcal.getInvHab())
							.doubleValue());
					ps.setString(9, indicadorComarcal.getIdComarca());

					ps.execute();

				} catch (Exception e) {
					e.printStackTrace();
					throw new Exception(e.getMessage());

				} finally {
					safeClose(rs, ps, conn);
				}
			}

		}
	}

	 public void validacionMPT(ObjectOutputStream oos, Sesion userSesion, String fase,
			 Integer idMunicipio, int cuadro, ArrayList lstValCuadros)
			 throws Exception{
			
		 try
		 {
			 
			 StringBuffer str = new StringBuffer();
				ValidacionDatos.validacion(str, userSesion, fase, idMunicipio, cuadro ,lstValCuadros);
			 
			System.out.println((new StringBuilder("envio str--")).append((new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")).format(new Date(System.currentTimeMillis()))).toString());
			 oos.writeObject(str.toString().getBytes("UTF8"));
			
			 System.out.println((new StringBuilder("enviado str--")).append((new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")).format(new Date(System.currentTimeMillis()))).toString());
		
		 }
		 catch(Exception e)
		 {
			 logger.error("validacionMPT: "+ e.getMessage());
			 oos.writeObject(new ACException(e));
			 throw e;
		 }
	}
	 
	 
	 public void obtenerPoblamientosMPT(ObjectOutputStream oos,Sesion userSesion, String provincia, ArrayList lstIdMunicipios) throws Exception {
		 ArrayList lstPoblamientos = new ArrayList();
		 StringBuffer whereMunicipios = new StringBuffer();
		 Connection conn = null;
		 PreparedStatement ps = null;
		 ResultSet rs = null;
		 String sSQL = null;
		 try {
			 conn = CPoolDatabase.getConnection();
			
			
			 if (lstIdMunicipios.size() != 0){
				 whereMunicipios.append("AND codmunic IN (");
			
				 for (int i=0; i<lstIdMunicipios.size(); i++){
					 whereMunicipios.append("'"+lstIdMunicipios.get(i)+"'");
					 if(i!=(lstIdMunicipios.size()-1)){
						 whereMunicipios.append(",");
					 }
				 }
				 whereMunicipios.append(")");
			 }
			 sSQL = "SELECT DISTINCT codprov, codmunic, codentidad, codpoblamiento, nombre_oficial  FROM "+eiel_c_nucleo_poblacion+" " +
		 		"WHERE codprov= '"+provincia+"' "+ whereMunicipios +" ORDER BY codprov,codmunic,codentidad,codpoblamiento";
			 
			ps = conn.prepareStatement(sSQL);
			rs = ps.executeQuery();
			
			while (rs.next()) {
				Poblamiento_bean poblamiento_bean = new Poblamiento_bean();
				poblamiento_bean.setProvincia(rs.getString("codprov"));
				poblamiento_bean.setMunicipio(rs.getString("codmunic"));
				poblamiento_bean.setEntidad(rs.getString("codentidad"));
				poblamiento_bean.setPoblamient(rs.getString("codpoblamiento"));
				poblamiento_bean.setDenominacion(rs.getString("nombre_oficial"));
				lstPoblamientos.add(poblamiento_bean);
				
			}
			oos.writeObject(lstPoblamientos);
			 
		 }
		 catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());

		} finally {
			safeClose(rs, ps, conn);
		}
	 }
	 
	 public void obtenerCuadrosMPT(ObjectOutputStream oos,Sesion userSesion) throws Exception {
		 ArrayList lstCuadros = new ArrayList();
		 Connection conn = null;
		 PreparedStatement ps = null;
		 ResultSet rs = null;
		 String sSQL = null;
		 try {
			 conn = CPoolDatabase.getConnection();
			if (conn == null) {
				//return null;
			}
				
			 sSQL = "SELECT * FROM eiel_reports";
			 
			ps = conn.prepareStatement(sSQL);
			rs = ps.executeQuery();
			
			while (rs.next()) {
				CuadrosMPTBean cuadosMpt = new CuadrosMPTBean();
				cuadosMpt.setId(rs.getInt("id"));
				cuadosMpt.setNamejrxml(rs.getString("namejrxml"));
				cuadosMpt.setNombre(rs.getString("nombre"));
				cuadosMpt.setTabla(rs.getString("tabla"));
				cuadosMpt.setTablasec(rs.getString("tablasec"));
				lstCuadros.add(cuadosMpt);
				
			}	 

			oos.writeObject(lstCuadros);
			 
		 } catch (Exception e) {
				e.printStackTrace();
				throw new Exception(e.getMessage());

			} finally {
				safeClose(rs, ps, conn);
			}
			
	 }
	 
	 public void obtenerValidacionesMPT(ObjectOutputStream oos,Sesion userSesion) throws Exception {
		 ArrayList lstValidaciones = new ArrayList();
		 Connection conn = null;
		 PreparedStatement ps = null;
		 ResultSet rs = null;
		 String sSQL = null;
		 try {
			 conn = CPoolDatabase.getConnection();
			if (conn == null) {
				//return null;
			}
				
			sSQL = "SELECT * FROM eiel_validacionesporcuadompt ORDER BY id";
			
			ps = conn.prepareStatement(sSQL);
			rs = ps.executeQuery();
			ArrayList lstvalidacuadrosmpt = new ArrayList();
			while (rs.next()) {
				ValidacionesPorCuadrosMPTBean vpcmpt = new ValidacionesPorCuadrosMPTBean();
				vpcmpt.setId(rs.getInt("id"));
				vpcmpt.setNombre(rs.getString("nombre"));
				vpcmpt.setCuadroid(rs.getInt("id_validacionesmpt"));
				lstvalidacuadrosmpt.add(vpcmpt);
			}
			
			
			
			sSQL = "SELECT * FROM eiel_validacionesmpt ORDER BY id";
			 
			ps = conn.prepareStatement(sSQL);
			rs = ps.executeQuery();
			
			while (rs.next()) {
				ValidacionesMPTBean validacionMpt = new ValidacionesMPTBean();
				validacionMpt.setId(rs.getInt("id"));
				validacionMpt.setNombre(rs.getString("nombre"));
				validacionMpt.setTabla(rs.getString("tabla"));
				
				for(int i=0; i<lstvalidacuadrosmpt.size(); i++){
					if(((ValidacionesPorCuadrosMPTBean)lstvalidacuadrosmpt.get(i)).getCuadroid() ==
						validacionMpt.getId()){
						validacionMpt.getLstvalidacuadros().add(((ValidacionesPorCuadrosMPTBean)lstvalidacuadrosmpt.get(i)));
					}
				}
				lstValidaciones.add(validacionMpt);
			}	 
			oos.writeObject(lstValidaciones);
			 
		 } catch (Exception e) {
				e.printStackTrace();
				throw new Exception(e.getMessage());

			} finally {
				safeClose(rs, ps, conn);
			}
			
	 }
	 
	public void exportMPT(ObjectOutputStream oos,Sesion userSesion,String fase) throws Exception {
		
		 try
		 {		
	//chequeo Permiso		
		//		GeopistaAcl acl = getPermission(userSesion,
		//				ConstantesLocalGISEIEL.AC, connection);
		//		if (!checkPerm(userSesion, acl,
		//				ConstantesLocalGISEIEL.PERM_LAYER_READ))
		//			throw new PermissionException("PermissionException: "
		//					+ ConstantesLocalGISEIEL.PERM_LAYER_READ);	
				///Rellenamos los objetos a partir de las vistas y obtenemos un hash
				//con el nombre del fichero y el array de datos que se exportará
			 
		ArrayList<ArrayList> datosMPT=getDataFromViews();
		
		//Escribir datos en ficheros
		ArrayList<String>nombreFiles=new ArrayList<String>(83);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEALUMBRADO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECABILDO_CONSEJO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECAP_AGUA_NUCLEO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECAPTACION_AGUA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECAPTACION_ENC);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECAPTACION_ENC_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECARRETERA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECASA_CON_USO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECASA_CONSISTORIAL);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECEMENTERIO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECENT_CULTURAL);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECENT_CULTURAL_USOS);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECENTRO_ASISTENCIAL);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECENTRO_ENSENANZA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECENTRO_SANITARIO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECOLECTOR);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECOLECTOR_ENC);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECOLECTOR_ENC_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECOLECTOR_NUCLEO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECOND_AGUA_NUCLEO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECONDUCCION);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECONDUCCION_ENC);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMECONDUCCION_ENC_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEP_AGUA_NUCLEO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEPOSITO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEPOSITO_AGUA_NUCLEO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEPOSITO_ENC);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEPOSITO_ENC_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEPURADORA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEPURADORA_ENC);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEPURADORA_ENC_2);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEPURADORA_ENC_2_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEDEPURADORA_ENC_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEEDIFIC_PUB_SIN_USO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEEMISARIO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEEMISARIO_ENC);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEEMISARIO_ENC_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEEMISARIO_NUCLEO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEENTIDAD_SINGULAR);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEINFRAESTR_VIARIA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEINST_DEPOR_DEPORTE);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEINSTAL_DEPORTIVA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMELONJA_MERC_FERIA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEMATADERO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEMUN_ENC_DIS);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEMUNICIPIO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENIVEL_ENSENANZA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENUC_ABANDONADO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENUCL_ENCUESTADO_1);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENUCL_ENCUESTADO_2);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENUCL_ENCUESTADO_3);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENUCL_ENCUESTADO_4);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENUCL_ENCUESTADO_5);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENUCL_ENCUESTADO_6);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENUCL_ENCUESTADO_7);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMENUCLEO_POBLACION);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEOT_SERV_MUNICIPAL);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEPADRON);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEPARQUE);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEPLAN_URBANISTICO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEPOBLAMIENTO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEPOTABILIZACION_ENC);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEPOTABILIZACION_ENC_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEPROTECCION_CIVIL);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEPROVINCIA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMERAMAL_SANEAMIENTO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMERECOGIDA_BASURA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMERED_DISTRIBUCION);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMESANEA_AUTONOMO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETANATORIO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETRA_POTABILIZACION);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETRAMO_CARRETERA);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETRAMO_COLECTOR);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETRAMO_COLECTOR_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETRAMO_CONDUCCION);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETRAMO_CONDUCCION_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETRAMO_EMISARIO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETRAMO_EMISARIO_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMETRAT_POTA_NUCLEO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEVERT_ENCUESTADO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEVERT_ENCUESTADO_M50);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEVERTEDERO);
		nombreFiles.add(ConstantesLocalGISEIEL.FILENAMEVERTEDERO_NUCLEO);


		ByteArrayOutputStream archvingByteArray = new ByteArrayOutputStream();
		ZipOutputStream os = new ZipOutputStream(archvingByteArray);
		os.setLevel(Deflater.DEFAULT_COMPRESSION);
		os.setMethod(Deflater.DEFLATED);
		
		for (int j = 0; j < datosMPT.size(); j++) {
			
			ArrayList listatypos = datosMPT.get(j);
			String outputFile = nombreFiles.get(j);
			//Abrir Fichero
			
			
			ZipEntry entrada = new ZipEntry(outputFile);
			os.putNextEntry(entrada);
				
		 
				
				for (int i = 0; i < listatypos.size(); i++) {
					Object element=listatypos.get(i);

					ArrayList valores=null;
					OrderToMPT ordenacion=new OrderToMPT();
					valores=ordenacion.getOrder(element);							
					String rowToInsertInFile=LocalGISEIELUtils.getRowToMPT(fase, "|", valores);//la fase se recogerá como parametro.
					if(i==listatypos.size()-1)
						rowToInsertInFile=rowToInsertInFile;
					else{
						rowToInsertInFile=rowToInsertInFile+"\r\n";
					}
					try {	
					     os.write(rowToInsertInFile.getBytes());
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}				

				os.closeEntry();
			}
			
			os.flush();
			os.close();
			oos.writeObject(archvingByteArray.toByteArray());

			
		 }
		 catch(Exception e)
		 {
			 logger.error("exportMPT: "+ e.getMessage());
			 oos.writeObject(new ACException(e));
			 throw e;
		 }
		
		
	}


	public ArrayList getDataFromViews() {

		ArrayList lstType = new ArrayList();
		ArrayList datosMPT=new ArrayList();

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}


			String sql = "select * from v_alumbrado order by provincia,municipio,entidad,nucleo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			String provincia=null,municipio=null,entidad=null,nucleo=null;
			
			while (rs.next()) 
			{
							
					V_alumbrado_bean alumbradoBean = new V_alumbrado_bean();
					lstType.add(alumbradoBean);
					alumbradoBean.setProvincia(rs.getString("provincia"));
					provincia=rs.getString("provincia");
					alumbradoBean.setMunicipio(rs.getString("municipio"));
					municipio=rs.getString("municipio");
					alumbradoBean.setEntidad(rs.getString("entidad"));
					entidad=rs.getString("entidad");
					alumbradoBean.setNucleo(rs.getString("nucleo"));
					nucleo=rs.getString("nucleo");
					alumbradoBean.setAh_ener_rl(rs.getString("ah_ener_rl"));
					alumbradoBean.setAh_ener_ri(rs.getString("ah_ener_ri"));
					alumbradoBean.setCalidad(rs.getString("calidad"));
					if(rs.getString("pot_instal")!=null&&!rs.getString("pot_instal").equals(""))
						alumbradoBean.setPot_instal(Double.parseDouble(rs.getString("pot_instal") ));
					else
						alumbradoBean.setPot_instal(0.0);
					alumbradoBean.setPuntos_luz(rs.getInt("n_puntos"));
					
			}
			datosMPT.add(lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_cabildo_consejo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_cabildo_consejo_bean cabildo_consejoBean = new V_cabildo_consejo_bean();

				cabildo_consejoBean.setProvincia(rs.getString("provincia"));
				cabildo_consejoBean.setIsla("00");//rs.getString("isla"));
				if(rs.getString("denominaci")!=null)
					cabildo_consejoBean.setDenominaci(rs.getString("denominaci"));
				else
					cabildo_consejoBean.setDenominaci("-");

				lstType.add(cabildo_consejoBean);

			}
			datosMPT.add(lstType);
			lstType=new ArrayList();
			sql = "select * from v_cap_agua_nucleo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_cap_agua_nucleo_bean cap_agua_nucleoBean = new V_cap_agua_nucleo_bean();

				cap_agua_nucleoBean.setProvincia(rs.getString("provincia"));
				cap_agua_nucleoBean.setMunicipio(rs.getString("municipio"));
				cap_agua_nucleoBean.setEntidad(rs.getString("entidad"));
				cap_agua_nucleoBean.setNucleo(rs.getString("nucleo"));
				cap_agua_nucleoBean.setClave(rs.getString("clave"));
				cap_agua_nucleoBean.setC_provinc(rs.getString("c_provinc"));
				cap_agua_nucleoBean.setC_municip(rs.getString("c_municip"));
				cap_agua_nucleoBean.setOrden_capt(rs.getString("orden_capt"));

				lstType.add(cap_agua_nucleoBean);

			}
			datosMPT.add( lstType);
			lstType=new ArrayList();
			sql = "select * from v_captacion_agua ";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_captacion_agua_bean captacion_aguaBean = new V_captacion_agua_bean();

				captacion_aguaBean.setClave(rs.getString("clave"));
				captacion_aguaBean.setProvincia(rs.getString("provincia"));
				captacion_aguaBean.setMunicipio(rs.getString("municipio"));
				captacion_aguaBean.setOrden_capt(rs.getString("orden_capt"));

				lstType.add(captacion_aguaBean);

			}
			datosMPT.add(  lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_captacion_enc ";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_captacion_enc_bean captacion_encBean = new V_captacion_enc_bean();

				captacion_encBean.setProvincia(rs.getString("provincia"));
				captacion_encBean.setMunicipio(rs.getString("municipio"));
				captacion_encBean.setClave(rs.getString("clave"));
				captacion_encBean.setOrden_capt(rs.getString("orden_capt"));
				if(rs.getString("denominaci")!=null)
					captacion_encBean.setDenominaci(rs.getString("denominaci"));
				else
					captacion_encBean.setDenominaci("-");
				captacion_encBean.setTipo_capt(rs.getString("tipo_capt"));
				captacion_encBean.setTitular(rs.getString("titular"));
				captacion_encBean.setGestion(rs.getString("gestion"));
				captacion_encBean.setSistema_ca(rs.getString("sistema_ca"));
				captacion_encBean.setEstado(rs.getString("estado"));
				captacion_encBean.setUso(rs.getString("uso"));
				captacion_encBean.setProteccion(rs.getString("proteccion"));
				captacion_encBean.setContador(rs.getString("contador"));

				lstType.add(captacion_encBean);

			}
			
			datosMPT.add(  lstType);
			lstType=new ArrayList();
		
			sql = "select * from v_captacion_enc_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_captacion_enc_m50_bean captacion_enc_m50Bean = new V_captacion_enc_m50_bean();

				captacion_enc_m50Bean.setProvincia(rs.getString("provincia"));
				captacion_enc_m50Bean.setMunicipio(rs.getString("municipio"));
				captacion_enc_m50Bean.setClave(rs.getString("clave"));
				captacion_enc_m50Bean.setOrden_capt(rs.getString("orden_capt"));
				if(rs.getString("denominaci")!=null)
					captacion_enc_m50Bean.setDenominaci(rs.getString("denominaci"));
				else
					captacion_enc_m50Bean.setDenominaci("-");
				captacion_enc_m50Bean.setTipo_capt(rs.getString("tipo_capt"));
				captacion_enc_m50Bean.setTitular(rs.getString("titular"));
				captacion_enc_m50Bean.setGestion(rs.getString("gestion"));
				captacion_enc_m50Bean.setSistema_ca(rs.getString("sistema_ca"));
				captacion_enc_m50Bean.setEstado(rs.getString("estado"));
				captacion_enc_m50Bean.setUso(rs.getString("uso"));
				captacion_enc_m50Bean.setProteccion(rs.getString("proteccion"));
				captacion_enc_m50Bean.setContador(rs.getString("contador"));

				lstType.add(captacion_enc_m50Bean);

			}

			datosMPT.add(  lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_carretera";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_carretera_bean carreteraBean = new V_carretera_bean();

				carreteraBean.setProvincia(rs.getString("provincia"));
				carreteraBean.setCod_carrt(rs.getString("cod_carrt"));
				if(rs.getString("denominaci")!=null)
					carreteraBean.setDenominaci(rs.getString("denominaci"));
				else
					carreteraBean.setDenominaci("-");
				
				lstType.add(carreteraBean);

			}
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_casa_con_uso";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_casa_con_uso_bean casa_con_usoBean = new V_casa_con_uso_bean();

				casa_con_usoBean.setClave(rs.getString("clave"));
				casa_con_usoBean.setProvincia(rs.getString("provincia"));
				casa_con_usoBean.setMunicipio(rs.getString("municipio"));
				casa_con_usoBean.setEntidad(rs.getString("entidad"));
				casa_con_usoBean.setPoblamient(rs.getString("poblamient"));
				casa_con_usoBean.setOrden_casa(rs.getString("orden_casa"));
				casa_con_usoBean.setUso(rs.getString("uso"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					casa_con_usoBean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					casa_con_usoBean.setS_cubi(0);
				lstType.add(casa_con_usoBean);

			}
			datosMPT.add(  lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_casa_consistorial";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_casa_consitorial_bean casa_consitorialBean = new V_casa_consitorial_bean();

				casa_consitorialBean.setClave(rs.getString("clave"));
				casa_consitorialBean.setProvincia(rs.getString("provincia"));
				casa_consitorialBean.setMunicipio(rs.getString("municipio"));
				casa_consitorialBean.setEntidad(rs.getString("entidad"));
				casa_consitorialBean.setPoblamient(rs.getString("poblamient"));
				casa_consitorialBean.setOrden_casa(rs.getString("orden_casa"));
				casa_consitorialBean.setNombre(rs.getString("nombre"));
				casa_consitorialBean.setTipo(rs.getString("tipo"));
				casa_consitorialBean.setTitular(rs.getString("titular"));
				casa_consitorialBean.setTenencia(rs.getString("tenencia"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					casa_consitorialBean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					casa_consitorialBean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					casa_consitorialBean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					casa_consitorialBean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					casa_consitorialBean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					casa_consitorialBean.setS_sola(0);

				casa_consitorialBean.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				casa_consitorialBean.setEstado(rs.getString("estado"));


				lstType.add(casa_consitorialBean);

			}
			datosMPT.add(  lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_cementerio";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_cementerio_bean cementerioBean = new V_cementerio_bean();

				cementerioBean.setClave(rs.getString("clave"));
				cementerioBean.setProvincia(rs.getString("provincia"));
				cementerioBean.setMunicipio(rs.getString("municipio"));
				cementerioBean.setEntidad(rs.getString("entidad"));
				cementerioBean.setPoblamient(rs.getString("poblamient"));
				cementerioBean.setOrden_ceme(rs.getString("orden_ceme"));
				cementerioBean.setNombre(rs.getString("nombre"));
				cementerioBean.setTitular(rs.getString("titular"));
				if(rs.getString("distancia")!=null&&!rs.getString("distancia").equals(""))
					cementerioBean.setDistancia(Double.parseDouble(rs.getString("distancia")));//KM 
				else
					cementerioBean.setDistancia(Double.parseDouble("0.0"));

				cementerioBean.setAcceso(rs.getString("acceso"));
				cementerioBean.setCapilla(rs.getString("capilla"));
				cementerioBean.setDeposito(rs.getString("deposito"));
				cementerioBean.setAmpliacion(rs.getString("ampliacion"));
				if(rs.getString("saturacion")!=null&&!rs.getString("saturacion").equals(""))
					cementerioBean.setSaturacion(new Integer((int) Math.rint(new Double(rs.getString("saturacion")))));//%
				else
					cementerioBean.setSaturacion(Integer.parseInt(rs.getString("0") ));
				if(rs.getString("superficie")!=null&&!rs.getString("superficie").equals(""))
					cementerioBean.setSuperficie(new Integer(rs.getString("superficie")));
				else
					cementerioBean.setSuperficie(0);
				cementerioBean.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				cementerioBean.setCrematorio(rs.getString("crematorio"));

				lstType.add(cementerioBean);

			}	
			
			datosMPT.add(  lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_cent_cultural";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_cent_cultural_bean cent_culturalBean = new V_cent_cultural_bean();

				cent_culturalBean.setClave(rs.getString("clave"));
				cent_culturalBean.setProvincia(rs.getString("provincia"));
				cent_culturalBean.setMunicipio(rs.getString("municipio"));
				cent_culturalBean.setEntidad(rs.getString("entidad"));
				cent_culturalBean.setPoblamient(rs.getString("poblamient"));
				cent_culturalBean.setOrden_cent(rs.getString("orden_cent"));
				cent_culturalBean.setNombre(rs.getString("nombre"));
				cent_culturalBean.setTipo_cent(rs.getString("tipo_cent"));
				cent_culturalBean.setTitular(rs.getString("titular"));
				cent_culturalBean.setGestion(rs.getString("GESTION"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					cent_culturalBean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					cent_culturalBean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					cent_culturalBean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					cent_culturalBean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					cent_culturalBean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					cent_culturalBean.setS_sola(0);
				cent_culturalBean.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				cent_culturalBean.setEstado(rs.getString("estado"));

				lstType.add(cent_culturalBean);
				
			}
			
			datosMPT.add(  lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_cent_cultural_usos";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_cent_cultural_usos_bean cent_cultural_usosBean = new V_cent_cultural_usos_bean();

				cent_cultural_usosBean.setClave(rs.getString("clave"));
				cent_cultural_usosBean.setProvincia(rs.getString("provincia"));
				cent_cultural_usosBean.setMunicipio(rs.getString("municipio"));
				cent_cultural_usosBean.setEntidad(rs.getString("entidad"));
				cent_cultural_usosBean.setPoblamient(rs.getString("poblamient"));
				cent_cultural_usosBean.setOrden_cent(rs.getString("orden_cent"));
				cent_cultural_usosBean.setUso(rs.getString("uso"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					cent_cultural_usosBean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					cent_cultural_usosBean.setS_cubi(0);

				lstType.add(cent_cultural_usosBean);

			}
						
			datosMPT.add(  lstType);
			lstType=new ArrayList();
			
			 sql = "select * from v_centro_asistencial";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_centro_asistencial_bean centro_asistencialBean = new V_centro_asistencial_bean();

				centro_asistencialBean.setClave(rs.getString("clave"));
				centro_asistencialBean.setProvincia(rs.getString("provincia"));
				centro_asistencialBean.setMunicipio(rs.getString("municipio"));
				centro_asistencialBean.setEntidad(rs.getString("entidad"));
				centro_asistencialBean.setPoblamient(rs.getString("poblamient"));
				centro_asistencialBean.setOrden_casi(rs.getString("orden_casi"));
				centro_asistencialBean.setNombre(rs.getString("nombre"));
				centro_asistencialBean.setTipo_casis(rs.getString("tipo_casis"));
				centro_asistencialBean.setTitular(rs.getString("titular"));
				centro_asistencialBean.setGestion(rs.getString("gestion"));
				if(rs.getString("plazas")!=null&&!rs.getString("plazas").equals(""))
					centro_asistencialBean.setPlazas(new Integer(rs.getString("plazas")));
				else
					centro_asistencialBean.setPlazas(0);
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					centro_asistencialBean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					centro_asistencialBean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					centro_asistencialBean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					centro_asistencialBean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					centro_asistencialBean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					centro_asistencialBean.setS_sola(0);
				centro_asistencialBean.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				centro_asistencialBean.setEstado(rs.getString("estado"));

				lstType.add(centro_asistencialBean);

			}
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_centro_ensenanza";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_centro_ensenanza_bean centro_ensenanzaBean = new V_centro_ensenanza_bean();

				centro_ensenanzaBean.setClave(rs.getString("clave"));
				centro_ensenanzaBean.setProvincia(rs.getString("provincia"));
				centro_ensenanzaBean.setMunicipio(rs.getString("municipio"));
				centro_ensenanzaBean.setEntidad(rs.getString("entidad"));
				centro_ensenanzaBean.setPoblamient(rs.getString("poblamient"));
				centro_ensenanzaBean.setOrden_cent(rs.getString("orden_cent"));
				centro_ensenanzaBean.setNombre(rs.getString("nombre"));
				centro_ensenanzaBean.setAmbito(rs.getString("ambito"));
				centro_ensenanzaBean.setTitular(rs.getString("titular"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					centro_ensenanzaBean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					centro_ensenanzaBean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					centro_ensenanzaBean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					centro_ensenanzaBean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					centro_ensenanzaBean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					centro_ensenanzaBean.setS_sola(0);
				centro_ensenanzaBean.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				centro_ensenanzaBean.setEstado(rs.getString("estado"));

				lstType.add(centro_ensenanzaBean);

			}	
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			
			sql = "select * from v_centro_sanitario";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_centro_sanitario_bean centro_sanitarioBean = new V_centro_sanitario_bean();

				centro_sanitarioBean.setClave(rs.getString("clave"));
				centro_sanitarioBean.setProvincia(rs.getString("provincia"));
				centro_sanitarioBean.setMunicipio(rs.getString("municipio"));
				centro_sanitarioBean.setEntidad(rs.getString("entidad"));
				centro_sanitarioBean.setPoblamient(rs.getString("poblamient"));
				centro_sanitarioBean.setOrden_csan(rs.getString("orden_csan"));
				centro_sanitarioBean.setNombre(rs.getString("nombre"));
				centro_sanitarioBean.setTipo_csan(rs.getString("tipo_csan"));
				centro_sanitarioBean.setTitular(rs.getString("titular"));
				centro_sanitarioBean.setGestion(rs.getString("gestion"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					centro_sanitarioBean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					centro_sanitarioBean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					centro_sanitarioBean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					centro_sanitarioBean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					centro_sanitarioBean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					centro_sanitarioBean.setS_sola(0);
				centro_sanitarioBean.setUci(rs.getString("uci"));
				if(rs.getString("camas")!=null&&!rs.getString("camas").equals(""))
					centro_sanitarioBean.setCamas(new Integer(rs.getString("camas")));
				else
					centro_sanitarioBean.setCamas(0);
				centro_sanitarioBean.setAcceso_s_ruedas(rs.getString("acceso_s_ruedas"));
				centro_sanitarioBean.setEstado(rs.getString("estado"));

				lstType.add(centro_sanitarioBean);

			}
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_colector";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_colector_bean colectorBean = new V_colector_bean();

				colectorBean.setClave(rs.getString("clave"));
				colectorBean.setProvincia(rs.getString("provincia"));
				colectorBean.setMunicipio(rs.getString("municipio"));
				colectorBean.setOrden_cole(rs.getString("orden_cole"));			
					
				lstType.add(colectorBean);

			}
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_colector_enc";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_colector_enc_bean colectorEncBean = new V_colector_enc_bean();
	
				colectorEncBean.setClave(rs.getString("clave"));
				colectorEncBean.setProvincia(rs.getString("provincia"));
				colectorEncBean.setMunicipio(rs.getString("municipio"));
				colectorEncBean.setOrden_cole(rs.getString("orden_cole"));
			
				
				lstType.add(colectorEncBean);

			}
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_colector_enc_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_colector_enc_m50_bean colectorEncM50Bean = new V_colector_enc_m50_bean();
				
				colectorEncM50Bean.setClave(rs.getString("clave"));
				colectorEncM50Bean.setProvincia(rs.getString("provincia"));
				colectorEncM50Bean.setMunicipio(rs.getString("municipio"));
				colectorEncM50Bean.setOrden_cole(rs.getString("orden_cole"));
			
				
				lstType.add(colectorEncM50Bean);

			}			
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_colector_nucleo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_colector_nucleo_bean colector_nucleoBean = new V_colector_nucleo_bean();

				colector_nucleoBean.setProvincia(rs.getString("provincia"));
				colector_nucleoBean.setMunicipio(rs.getString("municipio"));
				colector_nucleoBean.setEntidad(rs.getString("entidad"));
				colector_nucleoBean.setNucleo(rs.getString("nucleo"));
				colector_nucleoBean.setClave(rs.getString("clave"));
				colector_nucleoBean.setC_provinci(rs.getString("c_provinc"));
				colector_nucleoBean.setC_municipi(rs.getString("c_municip"));
				colector_nucleoBean.setOrden_cole(rs.getString("orden_cole"));
			
				lstType.add(colector_nucleoBean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_cond_agua_nucleo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_cond_agua_nucleo_bean cond_agua_nucleo_bean = new V_cond_agua_nucleo_bean();

				cond_agua_nucleo_bean.setProvincia(rs.getString("provincia"));
				cond_agua_nucleo_bean.setMunicipio(rs.getString("municipio"));
				cond_agua_nucleo_bean.setEntidad(rs.getString("entidad"));
				cond_agua_nucleo_bean.setNucleo(rs.getString("nucleo"));
				cond_agua_nucleo_bean.setClave(rs.getString("clave"));
				cond_agua_nucleo_bean.setCond_provi(rs.getString("cond_provi"));
				cond_agua_nucleo_bean.setCond_munic(rs.getString("cond_munic"));
				cond_agua_nucleo_bean.setOrden_cond(rs.getString("orden_cond"));

				lstType.add(cond_agua_nucleo_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_conduccion";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_conduccion_bean conduccion_bean = new V_conduccion_bean();

				conduccion_bean.setClave(rs.getString("clave"));
				conduccion_bean.setProvincia(rs.getString("provincia"));
				conduccion_bean.setMunicipio(rs.getString("municipio"));
				conduccion_bean.setOrden_cond(rs.getString("orden_cond"));
				
				lstType.add(conduccion_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			

			sql = "select * from v_conduccion_enc";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_conduccion_enc_bean conduccion_enc_bean = new V_conduccion_enc_bean();
				
				conduccion_enc_bean.setProvincia(rs.getString("PROVINCIA"));
				conduccion_enc_bean.setMunicipio(rs.getString("MUNICIPIO"));
				conduccion_enc_bean.setOrden_cond(rs.getString("ORDEN_COND"));
				conduccion_enc_bean.setClave(rs.getString("CLAVE"));

				
				lstType.add(conduccion_enc_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			
			sql = "select * from v_conduccion_enc_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_conduccion_enc_m50_bean conduccion_enc_m50_bean = new V_conduccion_enc_m50_bean();
				
				conduccion_enc_m50_bean.setProvincia(rs.getString("PROVINCIA"));
				conduccion_enc_m50_bean.setMunicipio(rs.getString("MUNICIPIO"));
				conduccion_enc_m50_bean.setClave(rs.getString("CLAVE"));
				conduccion_enc_m50_bean.setOrden_cond(rs.getString("ORDEN_COND"));	

				lstType.add(conduccion_enc_m50_bean);

			}	
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_dep_agua_nucleo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_dep_agua_nucleo_bean dep_agua_nucleo_bean = new V_dep_agua_nucleo_bean();
				dep_agua_nucleo_bean.setProvincia(rs.getString("PROVINCIA"));
				dep_agua_nucleo_bean.setMunicipio(rs.getString("MUNICIPIO"));
				dep_agua_nucleo_bean.setEntidad(rs.getString("ENTIDAD"));
				dep_agua_nucleo_bean.setNucleo(rs.getString("NUCLEO"));		
				dep_agua_nucleo_bean.setClave(rs.getString("CLAVE"));		
				dep_agua_nucleo_bean.setDe_provinc(rs.getString("DE_PROVINC"));		
				dep_agua_nucleo_bean.setDe_municip(rs.getString("DE_MUNICIP"));		
				dep_agua_nucleo_bean.setOrden_depu(rs.getString("ORDEN_DEPU"));			

				lstType.add(dep_agua_nucleo_bean);

			}		
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_deposito";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_deposito_bean deposito_bean = new V_deposito_bean();
				
				deposito_bean.setProvincia(rs.getString("PROVINCIA"));
				deposito_bean.setMunicipio(rs.getString("MUNICIPIO"));
				deposito_bean.setOrden_depo(rs.getString("ORDEN_DEPO"));
				deposito_bean.setClave(rs.getString("CLAVE"));
				
				lstType.add(deposito_bean);
				
			}
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_deposito_agua_nucleo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_deposito_agua_nucleo_bean  deposito_agua_nucleo_bean = new V_deposito_agua_nucleo_bean();
				deposito_agua_nucleo_bean.setProvincia(rs.getString("PROVINCIA"));
				deposito_agua_nucleo_bean.setMunicipio(rs.getString("MUNICIPIO"));
				deposito_agua_nucleo_bean.setEntidad(rs.getString("ENTIDAD"));
				deposito_agua_nucleo_bean.setNucleo(rs.getString("NUCLEO"));
				deposito_agua_nucleo_bean.setClave(rs.getString("CLAVE"));
				deposito_agua_nucleo_bean.setDe_provinc(rs.getString("DE_PROVINC"));
				deposito_agua_nucleo_bean.setDe_municip(rs.getString("DE_MUNICIP"));
				deposito_agua_nucleo_bean.setOrden_depo(rs.getString("ORDEN_DEPO"));

				lstType.add(deposito_agua_nucleo_bean);

			}		
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_deposito_enc";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_deposito_enc_bean deposito_enc_bean = new V_deposito_enc_bean();

				deposito_enc_bean.setClave(rs.getString("CLAVE"));
				deposito_enc_bean.setProvincia(rs.getString("PROVINCIA"));
				deposito_enc_bean.setMunicipio(rs.getString("MUNICIPIO"));
				deposito_enc_bean.setOrden_depo(rs.getString("ORDEN_DEPO"));
				deposito_enc_bean.setUbicacion(rs.getString("UBICACION"));
				deposito_enc_bean.setTitular(rs.getString("TITULAR"));
				deposito_enc_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("CAPACIDAD")!=null&&rs.getString("CAPACIDAD")!="")
					deposito_enc_bean.setCapacidad(new Integer(rs.getString("CAPACIDAD")));
				else
					deposito_enc_bean.setCapacidad(0);
				deposito_enc_bean.setEstado(rs.getString("ESTADO"));
				deposito_enc_bean.setProteccion(rs.getString("PROTECCION"));
				if(rs.getString("LIMPIEZA")!=null &&!rs.getString("LIMPIEZA").equals(""))
					deposito_enc_bean.setLimpieza(new Integer(rs.getString("LIMPIEZA")));
				else
					deposito_enc_bean.setLimpieza(0);
				deposito_enc_bean.setContador(rs.getString("CONTADOR"));

				lstType.add(deposito_enc_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_deposito_enc_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_deposito_enc_m50_bean deposito_enc_m50_bean = new V_deposito_enc_m50_bean();

				deposito_enc_m50_bean.setClave(rs.getString("CLAVE"));
				deposito_enc_m50_bean.setProvincia(rs.getString("PROVINCIA"));
				deposito_enc_m50_bean.setMunicipio(rs.getString("MUNICIPIO"));
				deposito_enc_m50_bean.setOrden_depo(rs.getString("ORDEN_DEPO"));
				deposito_enc_m50_bean.setUbicacion(rs.getString("UBICACION"));
				deposito_enc_m50_bean.setTitular(rs.getString("TITULAR"));
				deposito_enc_m50_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("CAPACIDAD")!=null&&rs.getString("CAPACIDAD")!="")
					deposito_enc_m50_bean.setCapacidad(new Integer(rs.getString("CAPACIDAD")));
				else
					deposito_enc_m50_bean.setCapacidad(0);
				deposito_enc_m50_bean.setEstado(rs.getString("ESTADO"));
				deposito_enc_m50_bean.setProteccion(rs.getString("PROTECCION"));
				if(rs.getString("LIMPIEZA")!=null &&!rs.getString("LIMPIEZA").equals(""))
					deposito_enc_m50_bean.setLimpieza(new Integer(rs.getString("LIMPIEZA")));
				else
					deposito_enc_m50_bean.setLimpieza(0);
				deposito_enc_m50_bean.setContador(rs.getString("CONTADOR"));

				lstType.add(deposito_enc_m50_bean);


			}	
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			
			sql = "select * from v_depuradora";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_depuradora_bean depuradora_bean = new V_depuradora_bean();
				
				depuradora_bean.setProvincia(rs.getString("PROVINCIA"));
				depuradora_bean.setMunicipio(rs.getString("MUNICIPIO"));
				depuradora_bean.setOrden_depu(rs.getString("ORDEN_DEPU"));
				depuradora_bean.setClave(rs.getString("CLAVE"));
				
				lstType.add(depuradora_bean);

			}			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_depuradora_enc";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_depuradora_enc_bean depuradora_enc_bean = new V_depuradora_enc_bean();

				depuradora_enc_bean.setClave(rs.getString("CLAVE"));
				depuradora_enc_bean.setProvincia(rs.getString("PROVINCIA"));
				depuradora_enc_bean.setMunicipio(rs.getString("MUNICIPIO"));
				depuradora_enc_bean.setOrden_depu(rs.getString("ORDEN_DEPU"));
				depuradora_enc_bean.setTrat_pr_1(rs.getString("TRAT_PR_1"));
				depuradora_enc_bean.setTrat_pr_2(rs.getString("TRAT_PR_2"));
				depuradora_enc_bean.setTrat_pr_3(rs.getString("TRAT_PR_3"));
				depuradora_enc_bean.setTrat_sc_1(rs.getString("TRAT_SC_1"));
				depuradora_enc_bean.setTrat_sc_2(rs.getString("TRAT_SC_2"));
				depuradora_enc_bean.setTrat_sc_3(rs.getString("TRAT_SC_3"));
				depuradora_enc_bean.setTrat_av_1(rs.getString("TRAT_AV_1"));
				depuradora_enc_bean.setTrat_av_2(rs.getString("TRAT_AV_2"));
				depuradora_enc_bean.setTrat_av_3(rs.getString("TRAT_AV_3"));
				depuradora_enc_bean.setProc_cm_1(rs.getString("PROC_CM_1"));
				depuradora_enc_bean.setProc_cm_2(rs.getString("PROC_CM_2"));
				depuradora_enc_bean.setProc_cm_3(rs.getString("PROC_CM_3"));
				depuradora_enc_bean.setTrat_ld_1(rs.getString("TRAT_LD_1"));
				depuradora_enc_bean.setTrat_ld_2(rs.getString("TRAT_LD_2"));
				depuradora_enc_bean.setTrat_ld_3(rs.getString("TRAT_LD_3"));

				
				lstType.add(depuradora_enc_bean);

			}		

			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			
			sql = "select * from v_depuradora_enc_2";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_depuradora_enc_2_bean depuradora_enc_2_bean = new V_depuradora_enc_2_bean();

				depuradora_enc_2_bean.setClave(rs.getString("CLAVE"));
				depuradora_enc_2_bean.setProvincia(rs.getString("PROVINCIA"));
				depuradora_enc_2_bean.setMunicipio(rs.getString("MUNICIPIO"));
				depuradora_enc_2_bean.setOrden_depu(rs.getString("ORDEN_DEPU"));
				depuradora_enc_2_bean.setTitular(rs.getString("TITULAR"));
				depuradora_enc_2_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("CAPACIDAD")!=null&&!rs.getString("CAPACIDAD").equals(""))
					depuradora_enc_2_bean.setCapacidad(new Integer(rs.getString("CAPACIDAD")));
				else
					depuradora_enc_2_bean.setCapacidad(0);

				depuradora_enc_2_bean.setProblem_1(rs.getString("PROBLEM_1"));
				depuradora_enc_2_bean.setProblem_2(rs.getString("PROBLEM_2"));
				depuradora_enc_2_bean.setProblem_3(rs.getString("PROBLEM_3"));
				depuradora_enc_2_bean.setLodo_gest(rs.getString("LODO_GEST"));
				if(rs.getString("LODO_VERT")!=null&&!rs.getString("LODO_VERT").equals(""))
					depuradora_enc_2_bean.setLodo_vert(new Integer(rs.getString("LODO_VERT")));
				else
					depuradora_enc_2_bean.setLodo_vert(0);

				if(rs.getString("LODO_INCI")!=null&&!rs.getString("LODO_INCI").equals(""))
					depuradora_enc_2_bean.setLodo_inci(new Integer(rs.getString("LODO_INCI")));
				else
					depuradora_enc_2_bean.setLodo_inci(0);
				if(rs.getString("LODO_CON_A")!=null&&!rs.getString("LODO_CON_A").equals(""))
					depuradora_enc_2_bean.setLodo_con_a(new Integer(rs.getString("LODO_CON_A")));
				else
					depuradora_enc_2_bean.setLodo_con_a(0);

				if(rs.getString("LODO_SIN_A")!=null&&!rs.getString("LODO_SIN_A").equals(""))
					depuradora_enc_2_bean.setLodo_sin_a(new Integer(rs.getString("LODO_SIN_A")));
				else
					depuradora_enc_2_bean.setLodo_sin_a(0);

				if(rs.getString("LODO_OT")!=null&&!rs.getString("LODO_OT").equals(""))
					depuradora_enc_2_bean.setLodo_ot(new Integer(rs.getString("LODO_OT")));
				else
					depuradora_enc_2_bean.setLodo_ot(0);

				
				lstType.add(depuradora_enc_2_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_depuradora_enc_2_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_depuradora_enc_2_m50_bean depuradora_enc_2_m50 = new V_depuradora_enc_2_m50_bean();

				depuradora_enc_2_m50.setClave(rs.getString("CLAVE"));
				depuradora_enc_2_m50.setProvincia(rs.getString("PROVINCIA"));
				depuradora_enc_2_m50.setMunicipio(rs.getString("MUNICIPIO"));
				depuradora_enc_2_m50.setOrden_depu(rs.getString("ORDEN_DEPU"));
				depuradora_enc_2_m50.setTitular(rs.getString("TITULAR"));
				depuradora_enc_2_m50.setGestion(rs.getString("GESTION"));
				if(rs.getString("CAPACIDAD")!=null&&!rs.getString("CAPACIDAD").equals(""))
					depuradora_enc_2_m50.setCapacidad(new Integer(rs.getString("CAPACIDAD")));
				else
					depuradora_enc_2_m50.setCapacidad(0);
				depuradora_enc_2_m50.setProblem_1(rs.getString("PROBLEM_1"));
				depuradora_enc_2_m50.setProblem_2(rs.getString("PROBLEM_2"));
				depuradora_enc_2_m50.setProblem_3(rs.getString("PROBLEM_3"));
				depuradora_enc_2_m50.setLodo_gest(rs.getString("LODO_GEST"));
				if(rs.getString("LODO_VERT")!=null&&!rs.getString("LODO_VERT").equals(""))
					depuradora_enc_2_m50.setLodo_vert(new Integer(rs.getString("LODO_VERT")));
				else
					depuradora_enc_2_m50.setLodo_vert(0);

				if(rs.getString("LODO_INCI")!=null&&!rs.getString("LODO_INCI").equals(""))
					depuradora_enc_2_m50.setLodo_inci(new Integer(rs.getString("LODO_INCI")));
				else
					depuradora_enc_2_m50.setLodo_inci(0);
				if(rs.getString("LODO_CON_A")!=null&&!rs.getString("LODO_CON_A").equals(""))
					depuradora_enc_2_m50.setLodo_con_a(new Integer(rs.getString("LODO_CON_A")));
				else
					depuradora_enc_2_m50.setLodo_con_a(0);

				if(rs.getString("LODO_SIN_A")!=null&&!rs.getString("LODO_SIN_A").equals(""))
					depuradora_enc_2_m50.setLodo_sin_a(new Integer(rs.getString("LODO_SIN_A")));
				else
					depuradora_enc_2_m50.setLodo_sin_a(0);

				if(rs.getString("LODO_OT")!=null&&!rs.getString("LODO_OT").equals(""))
					depuradora_enc_2_m50.setLodo_ot(new Integer(rs.getString("LODO_OT")));
				else
					depuradora_enc_2_m50.setLodo_ot(0);
				lstType.add(depuradora_enc_2_m50);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_depuradora_enc_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_depuradora_enc_m50_bean depuradora_enc_m50_bean = new V_depuradora_enc_m50_bean();

				depuradora_enc_m50_bean.setClave(rs.getString("CLAVE"));
				depuradora_enc_m50_bean.setProvincia(rs.getString("PROVINCIA"));
				depuradora_enc_m50_bean.setMunicipio(rs.getString("MUNICIPIO"));
				depuradora_enc_m50_bean.setOrden_depu(rs.getString("ORDEN_DEPU"));
				depuradora_enc_m50_bean.setTrat_pr_1(rs.getString("TRAT_PR_1"));
				depuradora_enc_m50_bean.setTrat_pr_2(rs.getString("TRAT_PR_2"));
				depuradora_enc_m50_bean.setTrat_pr_3(rs.getString("TRAT_PR_3"));
				depuradora_enc_m50_bean.setTrat_sc_1(rs.getString("TRAT_SC_1"));
				depuradora_enc_m50_bean.setTrat_sc_2(rs.getString("TRAT_SC_2"));
				depuradora_enc_m50_bean.setTrat_sc_3(rs.getString("TRAT_SC_3"));
				depuradora_enc_m50_bean.setTrat_av_1(rs.getString("TRAT_AV_1"));
				depuradora_enc_m50_bean.setTrat_av_2(rs.getString("TRAT_AV_2"));
				depuradora_enc_m50_bean.setTrat_av_3(rs.getString("TRAT_AV_3"));
				depuradora_enc_m50_bean.setProc_cm_1(rs.getString("PROC_CM_1"));
				depuradora_enc_m50_bean.setProc_cm_2(rs.getString("PROC_CM_2"));
				depuradora_enc_m50_bean.setProc_cm_3(rs.getString("PROC_CM_3"));
				depuradora_enc_m50_bean.setTrat_ld_1(rs.getString("TRAT_LD_1"));
				depuradora_enc_m50_bean.setTrat_ld_2(rs.getString("TRAT_LD_2"));
				depuradora_enc_m50_bean.setTrat_ld_3(rs.getString("TRAT_LD_3"));

				
				lstType.add(depuradora_enc_m50_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_edific_pub_sin_uso";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_edific_pub_sin_uso_bean edific_pub_sin_uso_bean = new V_edific_pub_sin_uso_bean();

				edific_pub_sin_uso_bean.setClave(rs.getString("CLAVE"));
				edific_pub_sin_uso_bean.setProvincia(rs.getString("PROVINCIA"));
				edific_pub_sin_uso_bean.setMunicipio(rs.getString("MUNICIPIO"));
				edific_pub_sin_uso_bean.setEntidad(rs.getString("ENTIDAD"));
				edific_pub_sin_uso_bean.setPoblamient(rs.getString("POBLAMIENT"));
				edific_pub_sin_uso_bean.setOrden_edif(rs.getString("ORDEN_EDIF"));
				edific_pub_sin_uso_bean.setNombre(rs.getString("NOMBRE"));
				edific_pub_sin_uso_bean.setTitular(rs.getString("TITULAR"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					edific_pub_sin_uso_bean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					edific_pub_sin_uso_bean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					edific_pub_sin_uso_bean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					edific_pub_sin_uso_bean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					edific_pub_sin_uso_bean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					edific_pub_sin_uso_bean.setS_sola(0);
				edific_pub_sin_uso_bean.setEstado(rs.getString("ESTADO"));
				edific_pub_sin_uso_bean.setUsoant(rs.getString("USOANT"));
				
				lstType.add(edific_pub_sin_uso_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_emisario";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_emisario_bean emisario_bean = new V_emisario_bean();
				
				emisario_bean.setProvincia(rs.getString("PROVINCIA"));
				emisario_bean.setMunicipio(rs.getString("MUNICIPIO"));
				emisario_bean.setOrden_emis(rs.getString("ORDEN_EMIS"));
				emisario_bean.setClave(rs.getString("CLAVE"));
				
				lstType.add(emisario_bean);
			}	
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_emisario_enc";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_emisario_enc_bean emisario_enc_bean = new V_emisario_enc_bean();

				emisario_enc_bean.setClave(rs.getString("CLAVE"));
				emisario_enc_bean.setProvincia(rs.getString("PROVINCIA"));
				emisario_enc_bean.setMunicipio(rs.getString("MUNICIPIO"));
				emisario_enc_bean.setOrden_emis(rs.getString("ORDEN_EMIS"));
				emisario_enc_bean.setTipo_vert(rs.getString("TIPO_VERT"));
				emisario_enc_bean.setZona_vert(rs.getString("ZONA_VERT"));
				if(rs.getString("DISTANCIA")!=null && !rs.getString("DISTANCIA").equals("") )
					emisario_enc_bean.setDistancia(new Integer(rs.getString("DISTANCIA")));
				else
					emisario_enc_bean.setDistancia(0);

				lstType.add(emisario_enc_bean);
			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_emisario_enc_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_emisario_enc_m50_bean emisario_enc_m50_bean = new V_emisario_enc_m50_bean();

				emisario_enc_m50_bean.setClave(rs.getString("CLAVE"));
				emisario_enc_m50_bean.setProvincia(rs.getString("PROVINCIA"));
				emisario_enc_m50_bean.setMunicipio(rs.getString("MUNICIPIO"));
				emisario_enc_m50_bean.setOrden_emis(rs.getString("ORDEN_EMIS"));
				emisario_enc_m50_bean.setTipo_vert(rs.getString("TIPO_VERT"));
				emisario_enc_m50_bean.setZona_vert(rs.getString("ZONA_VERT"));
				if(rs.getString("DISTANCIA")!=null && !rs.getString("DISTANCIA").equals("") )
					emisario_enc_m50_bean.setDistancia(new Integer(rs.getString("DISTANCIA")));
				else
					emisario_enc_m50_bean.setDistancia(0);

				lstType.add(emisario_enc_m50_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_emisario_nucleo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_emisario_nucleo_bean emisario_nucleo_bean = new V_emisario_nucleo_bean();


				emisario_nucleo_bean.setProvincia(rs.getString("PROVINCIA"));
				emisario_nucleo_bean.setMunicipio(rs.getString("MUNICIPIO"));
				emisario_nucleo_bean.setEntidad(rs.getString("ENTIDAD"));
				emisario_nucleo_bean.setNucleo(rs.getString("NUCLEO"));
				emisario_nucleo_bean.setClave(rs.getString("CLAVE"));
				emisario_nucleo_bean.setEm_provinc(rs.getString("EM_PROVINC"));
				emisario_nucleo_bean.setEm_municip(rs.getString("EM_MUNICIP"));
				emisario_nucleo_bean.setOrden_emis(rs.getString("ORDEN_EMIS"));

				lstType.add(emisario_nucleo_bean);

			}		
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_entidad_singular";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_entidad_singular_bean entidad_singular_bean = new V_entidad_singular_bean();
				
				entidad_singular_bean.setProvincia(rs.getString("PROVINCIA"));
				entidad_singular_bean.setMunicipio(rs.getString("MUNICIPIO"));
				entidad_singular_bean.setEntidad(rs.getString("ENTIDAD"));
				if(rs.getString("DENOMINACI")!=null)
					entidad_singular_bean.setDenominaci(rs.getString("DENOMINACI"));
				else
					entidad_singular_bean.setDenominaci("-");
				
				lstType.add(entidad_singular_bean);

			}		
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_infraestr_viaria";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_infraestr_viaria_bean infraestr_viaria_bean = new V_infraestr_viaria_bean();

				infraestr_viaria_bean.setProvincia(rs.getString("PROVINCIA"));
				infraestr_viaria_bean.setMunicipio(rs.getString("MUNICIPIO"));
				infraestr_viaria_bean.setEntidad(rs.getString("ENTIDAD"));
				infraestr_viaria_bean.setNucleo(rs.getString("POBLAMIENT"));
				infraestr_viaria_bean.setTipo_infr(rs.getString("TIPO_INFR"));
				infraestr_viaria_bean.setEstado(rs.getString("ESTADO"));
				if(rs.getString("LONGITUD")!=null&&!rs.getString("LONGITUD").equals(""))
					infraestr_viaria_bean.setLongitud(new Integer(rs.getString("LONGITUD")));
				else
					infraestr_viaria_bean.setLongitud(0);
				if(rs.getString("SUPERFICIE")!=null&&!rs.getString("SUPERFICIE").equals(""))
					infraestr_viaria_bean.setSuperficie(new Integer(rs.getString("SUPERFICIE")));
				else
					infraestr_viaria_bean.setSuperficie(0);
				if (rs.getString("VIV_AFECTA")!=null)
					infraestr_viaria_bean.setViv_afecta(new Integer(rs.getString("VIV_AFECTA")));
				else
					infraestr_viaria_bean.setViv_afecta(0);
				
				lstType.add(infraestr_viaria_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_inst_depor_deporte";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_inst_depor_deporte_bean inst_depor_deporte_bean = new V_inst_depor_deporte_bean();

				inst_depor_deporte_bean.setClave(rs.getString("CLAVE"));
				inst_depor_deporte_bean.setProvincia(rs.getString("PROVINCIA"));
				inst_depor_deporte_bean.setMunicipio(rs.getString("MUNICIPIO"));
				inst_depor_deporte_bean.setEntidad(rs.getString("ENTIDAD"));
				inst_depor_deporte_bean.setPoblamient(rs.getString("POBLAMIENT"));
				inst_depor_deporte_bean.setOrden_inst(rs.getString("ORDEN_INST"));
				inst_depor_deporte_bean.setTipo_depor(rs.getString("TIPO_DEPOR"));

				lstType.add(inst_depor_deporte_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_instal_deportiva";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_instal_deportiva_bean instal_deportiva_bean = new V_instal_deportiva_bean();


				instal_deportiva_bean.setClave(rs.getString("CLAVE"));
				instal_deportiva_bean.setProvincia(rs.getString("PROVINCIA"));
				instal_deportiva_bean.setMunicipio(rs.getString("MUNICIPIO"));
				instal_deportiva_bean.setEntidad(rs.getString("ENTIDAD"));
				instal_deportiva_bean.setPoblamient(rs.getString("POBLAMIENT"));
				instal_deportiva_bean.setOrden_inst(rs.getString("ORDEN_INST"));
				instal_deportiva_bean.setNombre(rs.getString("NOMBRE"));
				instal_deportiva_bean.setTipo_insde(rs.getString("TIPO_INSDE"));
				instal_deportiva_bean.setTitular(rs.getString("TITULAR"));
				instal_deportiva_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					instal_deportiva_bean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					instal_deportiva_bean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					instal_deportiva_bean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					instal_deportiva_bean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					instal_deportiva_bean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					instal_deportiva_bean.setS_sola(0);
				instal_deportiva_bean.setAcceso_s_ruedas(rs.getString("ACCESO_S_RUEDAS"));
				instal_deportiva_bean.setEstado(rs.getString("ESTADO"));

				lstType.add(instal_deportiva_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();

			sql = "select * from v_lonja_merc_feria";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_lonja_merc_feria_bean lonja_merc_feria_bean = new V_lonja_merc_feria_bean();


				lonja_merc_feria_bean.setClave(rs.getString("CLAVE"));
				lonja_merc_feria_bean.setProvincia(rs.getString("PROVINCIA"));
				lonja_merc_feria_bean.setMunicipio(rs.getString("MUNICIPIO"));
				lonja_merc_feria_bean.setEntidad(rs.getString("ENTIDAD"));
				lonja_merc_feria_bean.setPoblamient(rs.getString("POBLAMIENT"));
				lonja_merc_feria_bean.setOrden_lmf(rs.getString("ORDEN_LMF"));
				lonja_merc_feria_bean.setNombre(rs.getString("NOMBRE"));
				lonja_merc_feria_bean.setTipo_lonj(rs.getString("TIPO_LONJ"));
				lonja_merc_feria_bean.setTitular(rs.getString("TITULAR"));
				lonja_merc_feria_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					lonja_merc_feria_bean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					lonja_merc_feria_bean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					lonja_merc_feria_bean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					lonja_merc_feria_bean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					lonja_merc_feria_bean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					lonja_merc_feria_bean.setS_sola(0);
				lonja_merc_feria_bean.setAcceso_s_ruedas(rs.getString("ACCESO_S_RUEDAS"));
				lonja_merc_feria_bean.setEstado(rs.getString("ESTADO"));

				lstType.add(lonja_merc_feria_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_matadero";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_matadero_bean matadero_bean = new V_matadero_bean();


				matadero_bean.setClave(rs.getString("CLAVE"));
				matadero_bean.setProvincia(rs.getString("PROVINCIA"));
				matadero_bean.setMunicipio(rs.getString("MUNICIPIO"));
				matadero_bean.setEntidad(rs.getString("ENTIDAD"));
				matadero_bean.setPoblamient(rs.getString("POBLAMIENT"));
				matadero_bean.setOrden_mata(rs.getString("ORDEN_MATA"));
				matadero_bean.setNombre(rs.getString("NOMBRE"));
				matadero_bean.setClase_mat(rs.getString("CLASE_MAT"));
				matadero_bean.setTitular(rs.getString("TITULAR"));
				matadero_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					matadero_bean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					matadero_bean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					matadero_bean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					matadero_bean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					matadero_bean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					matadero_bean.setS_sola(0);
				matadero_bean.setAcceso_s_ruedas(rs.getString("ACCESO_S_RUEDAS"));
				matadero_bean.setEstado(rs.getString("ESTADO"));
				if(rs.getString("CAPACIDAD")!=null&&!rs.getString("CAPACIDAD").equals(""))
					matadero_bean.setCapacidad(new Integer(rs.getString("CAPACIDAD")));
				else
					matadero_bean.setCapacidad(0);
				if(rs.getString("UTILIZACIO")!=null&&!rs.getString("UTILIZACIO").equals(""))
					matadero_bean.setUtilizacio(new Integer(rs.getString("UTILIZACIO")));
				else
					matadero_bean.setUtilizacio(0);
				matadero_bean.setTunel(rs.getString("TUNEL"));
				matadero_bean.setBovino(rs.getString("BOVINO"));
				matadero_bean.setOvino(rs.getString("OVINO"));
				matadero_bean.setPorcino(rs.getString("PORCINO"));
				matadero_bean.setOtros(rs.getString("OTROS"));

				lstType.add(matadero_bean);

			}
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_mun_enc_dis";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_mun_enc_dis_bean mun_enc_dis_bean = new V_mun_enc_dis_bean();

				mun_enc_dis_bean.setCodprov(rs.getString("PROVINCIA"));
				mun_enc_dis_bean.setCodmunic(rs.getString("MUNICIPIO"));
				if(rs.getString("PADRON")!=null&&!rs.getString("PADRON").equals(""))
					mun_enc_dis_bean.setPadron(new Integer(rs.getString("PADRON")));
				else
					mun_enc_dis_bean.setPadron(0);
				if(rs.getString("POB_ESTACI")!=null&&!rs.getString("POB_ESTACI").equals(""))
					mun_enc_dis_bean.setPob_estaci(new Integer(rs.getString("POB_ESTACI")));
				else
					mun_enc_dis_bean.setPob_estaci(0);

				if(rs.getString("VIV_TOTAL")!=null&&!rs.getString("VIV_TOTAL").equals(""))
					mun_enc_dis_bean.setViv_total(new Integer(rs.getString("VIV_TOTAL")));
				else
					mun_enc_dis_bean.setViv_total(0);

				if(rs.getString("HOTELES")!=null&&!rs.getString("HOTELES").equals(""))
					mun_enc_dis_bean.setHoteles(new Integer(rs.getString("HOTELES")));
				else
					mun_enc_dis_bean.setHoteles(0);
				if(rs.getString("CASAS_RURA")!=null&&!rs.getString("CASAS_RURA").equals(""))
					mun_enc_dis_bean.setCasas_rural(new Integer(rs.getString("CASAS_RURA")));
				else
					mun_enc_dis_bean.setCasas_rural(0);
				if(rs.getString("LONGITUD")!=null&&!rs.getString("LONGITUD").equals(""))
					mun_enc_dis_bean.setLongitud(new Integer(rs.getString("LONGITUD")));
				else
					mun_enc_dis_bean.setLongitud(0);
				if(rs.getString("AAG_V_CONE")!=null&&!rs.getString("AAG_V_CONE").equals(""))
					mun_enc_dis_bean.setAag_v_cone(new Integer(rs.getString("AAG_V_CONE")));
				else
					mun_enc_dis_bean.setAag_v_cone(0);
				if(rs.getString("AAG_V_NCON")!=null&&!rs.getString("AAG_V_NCON").equals(""))
					mun_enc_dis_bean.setAag_v_ncon(new Integer(rs.getString("AAG_V_NCON")));
				else
					mun_enc_dis_bean.setAag_v_ncon(0);
				if(rs.getString("AAG_C_INVI")!=null&&!rs.getString("AAG_C_INVI").equals(""))
					mun_enc_dis_bean.setAag_c_invi(new Integer(rs.getString("AAG_C_INVI")));
				else
					mun_enc_dis_bean.setAag_c_invi(0);
				if(rs.getString("AAG_C_VERA")!=null&&!rs.getString("AAG_C_VERA").equals(""))
					mun_enc_dis_bean.setAag_c_vera(new Integer(rs.getString("AAG_C_VERA")));
				else
					mun_enc_dis_bean.setAag_c_vera(0);
				if(rs.getString("AAG_V_EXPR")!=null&&!rs.getString("AAG_V_EXPR").equals(""))
					mun_enc_dis_bean.setAag_v_expr(new Integer(rs.getString("AAG_V_EXPR")));
				else
					mun_enc_dis_bean.setAag_v_expr(0);
				if(rs.getString("AAG_V_DEPR")!=null&&!rs.getString("AAG_V_DEPR").equals(""))
					mun_enc_dis_bean.setAag_v_depr(new Integer(rs.getString("AAG_V_DEPR")));
				else
					mun_enc_dis_bean.setAag_v_depr(0);
				if(rs.getString("AAG_L_DEFI")!=null&&!rs.getString("AAG_L_DEFI").equals(""))
					mun_enc_dis_bean.setAag_l_defi(new Integer(rs.getString("AAG_L_DEFI")));
				else
					mun_enc_dis_bean.setAag_l_defi(0);
				if(rs.getString("AAG_V_DEFI")!=null&&!rs.getString("AAG_V_DEFI").equals(""))
					mun_enc_dis_bean.setAag_v_defi(new Integer(rs.getString("AAG_V_DEFI")));
				else
					mun_enc_dis_bean.setAag_v_defi(0);
				if(rs.getString("AAG_PR_DEF")!=null&&!rs.getString("AAG_PR_DEF").equals(""))
					mun_enc_dis_bean.setAag_pr_def(new Integer(rs.getString("AAG_PR_DEF")));
				else
					mun_enc_dis_bean.setAag_pr_def(0);
				if(rs.getString("AAG_PE_DEF")!=null&&!rs.getString("AAG_PE_DEF").equals(""))
					mun_enc_dis_bean.setAag_pe_def(new Integer(rs.getString("AAG_PE_DEF")));
				else
					mun_enc_dis_bean.setAag_pe_def(0);
				if(rs.getString("AAU_VIVIEN")!=null&&!rs.getString("AAU_VIVIEN").equals(""))
					mun_enc_dis_bean.setAau_vivien(new Integer(rs.getString("AAU_VIVIEN")));
				else
					mun_enc_dis_bean.setAau_vivien(0);
				if(rs.getString("aau_pob_re")!=null&&!rs.getString("aau_pob_re").equals(""))
					mun_enc_dis_bean.setAau_pob_re(new Integer(rs.getString("aau_pob_re")));
				else
					mun_enc_dis_bean.setAau_pob_re(0);

				if(rs.getString("aau_pob_es")!=null&&!rs.getString("aau_pob_es").equals(""))
					mun_enc_dis_bean.setAau_pob_es(new Integer(rs.getString("aau_pob_es")));
				else
					mun_enc_dis_bean.setAau_pob_es(0);
				if(rs.getString("aau_def_vi")!=null&&!rs.getString("aau_def_vi").equals(""))
					mun_enc_dis_bean.setAau_def_vi(new Integer(rs.getString("aau_def_vi")));
				else
					mun_enc_dis_bean.setAau_def_vi(0);
				if(rs.getString("aau_def_re")!=null&&!rs.getString("aau_def_re").equals(""))
					mun_enc_dis_bean.setAau_def_re(new Integer(rs.getString("aau_def_re")));
				else
					mun_enc_dis_bean.setAau_def_re(0);
				if(rs.getString("aau_def_es")!=null&&!rs.getString("aau_def_es").equals(""))
					mun_enc_dis_bean.setAau_def_es(new Integer(rs.getString("aau_def_es")));
				else
					mun_enc_dis_bean.setAau_def_es(0);
				if(rs.getString("aau_fecont")!=null&&!rs.getString("aau_fecont").equals(""))
					mun_enc_dis_bean.setAau_fecont(new Integer(rs.getString("aau_fecont")));
				else
					mun_enc_dis_bean.setAau_fecont(0);
				if(rs.getString("AAU_FENCON")!=null&&!rs.getString("AAU_FENCON").equals(""))
					mun_enc_dis_bean.setAau_fencon(new Integer(rs.getString("AAU_FENCON")));
				else
					mun_enc_dis_bean.setAau_fencon(0);
				if(rs.getString("LONGIT_RAM")!=null&&!rs.getString("LONGIT_RAM").equals(""))
					mun_enc_dis_bean.setLongi_ramal(new Integer(rs.getString("LONGIT_RAM")));
				else
					mun_enc_dis_bean.setLongi_ramal(0);
				if(rs.getString("SYD_V_CONE")!=null&&!rs.getString("SYD_V_CONE").equals(""))
					mun_enc_dis_bean.setSyd_v_cone(new Integer(rs.getString("SYD_V_CONE")));
				else
					mun_enc_dis_bean.setSyd_v_cone(0);
				if(rs.getString("SYD_V_NCON")!=null&&!rs.getString("SYD_V_NCON").equals(""))
					mun_enc_dis_bean.setSyd_v_ncon(new Integer(rs.getString("SYD_V_NCON")));
				else
					mun_enc_dis_bean.setSyd_v_ncon(0);
				if(rs.getString("SYD_L_DEFI")!=null&&!rs.getString("SYD_L_DEFI").equals(""))
					mun_enc_dis_bean.setSyd_l_defi(new Integer(rs.getString("SYD_L_DEFI")));
				else
					mun_enc_dis_bean.setSyd_l_defi(0);
				if(rs.getString("SYD_V_DEFI")!=null&&!rs.getString("SYD_V_DEFI").equals(""))
					mun_enc_dis_bean.setSyd_v_defi(new Integer(rs.getString("SYD_V_DEFI")));
				else
					mun_enc_dis_bean.setSyd_v_defi(0);
				if(rs.getString("SYD_C_DESA")!=null&&!rs.getString("SYD_C_DESA").equals(""))
					mun_enc_dis_bean.setSyd_c_desa(new Integer(rs.getString("SYD_C_DESA")));
				else
					mun_enc_dis_bean.setSyd_c_desa(0);
				if(rs.getString("SYD_C_TRAT")!=null&&!rs.getString("SYD_C_TRAT").equals(""))
					mun_enc_dis_bean.setSyd_c_trat(new Integer(rs.getString("SYD_C_TRAT")));
				else
					mun_enc_dis_bean.setSyd_c_trat(0);
				if(rs.getString("SAU_VIVIEN")!=null&&!rs.getString("SAU_VIVIEN").equals(""))
					mun_enc_dis_bean.setSau_vivien(new Integer(rs.getString("SAU_VIVIEN")));
				else
					mun_enc_dis_bean.setSau_vivien(0);
				if(rs.getString("SAU_POB_RE")!=null&&!rs.getString("SAU_POB_RE").equals(""))
					mun_enc_dis_bean.setSau_pob_re(new Integer(rs.getString("SAU_POB_RE")));
				else
					mun_enc_dis_bean.setSau_pob_re(0);
				if(rs.getString("SAU_POB_ES")!=null&&!rs.getString("SAU_POB_ES").equals(""))
					mun_enc_dis_bean.setSau_pob_es(new Integer(rs.getString("SAU_POB_ES")));
				else
					mun_enc_dis_bean.setSau_pob_es(0);
				if(rs.getString("SAU_VI_DEF")!=null&&!rs.getString("SAU_VI_DEF").equals(""))
					mun_enc_dis_bean.setSau_vi_def(new Integer(rs.getString("SAU_VI_DEF")));
				else
					mun_enc_dis_bean.setSau_vi_def(0);
				if(rs.getString("SAU_RE_DEF")!=null&&!rs.getString("SAU_RE_DEF").equals(""))
					mun_enc_dis_bean.setSau_re_def(new Integer(rs.getString("SAU_RE_DEF")));
				else
					mun_enc_dis_bean.setSau_re_def(0);
				if(rs.getString("SAU_ES_DEF")!=null&&!rs.getString("SAU_ES_DEF").equals(""))
					mun_enc_dis_bean.setSau_es_def(new Integer(rs.getString("SAU_ES_DEF")));
				else
					mun_enc_dis_bean.setSau_es_def(0);
				if(rs.getString("PRODU_BASU")!=null&&!rs.getString("PRODU_BASU").equals(""))
					mun_enc_dis_bean.setProdu_basu(new Integer(rs.getString("PRODU_BASU")));
				else
					mun_enc_dis_bean.setProdu_basu(0);
				if(rs.getString("CONTENEDOR")!=null&&!rs.getString("CONTENEDOR").equals(""))
					mun_enc_dis_bean.setContenedores(new Integer(rs.getString("CONTENEDOR")));
				else
					mun_enc_dis_bean.setContenedores(0);
				if(rs.getString("RBA_V_SSER")!=null&&!rs.getString("RBA_V_SSER").equals(""))
					mun_enc_dis_bean.setRba_v_sser(new Integer(rs.getString("RBA_V_SSER")));
				else
					mun_enc_dis_bean.setRba_v_sser(0);
				if(rs.getString("RBA_PR_SSE")!=null&&!rs.getString("RBA_PR_SSE").equals(""))
					mun_enc_dis_bean.setRba_pr_sse(new Integer(rs.getString("RBA_PR_SSE")));
				else
					mun_enc_dis_bean.setRba_pr_sse(0);
				if(rs.getString("RBA_PE_SSE")!=null&&!rs.getString("RBA_PE_SSE").equals(""))
					mun_enc_dis_bean.setRba_pe_sse(new Integer(rs.getString("RBA_PE_SSE")));
				else
					mun_enc_dis_bean.setRba_pe_sse(0);
				if(rs.getString("RBA_PLALIM")!=null&&!rs.getString("RBA_PLALIM").equals(""))
					mun_enc_dis_bean.setRba_plalim(new Integer(rs.getString("RBA_PLALIM")));
				else
					mun_enc_dis_bean.setRba_plalim(0);
				if(rs.getString("PUNTOS_LUZ")!=null&&!rs.getString("PUNTOS_LUZ").equals(""))
					mun_enc_dis_bean.setPuntos_luz(new Integer(rs.getString("PUNTOS_LUZ")));
				else
					mun_enc_dis_bean.setPuntos_luz(0);
				if(rs.getString("ALU_V_SIN")!=null&&!rs.getString("ALU_V_SIN").equals(""))
					mun_enc_dis_bean.setAlu_v_sin(new Integer(rs.getString("ALU_V_SIN")));
				else
					mun_enc_dis_bean.setAlu_v_sin(0);
				if(rs.getString("ALU_L_SIN")!=null&&!rs.getString("ALU_L_SIN").equals(""))
					mun_enc_dis_bean.setAlu_l_sin(new Integer(rs.getString("ALU_L_SIN")));
				else
					mun_enc_dis_bean.setAlu_l_sin(0);


				lstType.add(mun_enc_dis_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_municipio";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_municipio_bean municipio_bean = new V_municipio_bean();
				
				municipio_bean.setProvincia(rs.getString("PROVINCIA"));
				municipio_bean.setMunicipio(rs.getString("MUNICIPIO"));
				municipio_bean.setIsla("");
				if(rs.getString("DENOMINACI")!=null)
					municipio_bean.setDenominaci(rs.getString("DENOMINACI"));
				else
					municipio_bean.setDenominaci("-");
				lstType.add(municipio_bean);


			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_nivel_ensenanza";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_nivel_ensenanza_bean  nivel_ensenanza_bean = new V_nivel_ensenanza_bean();


				nivel_ensenanza_bean.setClave(rs.getString("CLAVE"));
				nivel_ensenanza_bean.setProvincia(rs.getString("PROVINCIA"));
				nivel_ensenanza_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nivel_ensenanza_bean.setEntidad(rs.getString("ENTIDAD"));
				nivel_ensenanza_bean.setPoblamient(rs.getString("POBLAMIENT"));
				nivel_ensenanza_bean.setOrden_cent(rs.getString("ORDEN_CENT"));
				nivel_ensenanza_bean.setNivel(rs.getString("NIVEL"));
				if(rs.getString("UNIDADES")!=null&&!rs.getString("UNIDADES").equals(""))
					nivel_ensenanza_bean.setUnidades(new Integer(rs.getString("UNIDADES")));
				else
					nivel_ensenanza_bean.setUnidades(0);
				if(rs.getString("PLAZAS")!=null&&!rs.getString("PLAZAS").equals(""))
					nivel_ensenanza_bean.setPlazas(new Integer(rs.getString("PLAZAS")));
				else
					nivel_ensenanza_bean.setPlazas(0);
				if(rs.getString("ALUMNOS")!=null&&!rs.getString("ALUMNOS").equals(""))
					nivel_ensenanza_bean.setAlumnos(new Integer(rs.getString("ALUMNOS")));
				else
					nivel_ensenanza_bean.setAlumnos(0);

				lstType.add(nivel_ensenanza_bean);


			}
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			
			
			sql = "select * from v_nuc_abandonado";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_nuc_abandonado_bean  nuc_abandonado_bean = new V_nuc_abandonado_bean();

				nuc_abandonado_bean.setProvincia(rs.getString("PROVINCIA"));
				nuc_abandonado_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nuc_abandonado_bean.setEntidad(rs.getString("ENTIDAD"));
				nuc_abandonado_bean.setPoblamiento(rs.getString("POBLAMIENT"));
				nuc_abandonado_bean.setA_abandono(rs.getString("A_ABANDONO"));
				nuc_abandonado_bean.setCausa_aban(rs.getString("CAUSA_ABAN"));
				nuc_abandonado_bean.setTitular_ab(rs.getString("TITULAR_AB"));
				nuc_abandonado_bean.setRehabilita(rs.getString("REHABILITA"));
				nuc_abandonado_bean.setAcceso_nuc(rs.getString("ACCESO_NUC"));
				nuc_abandonado_bean.setServ_agua(rs.getString("SERV_AGUA"));
				nuc_abandonado_bean.setServ_elect(rs.getString("SERV_ELECT"));

				lstType.add(nuc_abandonado_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_nucl_encuestado_1";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {


				V_nucl_encuestado_1_bean  nucl_encuestado_1_bean = new V_nucl_encuestado_1_bean();

				nucl_encuestado_1_bean.setProvincia(rs.getString("PROVINCIA"));
				nucl_encuestado_1_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nucl_encuestado_1_bean.setEntidad(rs.getString("ENTIDAD"));
				nucl_encuestado_1_bean.setNucleo(rs.getString("NUCLEO"));
				if(rs.getString("PADRON")!=null&&!rs.getString("PADRON").equals(""))
					nucl_encuestado_1_bean.setPadron(new Integer(rs.getString("PADRON")));
				else
					nucl_encuestado_1_bean.setPadron(0);
				if(rs.getString("POB_ESTACI")!=null&&!rs.getString("POB_ESTACI").equals(""))
					nucl_encuestado_1_bean.setPob_estaci(new Integer(rs.getString("POB_ESTACI")));
				else
					nucl_encuestado_1_bean.setPob_estaci(0);
				if(rs.getString("ALTITUD")!=null&&!rs.getString("ALTITUD").equals(""))
					nucl_encuestado_1_bean.setAltitud(new Integer(rs.getString("ALTITUD")));
				else
					nucl_encuestado_1_bean.setAltitud(0);
				if(rs.getString("VIV_TOTAL")!=null&&!rs.getString("VIV_TOTAL").equals(""))
					nucl_encuestado_1_bean.setViv_total(new Integer(rs.getString("VIV_TOTAL")));
				else
					nucl_encuestado_1_bean.setViv_total(0);
				if(rs.getString("HOTELES")!=null&&!rs.getString("HOTELES").equals(""))
					nucl_encuestado_1_bean.setHoteles(new Integer(rs.getString("HOTELES")));
				else
					nucl_encuestado_1_bean.setHoteles(0);
				if(rs.getString("CASAS_RURA")!=null&&!rs.getString("CASAS_RURA").equals(""))
					nucl_encuestado_1_bean.setCasas_rural(new Integer(rs.getString("CASAS_RURA")));
				else
					nucl_encuestado_1_bean.setCasas_rural(0);
				nucl_encuestado_1_bean.setAccesib(rs.getString("ACCESIB"));


				lstType.add(nucl_encuestado_1_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_nucl_encuestado_2";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_nucl_encuestado_2_bean  nucl_encuestado_2_bean = new V_nucl_encuestado_2_bean();

				nucl_encuestado_2_bean.setProvincia(rs.getString("PROVINCIA"));
				nucl_encuestado_2_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nucl_encuestado_2_bean.setEntidad(rs.getString("ENTIDAD"));
				nucl_encuestado_2_bean.setNucleo(rs.getString("NUCLEO"));
				nucl_encuestado_2_bean.setAag_caudal(rs.getString("AAG_CAUDAL"));
				nucl_encuestado_2_bean.setAag_restri(rs.getString("AAG_RESTRI"));
				nucl_encuestado_2_bean.setAag_contad(rs.getString("AAG_CONTAD"));
				nucl_encuestado_2_bean.setAag_tasa(rs.getString("AAG_TASA"));
				nucl_encuestado_2_bean.setAag_instal(rs.getString("AAG_INSTAL"));
				nucl_encuestado_2_bean.setAag_hidran(rs.getString("AAG_HIDRAN"));
				if(rs.getString("AAG_HIDRAN")!=null&&!rs.getString("AAG_HIDRAN").equals("NO"))
					nucl_encuestado_2_bean.setAag_est_hi(rs.getString("AAG_EST_HI"));
				else
					nucl_encuestado_2_bean.setAag_est_hi("");		
				nucl_encuestado_2_bean.setAag_valvul(rs.getString("AAG_VALVUL"));
				if(rs.getString("AAG_VALVUL")!=null&&!rs.getString("AAG_VALVUL").equals("NO"))
					nucl_encuestado_2_bean.setAag_est_va(rs.getString("AAG_EST_VA"));
				else
					nucl_encuestado_2_bean.setAag_est_va("");
				nucl_encuestado_2_bean.setAag_bocasr(rs.getString("AAG_BOCASR"));
				if(rs.getString("AAG_BOCASR")!=null&&!rs.getString("AAG_BOCASR").equals("NO"))
					nucl_encuestado_2_bean.setAag_est_bo(rs.getString("AAG_EST_BO"));
				else
					nucl_encuestado_2_bean.setAag_est_bo("");

				nucl_encuestado_2_bean.setCisterna(rs.getString("CISTERNA"));

				lstType.add(nucl_encuestado_2_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_nucl_encuestado_3";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_nucl_encuestado_3_bean  nucl_encuestado_3_bean = new V_nucl_encuestado_3_bean();

				nucl_encuestado_3_bean.setProvincia(rs.getString("PROVINCIA"));
				nucl_encuestado_3_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nucl_encuestado_3_bean.setEntidad(rs.getString("ENTIDAD"));
				nucl_encuestado_3_bean.setNucleo(rs.getString("NUCLEO"));
				if(rs.getString("AAG_V_CONE")!=null&&!rs.getString("AAG_V_CONE").equals(""))
					nucl_encuestado_3_bean.setAag_v_cone(new Integer(rs.getString("AAG_V_CONE")));
				else
					nucl_encuestado_3_bean.setAag_v_cone(0);
				if(rs.getString("AAG_V_CONE")!=null&&!rs.getString("AAG_V_CONE").equals(""))

				nucl_encuestado_3_bean.setAag_v_ncon(new Integer(rs.getString("AAG_V_NCON")));
				if(rs.getString("AAG_V_CONE")!=null&&!rs.getString("AAG_V_CONE").equals(""))

				nucl_encuestado_3_bean.setAag_c_invi(new Integer(rs.getString("AAG_C_INVI")));
				if(rs.getString("AAG_V_CONE")!=null&&!rs.getString("AAG_V_CONE").equals(""))

				nucl_encuestado_3_bean.setAag_c_vera(new Integer(rs.getString("AAG_C_VERA")));
				if(rs.getString("AAG_V_EXPR")!=null&&!rs.getString("AAG_V_EXPR").equals(""))
					nucl_encuestado_3_bean.setAag_v_expr(new Integer(rs.getString("AAG_V_EXPR")));
				else
					nucl_encuestado_3_bean.setAag_v_expr(0);
				if(rs.getString("AAG_V_DEPR")!=null&&!rs.getString("AAG_V_DEPR").equals(""))
					nucl_encuestado_3_bean.setAag_v_depr(new Integer(rs.getString("AAG_V_DEPR")));
				else
					nucl_encuestado_3_bean.setAag_v_depr(0);
				if(rs.getString("AAG_PERDID")!=null&&!rs.getString("AAG_PERDID").equals(""))
					nucl_encuestado_3_bean.setAag_perdid(new Integer(rs.getString("AAG_PERDID")));
				else
					nucl_encuestado_3_bean.setAag_perdid(0);
				if(rs.getString("AAG_CALIDA")!=null)
					nucl_encuestado_3_bean.setAag_calida(rs.getString("AAG_CALIDA"));
				else
					nucl_encuestado_3_bean.setAag_calida("");
				if(rs.getString("AAG_L_DEFI")!=null&&!rs.getString("AAG_L_DEFI").equals(""))
					nucl_encuestado_3_bean.setAag_l_defi(new Integer(rs.getString("AAG_L_DEFI")));
				else
					nucl_encuestado_3_bean.setAag_l_defi(0);
				if(rs.getString("AAG_V_DEFI")!=null&&!rs.getString("AAG_V_DEFI").equals(""))
					nucl_encuestado_3_bean.setAag_v_defi(new Integer(rs.getString("AAG_V_DEFI")));
				else
					nucl_encuestado_3_bean.setAag_v_defi(0);
				if(rs.getString("AAG_PR_DEF")!=null&&!rs.getString("AAG_PR_DEF").equals(""))
					nucl_encuestado_3_bean.setAag_pr_def(new Integer(rs.getString("AAG_PR_DEF")));
				else
					nucl_encuestado_3_bean.setAag_pr_def(0);
				if(rs.getString("AAG_PE_DEF")!=null&&!rs.getString("AAG_PE_DEF").equals(""))
					nucl_encuestado_3_bean.setAag_pe_def(new Integer(rs.getString("AAG_PE_DEF")));
				else
					nucl_encuestado_3_bean.setAag_pe_def(0);

				lstType.add(nucl_encuestado_3_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_nucl_encuestado_4";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_nucl_encuestado_4_bean  nucl_encuestado_4_bean = new V_nucl_encuestado_4_bean();

				nucl_encuestado_4_bean.setProvincia(rs.getString("PROVINCIA"));
				nucl_encuestado_4_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nucl_encuestado_4_bean.setEntidad(rs.getString("ENTIDAD"));
				nucl_encuestado_4_bean.setNucleo(rs.getString("NUCLEO"));
				if(rs.getString("AAU_VIVIEN")!=null&&!rs.getString("AAU_VIVIEN").equals("")){
					nucl_encuestado_4_bean.setAau_vivien(new Integer(rs.getString("AAU_VIVIEN")));
				}else
					nucl_encuestado_4_bean.setAau_vivien(0);
				if(rs.getString("AAU_POB_RE")!=null&&!rs.getString("AAU_POB_RE").equals("")){
					nucl_encuestado_4_bean.setAau_pob_re(new Integer(rs.getString("AAU_POB_RE")));
				}else
					nucl_encuestado_4_bean.setAau_pob_re(0);
				if(rs.getString("AAU_POB_ES")!=null&&!rs.getString("AAU_POB_ES").equals("")){
					nucl_encuestado_4_bean.setAau_pob_es(new Integer(rs.getString("AAU_POB_ES")));
				}else	
					nucl_encuestado_4_bean.setAau_pob_es(0);
				if(rs.getString("AAU_DEF_VI")!=null&&!rs.getString("AAU_DEF_VI").equals("")){
					nucl_encuestado_4_bean.setAau_def_vi(new Integer(rs.getString("AAU_DEF_VI")));
				}else
					nucl_encuestado_4_bean.setAau_def_vi(0);
				if(rs.getString("AAU_DEF_RE")!=null&&!rs.getString("AAU_DEF_RE").equals("")){
					nucl_encuestado_4_bean.setAau_def_re(new Integer(rs.getString("AAU_DEF_RE")));
				}else
					nucl_encuestado_4_bean.setAau_def_re(0);
				if(rs.getString("AAU_DEF_ES")!=null&&!rs.getString("AAU_DEF_ES").equals("")){
					nucl_encuestado_4_bean.setAau_def_es(new Integer(rs.getString("AAU_DEF_ES")));
				}else
					nucl_encuestado_4_bean.setAau_def_es(0);
				if(rs.getString("AAU_FECONT")!=null&&!rs.getString("AAU_FECONT").equals("")){
					nucl_encuestado_4_bean.setAau_fecont(new Integer(rs.getString("AAU_FECONT")));
				}else
					nucl_encuestado_4_bean.setAau_fecont(0);
				if(rs.getString("AAU_FENCON")!=null&&!rs.getString("AAU_FENCON").equals("")){
					nucl_encuestado_4_bean.setAau_fencon(new Integer(rs.getString("AAU_FENCON")));
				}else
					nucl_encuestado_4_bean.setAau_fencon(0);

				nucl_encuestado_4_bean.setAau_caudal(rs.getString("AAU_CAUDAL"));

				lstType.add(nucl_encuestado_4_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_nucl_encuestado_5";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_nucl_encuestado_5_bean  nucl_encuestado_5_bean = new V_nucl_encuestado_5_bean();

				nucl_encuestado_5_bean.setProvincia(rs.getString("PROVINCIA"));
				nucl_encuestado_5_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nucl_encuestado_5_bean.setEntidad(rs.getString("ENTIDAD"));
				nucl_encuestado_5_bean.setNucleo(rs.getString("NUCLEO"));
				nucl_encuestado_5_bean.setSyd_pozos(rs.getString("SYD_POZOS"));
				nucl_encuestado_5_bean.setSyd_sumide(rs.getString("SYD_SUMIDE"));
				nucl_encuestado_5_bean.setSyd_ali_co(rs.getString("SYD_ALI_CO"));
				nucl_encuestado_5_bean.setSyd_ali_si(rs.getString("SYD_ALI_SI"));
				nucl_encuestado_5_bean.setSyd_calida(rs.getString("SYD_CALIDA"));		
				if(rs.getString("SYD_V_CONE")!=null&&!rs.getString("SYD_V_CONE").equals(""))
					nucl_encuestado_5_bean.setSyd_v_cone(new Integer(rs.getString("SYD_V_CONE")));
				else
					nucl_encuestado_5_bean.setSyd_v_cone(0);
				if(rs.getString("SYD_V_NCON")!=null&&!rs.getString("SYD_V_NCON").equals(""))
					nucl_encuestado_5_bean.setSyd_v_ncon(new Integer(rs.getString("SYD_V_NCON")));
				else
					nucl_encuestado_5_bean.setSyd_v_ncon(0);
				if(rs.getString("SYD_L_DEFI")!=null&&!rs.getString("SYD_L_DEFI").equals(""))
					nucl_encuestado_5_bean.setSyd_l_defi(new Integer(rs.getString("SYD_L_DEFI")));
				else
					nucl_encuestado_5_bean.setSyd_l_defi(0);
				if(rs.getString("SYD_V_DEFI")!=null&&!rs.getString("SYD_V_DEFI").equals(""))
					nucl_encuestado_5_bean.setSyd_v_defi(new Integer(rs.getString("SYD_V_DEFI")));
				else
					nucl_encuestado_5_bean.setSyd_v_defi(0);
				if(rs.getString("SYD_PR_DEF")!=null&&!rs.getString("SYD_PR_DEF").equals(""))
					nucl_encuestado_5_bean.setSyd_pr_def(new Integer(rs.getString("SYD_PR_DEF")));
				else
					nucl_encuestado_5_bean.setSyd_pr_def(0);
				if(rs.getString("SYD_PE_DEF")!=null&&!rs.getString("SYD_PE_DEF").equals(""))
					nucl_encuestado_5_bean.setSyd_pe_def(new Integer(rs.getString("SYD_PE_DEF")));
				else
					nucl_encuestado_5_bean.setSyd_pe_def(0);
				if(rs.getString("SYD_C_DESA")!=null&&!rs.getString("SYD_C_DESA").equals(""))
					nucl_encuestado_5_bean.setSyd_c_desa(new Integer(rs.getString("SYD_C_DESA")));
				else
					nucl_encuestado_5_bean.setSyd_c_desa(0);
				if(rs.getString("SYD_C_TRAT")!=null&&!rs.getString("SYD_C_TRAT").equals(""))
					nucl_encuestado_5_bean.setSyd_c_trat(new Integer(rs.getString("SYD_C_TRAT")));
				else
					nucl_encuestado_5_bean.setSyd_c_trat(0);
				if(rs.getString("SYD_RE_URB")!=null&&!rs.getString("SYD_RE_URB").equals(""))
					nucl_encuestado_5_bean.setSyd_re_urb(new Integer(rs.getString("SYD_RE_URB")));
				else
					nucl_encuestado_5_bean.setSyd_re_urb(0);
				if(rs.getString("SYD_RE_RUS")!=null&&!rs.getString("SYD_RE_RUS").equals(""))
					nucl_encuestado_5_bean.setSyd_re_rus(new Integer(rs.getString("SYD_RE_RUS")));
				else
					nucl_encuestado_5_bean.setSyd_re_rus(0);	
				if(rs.getString("SYD_RE_IND")!=null&&!rs.getString("SYD_RE_IND").equals(""))
					nucl_encuestado_5_bean.setSyd_re_ind(new Integer(rs.getString("SYD_RE_IND")));
				else
					nucl_encuestado_5_bean.setSyd_re_ind(0);
				
				lstType.add(nucl_encuestado_5_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_nucl_encuestado_6";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_nucl_encuestado_6_bean  nucl_encuestado_6_bean = new V_nucl_encuestado_6_bean();

				nucl_encuestado_6_bean.setProvincia(rs.getString("PROVINCIA"));
				nucl_encuestado_6_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nucl_encuestado_6_bean.setEntidad(rs.getString("ENTIDAD"));
				nucl_encuestado_6_bean.setNucleo(rs.getString("NUCLEO"));	
				if(rs.getString("RBA_V_SSER")!=null&&!rs.getString("RBA_V_SSER").equals(""))
					nucl_encuestado_6_bean.setRba_v_sser(new Integer(rs.getString("RBA_V_SSER")));
				else
					nucl_encuestado_6_bean.setRba_v_sser(0);
				if(rs.getString("RBA_PR_SSE")!=null&&!rs.getString("RBA_PR_SSE").equals(""))
					nucl_encuestado_6_bean.setRba_pr_sse(new Integer(rs.getString("RBA_PR_SSE")));
				else
					nucl_encuestado_6_bean.setRba_pr_sse(0);
				if(rs.getString("RBA_PE_SSE")!=null&&!rs.getString("RBA_PE_SSE").equals(""))
					nucl_encuestado_6_bean.setRba_pe_sse(new Integer(rs.getString("RBA_PE_SSE")));
				else
					nucl_encuestado_6_bean.setRba_pe_sse(0);
				if(rs.getString("RBA_SERLIM")!=null)
					nucl_encuestado_6_bean.setRba_serlim(rs.getString("RBA_SERLIM"));	
				else
					nucl_encuestado_6_bean.setRba_serlim("");
				if(rs.getString("RBA_PLALIM")!=null&&!rs.getString("RBA_PLALIM").equals(""))
					nucl_encuestado_6_bean.setRba_plalim(new Integer(rs.getString("RBA_PLALIM")));
				else
					nucl_encuestado_6_bean.setRba_plalim(0);

				lstType.add(nucl_encuestado_6_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_nucl_encuestado_7";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_nucl_encuestado_7_bean  nucl_encuestado_7_bean = new V_nucl_encuestado_7_bean();

				nucl_encuestado_7_bean.setProvincia(rs.getString("PROVINCIA"));
				nucl_encuestado_7_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nucl_encuestado_7_bean.setEntidad(rs.getString("ENTIDAD"));
				nucl_encuestado_7_bean.setNucleo(rs.getString("POBLAMIENT"));
				nucl_encuestado_7_bean.setTv_ant(rs.getString("TV_ANT"));
				nucl_encuestado_7_bean.setTv_ca(rs.getString("TV_CA"));
				nucl_encuestado_7_bean.setTm_gsm(rs.getString("TM_GSM"));
				nucl_encuestado_7_bean.setTm_umts(rs.getString("TM_UMTS"));
				nucl_encuestado_7_bean.setTm_gprs(rs.getString("TM_GPRS"));
				nucl_encuestado_7_bean.setCorreo(rs.getString("CORREO"));
				nucl_encuestado_7_bean.setBa_rd(rs.getString("BA_RD"));
				nucl_encuestado_7_bean.setBa_xd(rs.getString("BA_XD"));
				nucl_encuestado_7_bean.setBa_wi(rs.getString("BA_WI"));
				nucl_encuestado_7_bean.setBa_ca(rs.getString("BA_CA"));
				nucl_encuestado_7_bean.setBa_rb(rs.getString("BA_RB"));
				nucl_encuestado_7_bean.setBa_st(rs.getString("BA_ST"));
				nucl_encuestado_7_bean.setCapi(rs.getString("CAPI"));
				nucl_encuestado_7_bean.setElectricid(rs.getString("ELECTRICID"));
				nucl_encuestado_7_bean.setGas(rs.getString("GAS"));
				if(rs.getString("ALU_V_SIN")!=null&&!rs.getString("ALU_V_SIN").equals(""))
					nucl_encuestado_7_bean.setAlu_v_sin(new Integer(rs.getString("ALU_V_SIN")));
				else
					nucl_encuestado_7_bean.setAlu_v_sin(0);
				if(rs.getString("ALU_V_SIN")!=null&&!rs.getString("ALU_V_SIN").equals(""))
					nucl_encuestado_7_bean.setAlu_l_sin(new Integer(rs.getString("ALU_L_SIN")));
				else
					nucl_encuestado_7_bean.setAlu_l_sin(0);

				
				lstType.add(nucl_encuestado_7_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_nucleo_poblacion";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_nucleo_poblacion_bean  nucleo_poblacion_bean = new V_nucleo_poblacion_bean();

				nucleo_poblacion_bean.setProvincia(rs.getString("PROVINCIA"));
				nucleo_poblacion_bean.setMunicipio(rs.getString("MUNICIPIO"));
				nucleo_poblacion_bean.setEntidad(rs.getString("ENTIDAD"));
				nucleo_poblacion_bean.setPoblamient(rs.getString("POBLAMIENT"));
				if(rs.getString("DENOMINACI")!=null)
					nucleo_poblacion_bean.setDenominaci(rs.getString("DENOMINACI"));
				else
					nucleo_poblacion_bean.setDenominaci("-");
			
				lstType.add(nucleo_poblacion_bean);


			}	
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			
			sql = "select * from v_ot_serv_municipal";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_ot_serv_municipal_bean  ot_serv_municipal_bean = new V_ot_serv_municipal_bean();

				ot_serv_municipal_bean.setProvincia(rs.getString("PROVINCIA"));
				ot_serv_municipal_bean.setMunicipio(rs.getString("MUNICIPIO"));
				ot_serv_municipal_bean.setSw_inf_grl(rs.getString("SW_INF_GRL"));
				ot_serv_municipal_bean.setSw_inf_tur(rs.getString("SW_INF_TUR"));	
				ot_serv_municipal_bean.setSw_gb_elec(rs.getString("SW_GB_ELEC"));	
				ot_serv_municipal_bean.setOrd_soterr(rs.getString("ORD_SOTERR"));	
				ot_serv_municipal_bean.setEn_eolica(rs.getString("EN_EOLICA"));	
				if(rs.getString("KW_EOLICA")!=null&&!rs.getString("KW_EOLICA").equals(""))
					ot_serv_municipal_bean.setKw_eolica(new Integer(rs.getString("KW_EOLICA")));
				ot_serv_municipal_bean.setEn_solar(rs.getString("EN_SOLAR"));	
				if(rs.getString("KW_SOLAR")!=null&&!rs.getString("KW_SOLAR").equals(""))
					ot_serv_municipal_bean.setKw_solar(new Integer(rs.getString("KW_SOLAR")));
				else
					ot_serv_municipal_bean.setKw_solar(0);
				ot_serv_municipal_bean.setPl_mareo(rs.getString("PL_MAREO"));	
				if(rs.getString("KW_MAREO")!=null&&!rs.getString("KW_MAREO").equals(""))
					ot_serv_municipal_bean.setKw_mareo(new Integer(rs.getString("KW_MAREO")));
				else
					ot_serv_municipal_bean.setKw_mareo(0);
				ot_serv_municipal_bean.setOt_energ(rs.getString("OT_ENERG"));	
				if(rs.getString("KW_ENERG")!=null&&!rs.getString("KW_ENERG").equals(""))
					ot_serv_municipal_bean.setKw_energ(new Integer(rs.getString("KW_ENERG")));
				else
					ot_serv_municipal_bean.setKw_energ(0);
				ot_serv_municipal_bean.setCob_serv_telf_m(rs.getString("COB_SERV_TELF_M"));	
				ot_serv_municipal_bean.setTv_dig_calbe(rs.getString("TV_DIG_CABLE"));	

				lstType.add(ot_serv_municipal_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_padron";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {
				
				V_padron_bean  padron_bean = new V_padron_bean();

				padron_bean.setCodprov(rs.getString("PROVINCIA"));
				padron_bean.setCodmunic(rs.getString("MUNICIPIO"));
				if(rs.getString("HOMBRES")!=null&&!rs.getString("HOMBRES").equals(""))
					padron_bean.setN_hombre_a1(new Integer(rs.getString("HOMBRES")));
				else
					padron_bean.setN_hombre_a1(0);
				if(rs.getString("MUJERES")!=null&&!rs.getString("MUJERES").equals(""))
					padron_bean.setN_mujeres_a1(new Integer(rs.getString("MUJERES")));
				else
					padron_bean.setN_mujeres_a1(0);
				if(rs.getString("TOTAL_POB")!=null&&!rs.getString("TOTAL_POB").equals(""))
					padron_bean.setTotal_poblacion_a1(new Integer(rs.getString("TOTAL_POB")));
				else
					padron_bean.setTotal_poblacion_a1(0);
				
				lstType.add(padron_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_parque";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_parque_bean  parque_bean = new V_parque_bean();

				parque_bean.setClave(rs.getString("CLAVE"));
				parque_bean.setProvincia(rs.getString("PROVINCIA"));
				parque_bean.setMunicipio(rs.getString("MUNICIPIO"));
				parque_bean.setEntidad(rs.getString("ENTIDAD"));
				parque_bean.setPoblamient(rs.getString("POBLAMIENT"));
				parque_bean.setOrden_parq(rs.getString("ORDEN_PARQ"));
				parque_bean.setNombre(rs.getString("NOMBRE"));
				parque_bean.setTipo_parq(rs.getString("TIPO_PARQ"));
				parque_bean.setTitular(rs.getString("TITULAR"));
				parque_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					parque_bean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					parque_bean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					parque_bean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					parque_bean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					parque_bean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					parque_bean.setS_sola(0);
				parque_bean.setAgua(rs.getString("AGUA"));
				parque_bean.setSaneamient(rs.getString("SANEAMIENT"));
				parque_bean.setElectricid(rs.getString("ELECTRICID"));
				parque_bean.setComedor(rs.getString("COMEDOR"));
				parque_bean.setJuegos_inf(rs.getString("JUEGOS_INF"));
				parque_bean.setOtras(rs.getString("OTRAS"));
				parque_bean.setAcceso_s_ruedas(rs.getString("ACCESO_S_RUEDAS"));
				parque_bean.setEstado(rs.getString("ESTADO"));

				lstType.add(parque_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_plan_urbanistico";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_plan_urbanistico_bean plan_urbanistico_bean = new V_plan_urbanistico_bean();

				plan_urbanistico_bean.setProvincia(rs.getString("PROVINCIA"));
				plan_urbanistico_bean.setMunicipio(rs.getString("MUNICIPIO"));
				plan_urbanistico_bean.setTipo_urba(rs.getString("TIPO_URBA"));
				plan_urbanistico_bean.setEstado_tra(rs.getString("ESTADO_TRA"));
				if(rs.getString("DENOMINACI")!=null)
					plan_urbanistico_bean.setDenominaci(rs.getString("DENOMINACI"));
				else
					plan_urbanistico_bean.setDenominaci("-");
				if(rs.getString("SUPERFICIE")!=null&&!rs.getString("SUPERFICIE").equals(""))
					plan_urbanistico_bean.setSuperficie(new Double(rs.getString("SUPERFICIE")));
				else
					plan_urbanistico_bean.setSuperficie(0.0);
				if(rs.getString("BO")!=null&&!rs.getString("BO").equals(""))
					plan_urbanistico_bean.setBo(LocalGISEIELUtils.formatFecha(rs.getDate("BO")));
				else
					plan_urbanistico_bean.setBo(null);
				if(rs.getString("URBAN")!=null&&!rs.getString("URBAN").equals(""))
					plan_urbanistico_bean.setUrban(Double.parseDouble(rs.getString("URBAN")));
				else
					plan_urbanistico_bean.setUrban(0);
				if(rs.getString("NO_URBABLE")!=null&&!rs.getString("NO_URBABLE").equals(""))
					plan_urbanistico_bean.setNo_urbable(Double.parseDouble(rs.getString("NO_URBABLE")));
				else
					plan_urbanistico_bean.setNo_urbable(0);
				if(rs.getString("NOURBABLE_")!=null&&!rs.getString("NOURBABLE_").equals(""))
					plan_urbanistico_bean.setNourbable_(Double.parseDouble(rs.getString("NOURBABLE_")));
				else
					plan_urbanistico_bean.setNourbable_(0);
				lstType.add(plan_urbanistico_bean);

			}		
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_poblamiento";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_poblamiento_bean poblamiento_bean = new V_poblamiento_bean();

				poblamiento_bean.setProvincia(rs.getString("PROVINCIA"));
				poblamiento_bean.setMunicipio(rs.getString("MUNICIPIO"));
				poblamiento_bean.setEntidad(rs.getString("ENTIDAD"));
				poblamiento_bean.setPoblamient(rs.getString("POBLAMIENTO"));
				
				lstType.add(poblamiento_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_potabilizacion_enc";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_potabilizacion_enc_bean  potabilizacion_enc_bean = new V_potabilizacion_enc_bean();

				potabilizacion_enc_bean.setClave(rs.getString("CLAVE"));
				potabilizacion_enc_bean.setProvincia(rs.getString("PROVINCIA"));
				potabilizacion_enc_bean.setMunicipio(rs.getString("MUNICIPIO"));
				potabilizacion_enc_bean.setOrden_trat(rs.getString("ORDEN_TRAT"));
				potabilizacion_enc_bean.setTipo_tra(rs.getString("TIPO_TRA"));
				potabilizacion_enc_bean.setUbicacion(rs.getString("UBICACION"));
				potabilizacion_enc_bean.setS_desinf(rs.getString("S_DESINF"));
				potabilizacion_enc_bean.setCat_a1(rs.getString("CAT_A1"));
				potabilizacion_enc_bean.setCat_a2(rs.getString("CAT_A2"));
				potabilizacion_enc_bean.setCat_a3(rs.getString("CAT_A3"));
				potabilizacion_enc_bean.setDesaladora(rs.getString("DESALADORA"));
				potabilizacion_enc_bean.setOtros(rs.getString("OTROS"));
				potabilizacion_enc_bean.setDesinf_1(rs.getString("DESINF_1"));
				potabilizacion_enc_bean.setDesinf_2(rs.getString("DESINF_2"));
				potabilizacion_enc_bean.setDesinf_3(rs.getString("DESINF_3"));
				potabilizacion_enc_bean.setPeriodicid(rs.getString("PERIODICID"));
				potabilizacion_enc_bean.setOrganismo(rs.getString("ORGANISMO"));
				potabilizacion_enc_bean.setEstado(rs.getString("ESTADO"));
				
				lstType.add(potabilizacion_enc_bean);


			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_potabilizacion_enc_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_potabilizacion_enc_m50_bean  potabilizacion_enc_m50_bean = new V_potabilizacion_enc_m50_bean();

				potabilizacion_enc_m50_bean.setClave(rs.getString("CLAVE"));
				potabilizacion_enc_m50_bean.setProvincia(rs.getString("PROVINCIA"));
				potabilizacion_enc_m50_bean.setMunicipio(rs.getString("MUNICIPIO"));
				potabilizacion_enc_m50_bean.setOrden_trat(rs.getString("ORDEN_TRAT"));
				potabilizacion_enc_m50_bean.setTipo_tra(rs.getString("TIPO_TRA"));
				potabilizacion_enc_m50_bean.setUbicacion(rs.getString("UBICACION"));
				potabilizacion_enc_m50_bean.setS_desinf(rs.getString("S_DESINF"));
				potabilizacion_enc_m50_bean.setCat_a1(rs.getString("CAT_A1"));
				potabilizacion_enc_m50_bean.setCat_a2(rs.getString("CAT_A2"));
				potabilizacion_enc_m50_bean.setCat_a3(rs.getString("CAT_A3"));
				potabilizacion_enc_m50_bean.setDesaladora(rs.getString("DESALADORA"));
				potabilizacion_enc_m50_bean.setOtros(rs.getString("OTROS"));
				potabilizacion_enc_m50_bean.setDesinf_1(rs.getString("DESINF_1"));
				potabilizacion_enc_m50_bean.setDesinf_2(rs.getString("DESINF_2"));
				potabilizacion_enc_m50_bean.setDesinf_3(rs.getString("DESINF_3"));
				potabilizacion_enc_m50_bean.setPeriodicid(rs.getString("PERIODICID"));
				potabilizacion_enc_m50_bean.setOrganismo(rs.getString("ORGANISMO"));
				potabilizacion_enc_m50_bean.setEstado(rs.getString("ESTADO"));
				
				lstType.add(potabilizacion_enc_m50_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_proteccion_civil";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_proteccion_civil_bean  proteccion_civil_bean = new V_proteccion_civil_bean();

				proteccion_civil_bean.setClave(rs.getString("CLAVE"));
				proteccion_civil_bean.setProvincia(rs.getString("PROVINCIA"));
				proteccion_civil_bean.setMunicipio(rs.getString("MUNICIPIO"));
				proteccion_civil_bean.setEntidad(rs.getString("ENTIDAD"));
				proteccion_civil_bean.setPoblamient(rs.getString("POBLAMIENT"));
				proteccion_civil_bean.setOrden_prot(rs.getString("ORDEN_PROT"));
				proteccion_civil_bean.setNombre(rs.getString("NOMBRE"));
				proteccion_civil_bean.setTipo_pciv(rs.getString("TIPO_PCIV"));
				proteccion_civil_bean.setTitular(rs.getString("TITULAR"));
				proteccion_civil_bean.setAmbito(rs.getString("AMBITO"));
				proteccion_civil_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("PLAN_PROFE")!=null&&!rs.getString("PLAN_PROFE").equals(""))
					proteccion_civil_bean.setPlan_profe(new Integer(rs.getString("PLAN_PROFE")));
				else
					proteccion_civil_bean.setPlan_profe(0);
				if(rs.getString("PLAN_VOLUN")!=null&&!rs.getString("PLAN_VOLUN").equals(""))
					proteccion_civil_bean.setPlan_volun(new Integer(rs.getString("PLAN_VOLUN")));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					proteccion_civil_bean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					proteccion_civil_bean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					proteccion_civil_bean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					proteccion_civil_bean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					proteccion_civil_bean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					proteccion_civil_bean.setS_sola(0);
				proteccion_civil_bean.setAcceso_s_ruedas(rs.getString("ACCESO_S_RUEDAS"));
				proteccion_civil_bean.setEstado(rs.getString("ESTADO"));
				if(rs.getString("VEHIC_INCE")!=null&&!rs.getString("VEHIC_INCE").equals(""))
					proteccion_civil_bean.setVehic_ince(new Integer(rs.getString("VEHIC_INCE")));
				else
					proteccion_civil_bean.setVehic_ince(0);
				if(rs.getString("VEHIC_RESC")!=null&&!rs.getString("VEHIC_RESC").equals(""))
					proteccion_civil_bean.setVehic_resc(new Integer(rs.getString("VEHIC_RESC")));
				else
					proteccion_civil_bean.setVehic_resc(0);
				if(rs.getString("AMBULANCIA")!=null&&!rs.getString("AMBULANCIA").equals(""))
					proteccion_civil_bean.setAmbulancia(new Integer(rs.getString("AMBULANCIA")));
				else
					proteccion_civil_bean.setAmbulancia(0);
				if(rs.getString("MEDIOS_AER")!=null&&!rs.getString("MEDIOS_AER").equals(""))
					proteccion_civil_bean.setMedios_aer(new Integer(rs.getString("MEDIOS_AER")));
				else
					proteccion_civil_bean.setMedios_aer(0);
				if(rs.getString("OTROS_VEHI")!=null&&!rs.getString("OTROS_VEHI").equals(""))
					proteccion_civil_bean.setOtros_vehi(new Integer(rs.getString("OTROS_VEHI")));
				else
					proteccion_civil_bean.setOtros_vehi(0);
				if(rs.getString("QUITANIEVE")!=null&&!rs.getString("QUITANIEVE").equals(""))
					proteccion_civil_bean.setQuitanieve(new Integer(rs.getString("QUITANIEVE")));
				else
					proteccion_civil_bean.setQuitanieve(0);
				if(rs.getString("DETEC_INCE")!=null&&!rs.getString("DETEC_INCE").equals(""))
					proteccion_civil_bean.setDetec_ince(new Integer(rs.getString("DETEC_INCE")));
				else
					proteccion_civil_bean.setDetec_ince(0);
				if(rs.getString("OTROS")!=null&&!rs.getString("OTROS").equals(""))
					proteccion_civil_bean.setOtros(new Integer(rs.getString("OTROS")));
				else
					proteccion_civil_bean.setOtros(0);

				lstType.add(proteccion_civil_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_provincia";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_provincia_bean  provincia_bean = new V_provincia_bean();

				provincia_bean.setProvincia(rs.getString("PROVINCIA"));
				if(rs.getString("DENOMINACI")!=null)
					provincia_bean.setDenominaci(rs.getString("DENOMINACI"));
				else
					provincia_bean.setDenominaci("-");

				lstType.add(provincia_bean);

			}	
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_ramal_saneamiento";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_ramal_saneamiento_bean  ramal_saneamiento_bean = new V_ramal_saneamiento_bean();

				ramal_saneamiento_bean.setProvincia(rs.getString("PROVINCIA"));
				ramal_saneamiento_bean.setMunicipio(rs.getString("MUNICIPIO"));
				ramal_saneamiento_bean.setEntidad(rs.getString("ENTIDAD"));
				ramal_saneamiento_bean.setNucleo(rs.getString("NUCLEO"));
				ramal_saneamiento_bean.setTipo_rama(rs.getString("TIPO_RAMA"));
				ramal_saneamiento_bean.setSist_trans(rs.getString("SIST_TRANS"));
				ramal_saneamiento_bean.setEstado(rs.getString("ESTADO"));
				ramal_saneamiento_bean.setTipo_red(rs.getString("TIPO_RED"));
				ramal_saneamiento_bean.setTitular(rs.getString("TITULAR"));
				ramal_saneamiento_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("LONGIT_RAM")!=null&&!rs.getString("LONGIT_RAM").equals(""))
					ramal_saneamiento_bean.setLongit_ram(new Double(Math.rint(new Double(rs.getString("LONGIT_RAM")))).intValue());
				else
					ramal_saneamiento_bean.setLongit_ram(0);
				
				lstType.add(ramal_saneamiento_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_recogida_basura";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_recogida_basura_bean v_recogida_basura_bean = new V_recogida_basura_bean();

				v_recogida_basura_bean.setProvincia(rs.getString("PROVINCIA"));
				v_recogida_basura_bean.setMunicipio(rs.getString("MUNICIPIO"));
				v_recogida_basura_bean.setEntidad(rs.getString("ENTIDAD"));
				v_recogida_basura_bean.setNucleo(rs.getString("NUCLEO"));
				v_recogida_basura_bean.setTipo_rbas(rs.getString("TIPO_RBAS"));
				v_recogida_basura_bean.setGestion(rs.getString("GESTION"));
				v_recogida_basura_bean.setPeriodicid(rs.getString("PERIODICID"));
				v_recogida_basura_bean.setCalidad(rs.getString("CALIDAD"));
				if(rs.getString("PRODU_BASU")!=null&&!rs.getString("PRODU_BASU").equals(""))
					v_recogida_basura_bean.setProdu_basu(LocalGISEIELUtils.redondear(Double.parseDouble(rs.getString("PRODU_BASU")),1));
				else
					v_recogida_basura_bean.setProdu_basu(Double.parseDouble("0.0"));
				if(rs.getString("CONTENEDOR")!=null&&!rs.getString("CONTENEDOR").equals(""))
					v_recogida_basura_bean.setContenedor(new Integer(rs.getString("CONTENEDOR")));
				else
					v_recogida_basura_bean.setContenedor(0);

				lstType.add(v_recogida_basura_bean);
			}	
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_red_distribucion";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_red_distribucion_bean red_distribucion_bean = new V_red_distribucion_bean();

				red_distribucion_bean.setProvincia(rs.getString("PROVINCIA"));
				red_distribucion_bean.setMunicipio(rs.getString("MUNICIPIO"));
				red_distribucion_bean.setEntidad(rs.getString("ENTIDAD"));
				red_distribucion_bean.setNucleo(rs.getString("NUCLEO"));
				red_distribucion_bean.setTipo_rdis(rs.getString("TIPO_RDIS"));
				red_distribucion_bean.setSist_trans(rs.getString("SIST_TRANS"));
				red_distribucion_bean.setEstado(rs.getString("ESTADO"));
				red_distribucion_bean.setTitular(rs.getString("TITULAR"));
				red_distribucion_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("LONGITUD")!=null&&!rs.getString("LONGITUD").equals(""))
					red_distribucion_bean.setLongitud(new Double(Math.rint(new Double(rs.getString("LONGITUD")))).intValue());
				else
					red_distribucion_bean.setLongitud(0);
				lstType.add(red_distribucion_bean);
			}
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_sanea_autonomo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_sanea_autonomo_bean  sanea_autonomo_bean = new V_sanea_autonomo_bean();

				sanea_autonomo_bean.setProvincia(rs.getString("PROVINCIA"));
				sanea_autonomo_bean.setMunicipio(rs.getString("MUNICIPIO"));
				sanea_autonomo_bean.setEntidad(rs.getString("ENTIDAD"));
				sanea_autonomo_bean.setNucleo(rs.getString("NUCLEO"));
				sanea_autonomo_bean.setTipo_sanea(rs.getString("TIPO_SANEA"));
				sanea_autonomo_bean.setEstado(rs.getString("ESTADO"));
				sanea_autonomo_bean.setAdecuacion(rs.getString("ADECUACION"));
				if(rs.getString("SAU_VIVIEN")!=null&&!rs.getString("SAU_VIVIEN").equals(""))
					sanea_autonomo_bean.setSau_vivien(new Integer(rs.getString("SAU_VIVIEN")));
				else
					sanea_autonomo_bean.setSau_vivien(0);
				if(rs.getString("SAU_POB_RE")!=null&&!rs.getString("SAU_POB_RE").equals(""))
					sanea_autonomo_bean.setSau_pob_re(new Integer(rs.getString("SAU_POB_RE")));
				else
					sanea_autonomo_bean.setSau_pob_re(0);
				if(rs.getString("SAU_POB_ES")!=null&&!rs.getString("SAU_POB_ES").equals(""))
					sanea_autonomo_bean.setSau_pob_es(new Integer(rs.getString("SAU_POB_ES")));
				else
					sanea_autonomo_bean.setSau_pob_es(0);
				if(rs.getString("SAU_VI_DEF")!=null&&!rs.getString("SAU_VI_DEF").equals(""))
					sanea_autonomo_bean.setSau_vi_def(new Integer(rs.getString("SAU_VI_DEF")));
				else
					sanea_autonomo_bean.setSau_vi_def(0);
				if(rs.getString("SAU_RE_DEF")!=null&&!rs.getString("SAU_RE_DEF").equals(""))
					sanea_autonomo_bean.setSau_re_def(new Integer(rs.getString("SAU_RE_DEF")));
				else
					sanea_autonomo_bean.setSau_re_def(0);
				if(rs.getString("SAU_ES_DEF")!=null&&!rs.getString("SAU_ES_DEF").equals(""))
					sanea_autonomo_bean.setSau_es_def(new Integer(rs.getString("SAU_ES_DEF")));
				else
					sanea_autonomo_bean.setSau_es_def(0);
				
				lstType.add(sanea_autonomo_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_tanatorio";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_tanatorio_bean  tanatorio_bean = new V_tanatorio_bean();

				tanatorio_bean.setClave(rs.getString("CLAVE"));
				tanatorio_bean.setProvincia(rs.getString("PROVINCIA"));
				tanatorio_bean.setMunicipio(rs.getString("MUNICIPIO"));
				tanatorio_bean.setEntidad(rs.getString("ENTIDAD"));
				tanatorio_bean.setPoblamient(rs.getString("POBLAMIENT"));
				tanatorio_bean.setOrden_tana(rs.getString("ORDEN_TANA"));
				tanatorio_bean.setNombre(rs.getString("NOMBRE"));
				tanatorio_bean.setTitular(rs.getString("TITULAR"));
				tanatorio_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("s_cubi")!=null&&!rs.getString("s_cubi").equals(""))
					tanatorio_bean.setS_cubi(new Integer(rs.getString("s_cubi")));
				else
					tanatorio_bean.setS_cubi(0);
				if(rs.getString("s_aire")!=null&&!rs.getString("s_aire").equals(""))
					tanatorio_bean.setS_aire(new Integer(rs.getString("s_aire")));
				else
					tanatorio_bean.setS_aire(0);
				if(rs.getString("s_sola")!=null&&!rs.getString("s_sola").equals(""))
					tanatorio_bean.setS_sola(new Integer(rs.getString("s_sola")));
				else
					tanatorio_bean.setS_sola(0);
				if(rs.getString("SALAS")!=null&&!rs.getString("SALAS").equals(""))
					tanatorio_bean.setSalas(new Integer(rs.getString("SALAS")));
				else
					tanatorio_bean.setSalas(0);
				tanatorio_bean.setAcceso_s_ruedas(rs.getString("ACCESO_S_RUEDAS"));
				tanatorio_bean.setEstado(rs.getString("ESTADO"));
				
				lstType.add(tanatorio_bean);


			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_tra_potabilizacion";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_tra_potabilizacion_bean tra_potabilizacion_bean = new V_tra_potabilizacion_bean();

				tra_potabilizacion_bean.setProvincia(rs.getString("PROVINCIA"));
				tra_potabilizacion_bean.setClave(rs.getString("CLAVE"));
				tra_potabilizacion_bean.setMunicipio(rs.getString("MUNICIPIO"));
				tra_potabilizacion_bean.setOrden_trat(rs.getString("ORDEN_TRAT"));

				lstType.add(tra_potabilizacion_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			 sql = "select * from v_tramo_carretera";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			while (rs.next()) {

				V_tramo_carretera_bean  tramo_carretera_bean = new V_tramo_carretera_bean();

				tramo_carretera_bean.setProvincia(rs.getString("PROVINCIA"));
				tramo_carretera_bean.setMunicipio(rs.getString("MUNICIPIO"));
				tramo_carretera_bean.setCod_carrt(rs.getString("COD_CARRT"));
				if(rs.getString("PK_INICIAL")!=null&&!rs.getString("PK_INICIAL").equals(""))		
					tramo_carretera_bean.setPk_inicial(Double.parseDouble(rs.getString("PK_INICIAL")) );
				else
					tramo_carretera_bean.setPk_inicial(Double.parseDouble("0.0") );
				if(rs.getString("PK_FINAL")!=null&&!rs.getString("PK_FINAL").equals(""))		
					tramo_carretera_bean.setPk_final(Double.parseDouble(rs.getString("PK_FINAL") ));
				else
					tramo_carretera_bean.setPk_final(Double.parseDouble("0.0"));
				tramo_carretera_bean.setTitular(rs.getString("TITULAR"));
				tramo_carretera_bean.setGestion(rs.getString("GESTION"));
				tramo_carretera_bean.setSenaliza(rs.getString("SENALIZA"));
				tramo_carretera_bean.setFirme(rs.getString("FIRME"));
				tramo_carretera_bean.setEstado(rs.getString("ESTADO"));
				if(rs.getString("ANCHO")!=null&&!rs.getString("ANCHO").equals(""))		
					tramo_carretera_bean.setAncho(Double.parseDouble(rs.getString("ANCHO") ));
				else
					tramo_carretera_bean.setAncho(Double.parseDouble("0.0") );
				if(rs.getString("LONGITUD")!=null && !rs.getString("LONGITUD").equals(""))	
					tramo_carretera_bean.setLongitud(LocalGISEIELUtils.redondear(Double.parseDouble(rs.getString("LONGITUD")) ,1));	
				else
					tramo_carretera_bean.setLongitud(Double.parseDouble("0.0") );	
				if(rs.getString("PASOS_NIVE")!=null&&!rs.getString("PASOS_NIVE").equals(""))		
					tramo_carretera_bean.setPasos_nive(new Integer(rs.getString("PASOS_NIVE")));
				else
					tramo_carretera_bean.setPasos_nive(0);
				tramo_carretera_bean.setDimensiona(rs.getString("DIMENSIONA"));
				tramo_carretera_bean.setMuy_sinuos(rs.getString("MUY_SINUOS"));
				tramo_carretera_bean.setPte_excesi(rs.getString("PTE_EXCESI"));
				tramo_carretera_bean.setFre_estrec(rs.getString("FRE_ESTREC"));


				lstType.add(tramo_carretera_bean);

			}	
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_tramo_colector";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_tramo_colector_bean tramo_colector_bean = new V_tramo_colector_bean();

				tramo_colector_bean.setClave(rs.getString("CLAVE"));
				tramo_colector_bean.setProvincia(rs.getString("PROVINCIA"));
				tramo_colector_bean.setMunicipio(rs.getString("MUNICIPIO"));
				tramo_colector_bean.setOrden_cole(rs.getString("ORDEN_COLE"));
				tramo_colector_bean.setTipo_colec(rs.getString("TIPO_COLEC"));
				tramo_colector_bean.setSist_trans(rs.getString("SIST_TRANS"));
				tramo_colector_bean.setEstado(rs.getString("ESTADO"));
				tramo_colector_bean.setTitular(rs.getString("TITULAR"));
				tramo_colector_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("LONG_TRAMO")!=null&&!rs.getString("LONG_TRAMO").equals(""))
					tramo_colector_bean.setLong_tramo(new Double(Math.rint(Double.parseDouble(rs.getString("LONG_TRAMO") ))).intValue());
				else
					tramo_colector_bean.setLong_tramo(0);
				lstType.add(tramo_colector_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_tramo_colector_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_tramo_colector_m50_bean tramo_colector_m50_bean = new V_tramo_colector_m50_bean();

				tramo_colector_m50_bean.setClave(rs.getString("CLAVE"));
				tramo_colector_m50_bean.setProvincia(rs.getString("PROVINCIA"));
				tramo_colector_m50_bean.setMunicipio(rs.getString("MUNICIPIO"));
				tramo_colector_m50_bean.setOrden_cole(rs.getString("ORDEN_COLE"));
				tramo_colector_m50_bean.setTipo_colec(rs.getString("TIPO_COLEC"));
				tramo_colector_m50_bean.setSist_trans(rs.getString("SIST_TRANS"));
				tramo_colector_m50_bean.setEstado(rs.getString("ESTADO"));
				tramo_colector_m50_bean.setTitular(rs.getString("TITULAR"));
				tramo_colector_m50_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("LONG_TRAMO")!=null&&!rs.getString("LONG_TRAMO").equals(""))
					tramo_colector_m50_bean.setLong_tramo(new Double(Math.rint(Double.parseDouble(rs.getString("LONG_TRAMO")) )).intValue());
				else
					tramo_colector_m50_bean.setLong_tramo(0);

				lstType.add(tramo_colector_m50_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_tramo_conduccion";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_tramo_conduccion_bean tramo_conduccion_bean = new V_tramo_conduccion_bean();

				tramo_conduccion_bean.setClave(rs.getString("CLAVE"));
				tramo_conduccion_bean.setProvincia(rs.getString("PROVINCIA"));
				tramo_conduccion_bean.setMunicipio(rs.getString("MUNICIPIO"));
				tramo_conduccion_bean.setOrden_cond(rs.getString("ORDEN_COND"));
				tramo_conduccion_bean.setTipo_tcond(rs.getString("TIPO_TCOND"));
				tramo_conduccion_bean.setEstado(rs.getString("ESTADO"));
				tramo_conduccion_bean.setTitular(rs.getString("TITULAR"));
				tramo_conduccion_bean.setGestion(rs.getString("GESTION"));				
				if(rs.getString("LONGITUD")!=null&&!rs.getString("LONGITUD").equals(""))
					tramo_conduccion_bean.setLongitud(new Double(Math.rint(Double.parseDouble(rs.getString("LONGITUD")) )).intValue());
				else
					tramo_conduccion_bean.setLongitud(0);
				lstType.add(tramo_conduccion_bean);


			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_tramo_conduccion_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_tramo_conduccion_m50_bean tramo_conduccion_m50_bean = new V_tramo_conduccion_m50_bean();

				tramo_conduccion_m50_bean.setClave(rs.getString("CLAVE"));
				tramo_conduccion_m50_bean.setProvincia(rs.getString("PROVINCIA"));
				tramo_conduccion_m50_bean.setMunicipio(rs.getString("MUNICIPIO"));
				tramo_conduccion_m50_bean.setOrden_cond(rs.getString("ORDEN_COND"));
				tramo_conduccion_m50_bean.setTipo_tcond(rs.getString("TIPO_TCOND"));
				tramo_conduccion_m50_bean.setEstado(rs.getString("ESTADO"));
				tramo_conduccion_m50_bean.setTitular(rs.getString("TITULAR"));
				tramo_conduccion_m50_bean.setGestion(rs.getString("GESTION"));
				if(rs.getString("LONGITUD")!=null&&!rs.getString("LONGITUD").equals(""))
					tramo_conduccion_m50_bean.setLongitud(new Double(Math.rint(Double.parseDouble(rs.getString("LONGITUD")) )).intValue());
				else
					tramo_conduccion_m50_bean.setLongitud(0);
				lstType.add(tramo_conduccion_m50_bean);


			}
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_tramo_emisario";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_tramo_emisario_bean tramo_emisario_bean = new V_tramo_emisario_bean();

				tramo_emisario_bean.setClave(rs.getString("CLAVE"));
				tramo_emisario_bean.setProvincia(rs.getString("PROVINCIA"));
				tramo_emisario_bean.setMunicipio(rs.getString("MUNICIPIO"));
				tramo_emisario_bean.setOrden_emis(rs.getString("ORDEN_EMIS"));
				tramo_emisario_bean.setTipo_mat(rs.getString("TIPO_MAT"));
				tramo_emisario_bean.setEstado(rs.getString("ESTADO"));
				if(rs.getString("LONG_TERRE")!=null&&!rs.getString("LONG_TERRE").equals(""))
					tramo_emisario_bean.setLong_terre(new Double(Math.rint(Double.parseDouble(rs.getString("LONG_TERRE")) )).intValue());
				else
					tramo_emisario_bean.setLong_terre(0);
				if(rs.getString("LONG_MARIT")!=null&&!rs.getString("LONG_MARIT").equals(""))
					tramo_emisario_bean.setLong_marit(new Double(Math.rint(Double.parseDouble(rs.getString("LONG_MARIT")) )).intValue());
				else
					tramo_emisario_bean.setLong_marit(0);

				lstType.add(tramo_emisario_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_tramo_emisario_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_tramo_emisario_m50_bean tramo_emisario_m50_bean = new V_tramo_emisario_m50_bean();

				tramo_emisario_m50_bean.setClave(rs.getString("CLAVE"));
				tramo_emisario_m50_bean.setProvincia(rs.getString("PROVINCIA"));
				tramo_emisario_m50_bean.setMunicipio(rs.getString("MUNICIPIO"));
				tramo_emisario_m50_bean.setOrden_emis(rs.getString("ORDEN_EMIS"));
				tramo_emisario_m50_bean.setTipo_mat(rs.getString("TIPO_MAT"));
				tramo_emisario_m50_bean.setEstado(rs.getString("ESTADO"));
				if(rs.getString("LONG_TERRE")!=null&&!rs.getString("LONG_TERRE").equals(""))
					tramo_emisario_m50_bean.setLong_terre(new Double(Math.rint(Double.parseDouble(rs.getString("LONG_TERRE")))).intValue());
				else
					tramo_emisario_m50_bean.setLong_terre(new Double(Math.rint(Double.parseDouble("0.0"))).intValue());
				if(rs.getString("LONG_MARIT")!=null&&!rs.getString("LONG_MARIT").equals(""))
					tramo_emisario_m50_bean.setLong_marit(new Double(Math.rint(Double.parseDouble(rs.getString("LONG_MARIT") ))).intValue());
				else
					tramo_emisario_m50_bean.setLong_marit(new Double(Math.rint(Double.parseDouble("0.0") )).intValue());

				lstType.add(tramo_emisario_m50_bean);

			}
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_trat_pota_nucleo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {
				
				V_trat_pota_nucleo_bean trat_pota_nucleo_bean = new V_trat_pota_nucleo_bean();

				trat_pota_nucleo_bean.setClave(rs.getString("CLAVE"));
				trat_pota_nucleo_bean.setProvincia(rs.getString("PROVINCIA"));
				trat_pota_nucleo_bean.setMunicipio(rs.getString("MUNICIPIO"));
				trat_pota_nucleo_bean.setEntidad(rs.getString("ENTIDAD"));
				trat_pota_nucleo_bean.setNucleo(rs.getString("NUCLEO"));
				trat_pota_nucleo_bean.setPo_provin(rs.getString("PO_PROVIN"));
				trat_pota_nucleo_bean.setPo_munipi(rs.getString("PO_MUNIPI"));
				trat_pota_nucleo_bean.setOrden_trat(rs.getString("ORDEN_TRAT"));

				lstType.add(trat_pota_nucleo_bean);

			}
			
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_vert_encuestado";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_vert_encuestado_bean  vert_encuestado_bean = new V_vert_encuestado_bean();

				vert_encuestado_bean.setClave(rs.getString("CLAVE"));
				vert_encuestado_bean.setProvincia(rs.getString("PROVINCIA"));
				vert_encuestado_bean.setMunicipio(rs.getString("MUNICIPIO"));
				vert_encuestado_bean.setOrden_ver(rs.getString("ORDEN_VER"));
				vert_encuestado_bean.setTipo_ver(rs.getString("TIPO_VER"));
				vert_encuestado_bean.setTitular(rs.getString("TITULAR"));
				vert_encuestado_bean.setGestion(rs.getString("GESTION"));
				vert_encuestado_bean.setOlores(rs.getString("OLORES"));
				vert_encuestado_bean.setHumos(rs.getString("HUMOS"));
				vert_encuestado_bean.setCont_anima(rs.getString("CONT_ANIMA"));
				vert_encuestado_bean.setR_inun(rs.getString("R_INUN"));
				vert_encuestado_bean.setFiltracion(rs.getString("FILTRACION"));
				vert_encuestado_bean.setImpacto_v(rs.getString("IMPACTO_V"));
				vert_encuestado_bean.setFrec_averi(rs.getString("FREC_AVERI"));
				vert_encuestado_bean.setSaturacion(rs.getString("SATURACION"));
				vert_encuestado_bean.setInestable(rs.getString("INESTABLE"));
				vert_encuestado_bean.setOtros(rs.getString("OTROS"));
				if(rs.getString("CAPAC_TOT")!=null&&!rs.getString("CAPAC_TOT").equals(""))
					vert_encuestado_bean.setCapac_tot(new Integer(rs.getString("CAPAC_TOT")));
				else
					vert_encuestado_bean.setCapac_tot(0);
				if(rs.getString("CAPAC_PORC")!=null&&!rs.getString("CAPAC_PORC").equals(""))
					vert_encuestado_bean.setCapac_porc(new Integer(rs.getString("CAPAC_PORC")));
				else
					vert_encuestado_bean.setCapac_porc(0);
				vert_encuestado_bean.setCapac_ampl(rs.getString("CAPAC_AMPL"));
				
				if(rs.getString("CAPAC_TRAN")!=null&&!rs.getString("CAPAC_TRAN").equals(""))
					vert_encuestado_bean.setCapac_tran(new Integer(rs.getString("CAPAC_TRAN")));
				else
					vert_encuestado_bean.setCapac_tran(0);
				vert_encuestado_bean.setEstado(rs.getString("ESTADO"));
				if(rs.getString("VIDA_UTIL")!=null&&!rs.getString("VIDA_UTIL").equals(""))
					vert_encuestado_bean.setVida_util(new Integer(rs.getString("VIDA_UTIL")));
				else
					vert_encuestado_bean.setVida_util(0);
				vert_encuestado_bean.setCategoria(rs.getString("CATEGORIA"));
				vert_encuestado_bean.setActividad(rs.getString("ACTIVIDAD"));
				
				lstType.add(vert_encuestado_bean);

			}
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_vert_encuestado_m50";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_vert_encuestado_m50_bean  vert_encuestado_m50_bean = new V_vert_encuestado_m50_bean();

				vert_encuestado_m50_bean.setClave(rs.getString("CLAVE"));
				vert_encuestado_m50_bean.setProvincia(rs.getString("PROVINCIA"));
				vert_encuestado_m50_bean.setMunicipio(rs.getString("MUNICIPIO"));
				vert_encuestado_m50_bean.setOrden_ver(rs.getString("ORDEN_VER"));
				vert_encuestado_m50_bean.setTipo_ver(rs.getString("TIPO_VER"));
				vert_encuestado_m50_bean.setTitular(rs.getString("TITULAR"));
				vert_encuestado_m50_bean.setGestion(rs.getString("GESTION"));
				vert_encuestado_m50_bean.setOlores(rs.getString("OLORES"));
				vert_encuestado_m50_bean.setHumos(rs.getString("HUMOS"));
				vert_encuestado_m50_bean.setCont_anima(rs.getString("CONT_ANIMA"));
				vert_encuestado_m50_bean.setR_inun(rs.getString("R_INUN"));
				vert_encuestado_m50_bean.setFiltracion(rs.getString("FILTRACION"));
				vert_encuestado_m50_bean.setImpacto_v(rs.getString("IMPACTO_V"));
				vert_encuestado_m50_bean.setFrec_averi(rs.getString("FREC_AVERI"));
				vert_encuestado_m50_bean.setSaturacion(rs.getString("SATURACION"));
				vert_encuestado_m50_bean.setInestable(rs.getString("INESTABLE"));
				vert_encuestado_m50_bean.setOtros(rs.getString("OTROS"));
				if(rs.getString("CAPAC_TOT")!=null&&!rs.getString("CAPAC_TOT").equals(""))
					vert_encuestado_m50_bean.setCapac_tot(new Integer(rs.getString("CAPAC_TOT")));
				else
					vert_encuestado_m50_bean.setCapac_tot(0);
				if(rs.getString("CAPAC_PORC")!=null&&!rs.getString("CAPAC_PORC").equals(""))
					vert_encuestado_m50_bean.setCapac_porc(new Integer(rs.getString("CAPAC_PORC")));
				else
					vert_encuestado_m50_bean.setCapac_porc(0);
				vert_encuestado_m50_bean.setCapac_ampl(rs.getString("CAPAC_AMPL"));
				
				if(rs.getString("CAPAC_TRAN")!=null&&!rs.getString("CAPAC_TRAN").equals(""))
					vert_encuestado_m50_bean.setCapac_tran(new Integer(rs.getString("CAPAC_TRAN")));
				else
					vert_encuestado_m50_bean.setCapac_tran(0);
				vert_encuestado_m50_bean.setEstado(rs.getString("ESTADO"));
				if(rs.getString("VIDA_UTIL")!=null&&!rs.getString("VIDA_UTIL").equals(""))
					vert_encuestado_m50_bean.setVida_util(new Integer(rs.getString("VIDA_UTIL")));
				else
					vert_encuestado_m50_bean.setVida_util(0);
				vert_encuestado_m50_bean.setCategoria(rs.getString("CATEGORIA"));
				vert_encuestado_m50_bean.setActividad(rs.getString("ACTIVIDAD"));
				
				lstType.add(vert_encuestado_m50_bean);

			}	
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_vertedero";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_vertedero_bean vertedero_bean = new V_vertedero_bean();

				vertedero_bean.setClave(rs.getString("CLAVE"));
				vertedero_bean.setProvincia(rs.getString("PROVINCIA"));
				vertedero_bean.setMunicipio(rs.getString("MUNICIPIO"));
				vertedero_bean.setOrden_ver(rs.getString("ORDEN_VER"));

				lstType.add(vertedero_bean);

			}		
			datosMPT.add( lstType);
			lstType=new ArrayList();
			
			sql = "select * from v_vertedero_nucleo";

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				V_vertedero_nucleo_bean vertedero_nucleo_bean = new V_vertedero_nucleo_bean();

				vertedero_nucleo_bean.setClave(rs.getString("CLAVE"));
				vertedero_nucleo_bean.setProvincia(rs.getString("PROVINCIA"));
				vertedero_nucleo_bean.setMunicipio(rs.getString("MUNICIPIO"));
				vertedero_nucleo_bean.setEntidad(rs.getString("ENTIDAD"));
				vertedero_nucleo_bean.setNucleo(rs.getString("NUCLEO"));
				vertedero_nucleo_bean.setVer_provin(rs.getString("VER_PROVIN"));
				vertedero_nucleo_bean.setVer_munici(rs.getString("VER_MUNICI"));
				vertedero_nucleo_bean.setVer_codigo(rs.getString("VER_CODIGO"));

				lstType.add(vertedero_nucleo_bean);

			}	
			
			datosMPT.add( lstType);
			lstType=new ArrayList();

		
			

		} catch (Exception ex) {

			logger.error("Error al ejecutar la sentencia:",ex);			
		}
		finally{
			safeClose(rs, statement, connection);
		}
		return datosMPT;
	}


	
	/**
     * Retorna las plantillas para la generacion de informes
     * @param oos
     * @param path
     * @throws Exception
     */
//    public void returnPlantillas(ObjectOutputStream oos, String path,String filtro,String patron,ArrayList patrones,String idEntidad) throws Exception{
//           try{
//        	   Collection plantillasGenerales=getPlantillas(path,filtro,patron,patrones,null);
//        	   Collection plantillasEspecificas=getPlantillas(path,filtro,patron,patrones,idEntidad);
//        	   
//        	   Iterator it1=plantillasGenerales.iterator();
//        	   Iterator it2=plantillasEspecificas.iterator();
//        	   
//        	   //Hay 3 elementos
//        	   ArrayList imagenes1=(ArrayList)it1.next();
//           	   ArrayList reports1=(ArrayList)it1.next();
//           	   ArrayList subreports1=(ArrayList)it1.next();
//
//        	   ArrayList imagenes2=(ArrayList)it2.next();
//           	   ArrayList reports2=(ArrayList)it2.next();
//           	   ArrayList subreports2=(ArrayList)it2.next();
//
//           	   imagenes1.addAll(imagenes2);
//           	   reports1.addAll(reports2);
//           	   subreports1.addAll(subreports2);
//        	   
//     
//              oos.writeObject(imagenes1);
//              oos.writeObject(reports1);
//              oos.writeObject(subreports1);
//              
//              
//           }catch(Exception e){
//               logger.error("returnPlantillas: "+ e.getMessage());
//               oos.writeObject(new ACException(e));
//               throw e;
//           }
//    }
    
//    private Collection getPlantillas(String path,String filtro,String patron,ArrayList patrones,String idEntidad) throws Exception{
//
//        ArrayList aList= new ArrayList();
//        ArrayList plantillas= new ArrayList();
//        Object[] plantilla;
//        ArrayList imagenes= new ArrayList();
//        Object[] imagen;
//
//        /** Leemos las imagenes. TODAS las imagenes se encuentran en el mismo directorio */
//        File dir=null;
//        if (idEntidad==null)
//        	dir = new File(ConstantesLocalGISEIEL.PATH_PLANTILLAS_EIEL + File.separator + "img");
//        else
//        	dir = new File(Constantes.DIR_PLANTILLAS + File.separator+idEntidad+File.separator+"eiel"+File.separator + "img");
//        if (dir.isDirectory()) {
//            File[] children = dir.listFiles();
//            if (children == null) {
//                // Either dir does not exist or is not a directory
//            } else {
//                for (int i = 0; i < children.length; i++) {
//                    // Get filename of file or directory
//                    File file= children[i];
//                    imagen= new Object[2];
//                    imagen[0]= file.getName();
//                    imagen[1]= DocumentoEnDisco.getContenido(file);
//                    imagenes.add(imagen);
//                }
//            }
//        }
//        /** El primer elemento del array correspode a las imagenes, el segundo a las plantillas .jrxml */
//        aList.add(imagenes);
//
//        /** Leemos las plantillas */
//        /** filtramos por ficheros con extension .jrxml */
//        FilenameFilter filter=null;
//        if (filtro==null){
//        	if (patron!=null){
//        		filter = new MatchJRXMLFilterPatrones(patron,patrones);        		
//        	}
//        	else{
//		        filter = new FilenameFilter() {
//		            public boolean accept(File dir, String name) {
//		                return ((name.endsWith(".jrxml")) && (!name.startsWith("EIEL_FichaMunicipal")));
//		            }
//		        };
//        	}
//        }
//        //filtramos por ficheros con extension .jmp
//        else if(filtro.contains("jmp")){
//        	filter = new FilenameFilter() {
//	            public boolean accept(File dir, String name) {
//	                return name.endsWith(".jmp");
//	            }
//	        };
//        }
//        else{
//        	filter = new MatchJRXMLFilter(filtro);
//        }
//        
//        /** Plantillas Globales (para todos los tipos) excepto para lotes y bienes revertibles */
//        if (path.toUpperCase().indexOf("LOTES")<0 && path.toUpperCase().indexOf("REVERTIBLES")<0){
//	        if (idEntidad==null)
//	        	dir = new File(ConstantesLocalGISEIEL.PATH_PLANTILLAS_EIEL);
//	        else
//	        	dir = new File(Constantes.DIR_PLANTILLAS+File.separator+idEntidad+File.separator+"eiel");
//	        
//	        if (dir.isDirectory()) {
//	            File[] children = dir.listFiles(filter);
//	            if (children == null) {
//	                // Either dir does not exist or is not a directory
//	            } else {
//	                for (int i = 0; i < children.length; i++) {
//	                    // Get filename of file or directory
//	                    File file= children[i];
//	                    plantilla= new Object[2];
//	                    plantilla[0]= file.getName();
//	                    plantilla[1]= DocumentoEnDisco.getContenido(file);
//	                    plantillas.add(plantilla);
//	                }
//	            }
//	        }
//         }   
//        
//        /** Plantillas de impresion no se si existiran globales */
//        if (path.contains("impresion")){
//	      //  if (idEntidad==null)
//	      //  	dir = new File(ConstantesLocalGISEIEL.PATH_PLANTILLAS_EIEL);
//	      //  else
//	        	dir = new File(Constantes.DIR_PLANTILLAS+File.separator+idEntidad+File.separator+"impresion");
//	        
//	        if (dir.isDirectory()) {
//	            File[] children = dir.listFiles(filter);
//	            if (children == null) {
//	                // Either dir does not exist or is not a directory
//	            } else {
//	                for (int i = 0; i < children.length; i++) {
//	                    // Get filename of file or directory
//	                    File file= children[i];
//	                    plantilla= new Object[2];
//	                    plantilla[0]= file.getName();
//	                    plantilla[1]= DocumentoEnDisco.getContenido(file);
//	                    plantillas.add(plantilla);
//	                }
//	            }
//	        }
//         }   
//        /** Plantillas del tipo seleccionado por el usuario 
//        dir = new File(path);
//        if (dir.isDirectory()) {
//            File[] children = dir.listFiles(filter);
//            if (children == null) {
//                // Either dir does not exist or is not a directory
//            } else {
//                for (int i = 0; i < children.length; i++) {
//                    // Get filename of file or directory
//                    File file= children[i];
//                    plantilla= new Object[2];
//                    plantilla[0]= file.getName();
//                    plantilla[1]= DocumentoEnDisco.getContenido(file);
//                    plantillas.add(plantilla);
//                }
//            }
//        }*/
//        
//        /** Insertamos las plantillas en el segundo elemento del array */
//        aList.add(plantillas);
//        
//        if(path.contains("impresion")) 
//        	aList.add( new ArrayList());
//        else	
//        	aList.add(getSubReports(idEntidad));
//        
//        return aList;
//    }
//    
    
    public void returnPlantillasCuadros(ObjectOutputStream oos, String path,String filtro) throws Exception{
        try{
            for (Iterator it=getPlantillasCuadros(path,filtro).iterator();it.hasNext();){
                oos.writeObject(it.next());
            }
        }catch(Exception e){
            logger.error("getPlantillasCuadros: "+ e.getMessage());
            oos.writeObject(new ACException(e));
            throw e;
        }
 }
    
    private Collection getPlantillasCuadros(String path,String filtro) throws Exception{

        ArrayList aList= new ArrayList();
        ArrayList plantillas= new ArrayList();
        Object[] plantilla;
        ArrayList imagenes= new ArrayList();
        Object[] imagen;

        /** Leemos las imagenes. TODAS las imagenes se encuentran en el mismo directorio */
        File dir = new File(ConstantesLocalGISEIEL.PATH_PLANTILLAS_CUADROS_EIEL + File.separator + "img");
        if (dir.isDirectory()) {
            File[] children = dir.listFiles();
            if (children == null) {
                // Either dir does not exist or is not a directory
            } else {
                for (int i = 0; i < children.length; i++) {
                    // Get filename of file or directory
                    File file= children[i];
                    imagen= new Object[2];
                    imagen[0]= file.getName();
                    imagen[1]= DocumentoEnDisco.getContenido(file);
                    imagenes.add(imagen);
                }
            }
        }
        /** El primer elemento del array correspode a las imagenes, el segundo a las plantillas .jrxml */
        aList.add(imagenes);

        /** Leemos las plantillas */
        /** filtramos por ficheros con extension .jrxml */
        FilenameFilter filter=null;
        if (filtro==null){
	        filter = new FilenameFilter() {
	            public boolean accept(File dir, String name) {
	                return ((name.endsWith(".jrxml")) );
	            }
	        };
        }
        else{
        	filter = new MatchJRXMLFilter(filtro);
        }
        /** Plantillas Globales (para todos los tipos) excepto para lotes y bienes revertibles */
        if (path.toUpperCase().indexOf("LOTES")<0 && path.toUpperCase().indexOf("REVERTIBLES")<0){
	        dir = new File(ConstantesLocalGISEIEL.PATH_PLANTILLAS_CUADROS_EIEL);
	        if (dir.isDirectory()) {
	            File[] children = dir.listFiles(filter);
	            if (children == null) {
	                // Either dir does not exist or is not a directory
	            } else {
	                for (int i = 0; i < children.length; i++) {
	                    // Get filename of file or directory
	                    File file= children[i];
	                    plantilla= new Object[2];
	                    plantilla[0]= file.getName();
	                    plantilla[1]= DocumentoEnDisco.getContenido(file);
	                    plantillas.add(plantilla);
	                }
	            }
	        }
         }   
        /** Plantillas del tipo seleccionado por el usuario 
        dir = new File(path);
        if (dir.isDirectory()) {
            File[] children = dir.listFiles(filter);
            if (children == null) {
                // Either dir does not exist or is not a directory
            } else {
                for (int i = 0; i < children.length; i++) {
                    // Get filename of file or directory
                    File file= children[i];
                    plantilla= new Object[2];
                    plantilla[0]= file.getName();
                    plantilla[1]= DocumentoEnDisco.getContenido(file);
                    plantillas.add(plantilla);
                }
            }
        }*/
        /** Insertamos las plantillas en el segundo elemento del array */
        aList.add(plantillas);

        aList.add(getSubReports(null));
        
        return aList;
    }
    
    private Collection getSubReports(String idEntidad) throws Exception{

        ArrayList subreports= new ArrayList();
        Object[] subreport;

        /** filtramos por ficheros con extension .jrxml */
        FilenameFilter filter = new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith(".jrxml");
            }
        };

        /** Leemos los subreports. TODOS los subreports se encuentran en el mismo directorio */
        File dir=null;
        if (idEntidad==null)
        	dir = new File(ConstantesLocalGISEIEL.PATH_PLANTILLAS_EIEL + File.separator + "subreports");
        else
        	dir = new File(ConstantesLocalGISPlantillas.PATH_PLANTILLAS+File.separator+idEntidad+File.separator+"eiel"+ File.separator+ "subreports");

        if (dir.isDirectory()) {
            File[] children = dir.listFiles(filter);
            if (children == null) {
                // Either dir does not exist or is not a directory
            } else {
                for (int i = 0; i < children.length; i++) {
                    // Get filename of file or directory
                    File file= children[i];
                    subreport= new Object[2];

                    subreport[0]= file.getName();
                    subreport[1]= DocumentoEnDisco.getContenido(file);
                    subreports.add(subreport);
                }
            }
        }

        return subreports;
    }
    
    
	/**
     * Retorna los nodos debajo de un subnodo
     * @param oos
     * @param path
     * @throws Exception
     */
    public void returnNodosEIEL(ObjectOutputStream oos, String nodo,String locale) throws Exception{
           try{
               for (Iterator it=getNodosEIEL(nodo,locale).iterator();it.hasNext();){
                   oos.writeObject(it.next());
               }
           }catch(Exception e){
               logger.error("returnEIELNodos: "+ e.getMessage());
               oos.writeObject(new ACException(e));
               throw e;
           }
    }
    
    /**
     * 
     * @param nodo
     * @param locale
     * @return
     * @throws Exception
     */
    private Collection getNodosEIEL(String nodo,String locale) throws Exception{

        Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql="select clave,categoria,nodo,lcg_nodos_capas.tag_traduccion,traduccion,tabla,nombre_filtro,bean,layer,conectividad from lcg_nodos_capas" +
					" left  join lcg_nodos_capas_traducciones on lcg_nodos_capas.tag_traduccion=" +
					"lcg_nodos_capas_traducciones.tag_traduccion	where activo=true and (locale='"+locale+"' or locale is null) ";
					
					//Para las depuradoras afinamos un poco mas la busqueda para que sea exacta por el lio de tener D1 y D2
					
			if (nodo.equals("PL"))
				nodo="ALUM";
			if (nodo.equals("PR"))
				nodo="PZ";
			if ((nodo.equals("D1")) || (nodo.equals("D2")))
				sql+="and (nodo like '"+nodo+"' or categoria='"+nodo+"')";
			else
				sql+="and (nodo like '"+nodo+"%' or categoria='"+nodo+"')";
		

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				 LCGNodoEIEL nodoEIEL=new LCGNodoEIEL();
				 nodoEIEL.setClave(rs.getString("clave"));
				 nodoEIEL.setCategoria(rs.getString("categoria"));
				 nodoEIEL.setNodo(rs.getString("nodo"));
				 nodoEIEL.setTagTraduccion(rs.getString("tag_traduccion"));
				 nodoEIEL.setTraduccion(rs.getString("traduccion"));
				 nodoEIEL.setTabla(rs.getString("tabla"));
				 nodoEIEL.setNombreFiltro(rs.getString("nombre_filtro"));
				 nodoEIEL.setBean(rs.getString("bean"));
				 nodoEIEL.setLayer(rs.getString("layer"));
				 nodoEIEL.setConectividad(rs.getBoolean("conectividad"));
				 
				 lstDatos.add(nodoEIEL);

			}
			
		} catch (Exception ex) {

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
  
    }
    
    
    
    /**
     * Devuelve los campos que tiene la tabla
     * @param oos
     * @param nodo
     * @param locale
     * @throws Exception
     */
    public void returnCamposCapaEIEL(ObjectOutputStream oos, String nodo,String locale) throws Exception{
        try{
            for (Iterator it=getCamposCapaEIEL(nodo,locale).iterator();it.hasNext();){
                oos.writeObject(it.next());
            }
        }catch(Exception e){
            logger.error("returnEIELNodos: "+ e.getMessage());
            oos.writeObject(new ACException(e));
            throw e;
        }
    }
 
    /**
     * 
     * @param nodo
     * @param locale
     * @return
     * @throws Exception
     */
    private Collection getCamposCapaEIEL(String nodo,String locale) throws Exception{

    	Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			/*String sql="select nodo,campo_bd,lcg_nodos_capas_campos.tag_traduccion,traduccion,clave_grupo,tipo_bd,dominio,tabla " +
					"from lcg_nodos_capas	" +
					"inner  join lcg_nodos_capas_campos on lcg_nodos_capas_campos.clave_capa=lcg_nodos_capas.clave	" +
					"inner  join lcg_nodos_capas_grupos on lcg_nodos_capas_campos.clave_grupo=lcg_nodos_capas_grupos.clave	" +
					"left  join lcg_nodos_capas_traducciones on lcg_nodos_capas_campos.tag_traduccion=lcg_nodos_capas_traducciones.tag_traduccion " +
					"where nodo='"+nodo+"' and locale='"+locale+"' "+
					"order by lcg_nodos_capas_grupos.orden";*/
			
			String 	sql="select nodo,campo_bd,lcg_nodos_capas_campos.tag_traduccion,traduc1.traduccion,	" +
					"lcg_nodos_capas_grupos.clave as clave_grupo,lcg_nodos_capas_grupos.tag_traduccion as tag_traduccion_grupo,	" +
					"traduc2.traduccion as traduccion_grupo,tipo_bd,dominio,lcg_nodos_capas.tabla,metodo,aplicaInformes,aplicaMovilidad," +
					"lcg_nodos_capas_campos.tabla as tabla2 "+
					"from lcg_nodos_capas" +
					"	inner  join lcg_nodos_capas_campos on lcg_nodos_capas_campos.clave_capa=lcg_nodos_capas.clave" +
					"	inner  join lcg_nodos_capas_grupos on lcg_nodos_capas_campos.clave_grupo=lcg_nodos_capas_grupos.clave	" +
					"left  join lcg_nodos_capas_traducciones traduc1 on lcg_nodos_capas_campos.tag_traduccion=traduc1.tag_traduccion " +
					"left  join lcg_nodos_capas_traducciones traduc2 on lcg_nodos_capas_grupos.tag_traduccion=traduc2.tag_traduccion" +
					" where nodo='"+nodo+"' and (traduc1.locale='"+locale+"' or traduc1.locale is null) and (traduc2.locale='"+locale+"' " +
					"or traduc2.locale is null) order by lcg_nodos_capas_grupos.orden";
			

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				 LCGCampoCapaEIEL campoCapaEIEL=new LCGCampoCapaEIEL();
				 campoCapaEIEL.setCampoBD(rs.getString("campo_bd"));
				 campoCapaEIEL.setTagTraduccion(rs.getString("tag_traduccion"));
				 campoCapaEIEL.setTraduccion(rs.getString("traduccion"));
				 campoCapaEIEL.setTipoBD(rs.getInt("tipo_bd"));
				 campoCapaEIEL.setDominio(rs.getString("dominio"));
				 campoCapaEIEL.setTabla(rs.getString("tabla"));
				 String tabla2=rs.getString("tabla2");
				 if (tabla2!=null)
					 campoCapaEIEL.setTabla(tabla2);
				 campoCapaEIEL.setMetodo(rs.getString("metodo"));
				 campoCapaEIEL.setAplicaInformes(rs.getBoolean("aplicaInformes"));
				 campoCapaEIEL.setAplicaMovilidad(rs.getBoolean("aplicaMovilidad"));

				 
				 campoCapaEIEL.setClaveGrupo(rs.getString("clave_grupo"));
				 campoCapaEIEL.setTagTraduccionGrupo(rs.getString("tag_traduccion_grupo"));
				 campoCapaEIEL.setTraduccionGrupo(rs.getString("traduccion_grupo"));
				 
				 lstDatos.add(campoCapaEIEL);

			}
			
		} catch (Exception ex) {

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;

    }
    
    /**
     * Devuelve los campos que tiene la tabla
     * @param oos
     * @param nodo
     * @param locale
     * @throws Exception
     */
    public void returnNucleosMunicipio(ObjectOutputStream oos, Integer idMunicipio,boolean encuestables) throws Exception{
        try{
            for (Iterator it=getNucleosMunicipio(idMunicipio,encuestables).iterator();it.hasNext();){
                oos.writeObject(it.next());
            }
        }catch(Exception e){
            logger.error("returnNucleosMunicipio: "+ e.getMessage());
            oos.writeObject(new ACException(e));
            throw e;
        }
    }
 
    /**
     * 
     * @param nodo
     * @param locale
     * @return
     * @throws Exception
     */
    private Collection getNucleosMunicipio(Integer idMunicipio,boolean encuestables) throws Exception{

    	Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			
			String codMunicipio=null;
			if (idMunicipio!=null)
				codMunicipio=String.valueOf(idMunicipio).substring(2);

			//String sql="select codentidad,codpoblamiento,denominacion from eiel_t_poblamiento where " +
			//		"revision_expirada=9999999999 and codmunic='"+codMunicipio+"' order by denominacion";
			String sql="";
			 //encuestables=true;
			//Por aqui no entra cuando son Nuecleos encuestables
			if (encuestables){
				 sql="select c.codprov,c.codmunic,c.codentidad,c.codpoblamiento,c.nombre_oficial "+ 
						"from "+eiel_c_nucleo_poblacion+" c "+
						"join "+eiel_t_nucl_encuest_1+" t on c.codentidad=t.codentidad and c.revision_expirada=t.revision_expirada " + 
						"and c.codpoblamiento=t.codpoblamiento and c.codmunic=t.codmunic and c.codprov=t.codprov ";	
			}
			//Esntra cuando no son encuestables es decir get nuecleos
			else{
				/**sql="select c.codmunic,c.codentidad,c.codpoblamiento,c.nombre_oficial "+ 
						"from "+eiel_c_nucleo_poblacion+" c ";*/	
				
				sql="select t.codprov,t.codmunic ,c.codentidad,c.codpoblamiento,t.denominacion from eiel_t_poblamiento c "
						+ " join eiel_t_entidad_singular t on c.codentidad=t.codentidad and c.codmunic=t.codmunic and  c.codprov=t.codprov"
						+ " join (SELECT c.codmunic,c.codentidad,c.codpoblamiento  FROM eiel_c_nucleo_poblacion c UNION SELECT h.codmunicipio,h.codentidad,h.codnucleo FROM eiel_t_entidades_agrupadas h)  z"
						+ " on c.codentidad=z.codentidad and z.codmunic=c.codmunic and z.codpoblamiento=c.codpoblamiento  and c.revision_expirada=t.revision_expirada  ";
			}
			
	 
			if (encuestables){
				if ((idMunicipio!=null) && (idMunicipio!=-1))
					sql+="where  c.codmunic='"+codMunicipio+"' and c.revision_expirada=9999999999 order by c.nombre_oficial";
				else
					sql+="where  c.revision_expirada=9999999999 order by c.nombre_oficial";

			}
			else{			
			if ((idMunicipio!=null) && (idMunicipio!=-1))
				sql+="where  t.codmunic='"+codMunicipio+"' and c.revision_expirada=9999999999 order by t.denominacion";
			else
				sql+="where  c.revision_expirada=9999999999 order by t.denominacion";
			}
			//eiel_c_nucleo_poblacion

			statement = connection.prepareStatement(sql);
			logger.info("Sentencia SQL nucleos:"+sql);
			System.out.println("Sentencia SQL nucleos:"+sql);
			rs = statement.executeQuery();
			
			if (encuestables){
				while (rs.next()) {

					 LCGNucleoEIEL nucleoEIEL=new LCGNucleoEIEL();
					 nucleoEIEL.setCodProvincia(rs.getString("codprov"));
					 nucleoEIEL.setCodMunicipio(rs.getString("codmunic"));
					 nucleoEIEL.setCodentidad(rs.getString("codentidad"));
					 nucleoEIEL.setCodpoblamiento(rs.getString("codpoblamiento"));
					 nucleoEIEL.setDenominacion(rs.getString("nombre_oficial"));
					 
					 lstDatos.add(nucleoEIEL);

				}
			}
			
			else{
				
		
			while (rs.next()) {

				 LCGNucleoEIEL nucleoEIEL=new LCGNucleoEIEL();
				 nucleoEIEL.setCodProvincia(rs.getString("codprov"));
				 nucleoEIEL.setCodMunicipio(rs.getString("codmunic"));
				 nucleoEIEL.setCodentidad(rs.getString("codentidad"));
				 nucleoEIEL.setCodpoblamiento(rs.getString("codpoblamiento"));
				 nucleoEIEL.setDenominacion(rs.getString("denominacion"));
				 
				 lstDatos.add(nucleoEIEL);

			}
			}
			
		} catch (Exception ex) {

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;

    }    
    
    /**
     * Devuelve los indicadores
     * @param oos
     * @param nodo
     * @param locale
     * @throws Exception
     */
    public void returnIndicadoresEIEL(ObjectOutputStream oos) throws Exception{
        try{
            for (Iterator it=getIndicadoresEIEL().iterator();it.hasNext();){
                oos.writeObject(it.next());
            }
        }catch(Exception e){
            logger.error("returnNucleosMunicipio: "+ e.getMessage());
            oos.writeObject(new ACException(e));
            throw e;
        }
    }
 
    /**
     * 
     * @param nodo
     * @param locale
     * @return
     * @throws Exception
     */
    private Collection getIndicadoresEIEL() throws Exception{

    	Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			
			
			String sql="select indicador,mapa from eiel_indicadores_m_indicadores";
			
			//eiel_indicadores_m_indicadores y m_categorias 

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				IndicadorEIEL indicadorEIEL=new IndicadorEIEL();
				indicadorEIEL.setNombreIndicador(rs.getString("indicador"));				 
				indicadorEIEL.setMapaSeleccionado(rs.getString("mapa"));				 
				lstDatos.add(indicadorEIEL);

			}
			
		} catch (Exception ex) {

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;

    }    

    /**
     * Devuelve los campos que tiene la tabla
     * @param oos
     * @param nodo
     * @param locale
     * @throws Exception
     */
    public void returnMunicipios(ObjectOutputStream oos, Integer idMunicipio) throws Exception{
        try{
            for (Iterator it=getMunicipios(idMunicipio).iterator();it.hasNext();){
                oos.writeObject(it.next());
            }
        }catch(Exception e){
            logger.error("returnNucleosMunicipio: "+ e.getMessage());
            oos.writeObject(new ACException(e));
            throw e;
        }
    }
 

    private Collection getMunicipios(Integer idMunicipio) throws Exception{

    	Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			
			String codProvincia=String.valueOf(idMunicipio).substring(0,2);

			String sql="select id,nombreoficial from municipios where id_provincia='"+codProvincia+"' order by nombreoficial";
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				 LCGMunicipioEIEL municipioEIEL=new LCGMunicipioEIEL();
				 municipioEIEL.setIdMunicipio(rs.getInt("id"));
				 municipioEIEL.setNombreOficial(rs.getString("nombreoficial"));
				 
				 lstDatos.add(municipioEIEL);

			}
			
		} catch (Exception ex) {

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;

    }    

    /**
     * Devuelve los campos que tiene la tabla
     * @param oos
     * @param nodo
     * @param locale
     * @throws Exception
     */
    public void returnMunicipiosOtraProvincia(ObjectOutputStream oos,Integer idMunicipio) throws Exception{
        try{
            for (Iterator it=getMunicipiosOtraProvincia(idMunicipio).iterator();it.hasNext();){
                oos.writeObject(it.next());
            }
        }catch(Exception e){
            logger.error("returnMunicipiosOtraProvincia: "+ e.getMessage());
            oos.writeObject(new ACException(e));
            throw e;
        }
    }
    
    
 

    private Collection getMunicipiosOtraProvincia(Integer idMunicipio) throws Exception{

    	Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}
			
			String codProvincia=String.valueOf(idMunicipio).substring(0,2);
			
			String sql="select id,nombreoficial from municipios where id in ("
					+ "select distinct(codprov_ca||codmunic_ca)::integer as id_municipio from eiel_tr_abast_ca_pobl where codprov_ca<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					+ "select distinct(codprov||codmunic)::integer as id_municipio from eiel_t_abast_ca where codprov<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					
					+ "select distinct(codprov_de||codmunic_de)::integer as id_municipio from eiel_tr_abast_de_pobl where codprov_de<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					+ "select distinct(codprov||codmunic)::integer as id_municipio from eiel_t_abast_de where codprov<>'"+codProvincia+"' and revision_expirada=9999999999 union "

					+ "select distinct(codprov_tcn||codmunic_tcn)::integer as id_municipio from eiel_tr_abast_tcn_pobl where codprov_tcn<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					+ "select distinct(codprov||codmunic)::integer as id_municipio from eiel_t_abast_tcn where codprov<>'"+codProvincia+"' and revision_expirada=9999999999 union "

					+ " select distinct(codprov_tp||codmunic_tp)::integer as id_municipio from eiel_tr_abast_tp_pobl where codprov_tp<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					+ "select distinct(codprov||codmunic)::integer as id_municipio from eiel_t_abast_tp where codprov<>'"+codProvincia+"' and revision_expirada=9999999999 union "

					+ " select distinct(codprov_ed||codmunic_ed)::integer as id_municipio from eiel_tr_saneam_ed_pobl where codprov_ed<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					+ "select distinct(codprov||codmunic)::integer as id_municipio from eiel_t1_saneam_ed where codprov<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					+ "select distinct(codprov||codmunic)::integer as id_municipio from eiel_t2_saneam_ed where codprov<>'"+codProvincia+"' and revision_expirada=9999999999 union "

					+ "select distinct(codprov_pv||codmunic_pv)::integer as id_municipio from eiel_tr_saneam_pv_pobl where codprov_pv<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					+ "select distinct(codprov||codmunic)::integer as id_municipio from eiel_t_saneam_pv where codprov<>'"+codProvincia+"' and revision_expirada=9999999999 union "

					+ " select distinct(codprov_tcl||codmunic_tcl)::integer as id_municipio from eiel_tr_saneam_tcl_pobl where codprov_tcl<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					+ "select distinct(codprov||codmunic)::integer as id_municipio from eiel_t_saneam_tcl where codprov<>'"+codProvincia+"' and revision_expirada=9999999999 union "

					+ "select distinct(codprov_tem||codmunic_tem)::integer as id_municipio from eiel_tr_saneam_tem_pobl where codprov_tem<>'"+codProvincia+"' and revision_expirada=9999999999 union "
					+ "select distinct(codprov||codmunic)::integer as id_municipio from eiel_t_saneam_tem where codprov<>'"+codProvincia+"' and revision_expirada=9999999999) "

					+ "order by nombreoficial";
			
			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				 LCGMunicipioEIEL municipioEIEL=new LCGMunicipioEIEL();
				 municipioEIEL.setIdMunicipio(rs.getInt("id"));
				 municipioEIEL.setNombreOficial(rs.getString("nombreoficial")+" ("+rs.getInt("id")+")");
				 
				 lstDatos.add(municipioEIEL);

			}
			
		} catch (Exception ex) {

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;

    }    
    
    /***************************************/
	/**
	 * Elimina de la tabla eiel_t_abast_au
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarAbastecimientoAutonomo(AbastecimientoAutonomoEIEL object, Sesion userSesion) throws Exception {

		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			//Se crea un nuevo registro
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevAbastecimientoAutonomo(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_abast_au", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);
					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevAbastecimientoAutonomo(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevAbastecimientoAutonomo(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevAbastecimientoAutonomo(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevAbastecimientoAutonomo(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(null, null, conn);
		}
	}
	
	/**
	 * Elimina de la tabla eiel_t_abast_ca
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarCaptacion(CaptacionesEIEL object, Sesion userSesion) throws Exception {

		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			//Se crea un nuevo registro
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevCaptaciones(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_abast_ca", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevCaptaciones(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevCaptaciones(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevCaptaciones(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevCaptaciones(conn, versionActual, versionActual, object);
						//Se borra el elemento de la tabla _tr_:
						eliminarTR(conn, versionActual, revisionExpiradaNula, object);	
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}
	}
	protected void eliminarVersionAnterior(Connection conn,String tabla, WorkflowEIEL object,String revision) throws Exception{
		eliminarVersionAnterior(conn,tabla,null,object,revision);
	}
	protected void eliminarVersionAnterior(Connection conn,String tabla, String filtroUso,WorkflowEIEL object,String revision)
			throws Exception {
		String tablaUsos=null;
		if (tabla==null){
			tabla=object.getNombreTablaAlfanumerica();
			tablaUsos=object.getNombreTablaAlfanumericaUsos();
		}
		String sqlBusqueda=object.getFilterSQL();
		if (filtroUso!=null)
			sqlBusqueda+=filtroUso;
		String sSQL=null;
		if (revision.equals(ConstantesLocalGISEIEL.REVISION_TEMPORAL))
			sSQL = "delete from "+tabla+	" where "+sqlBusqueda+" and (revision_expirada='"+revision+"' or revision_expirada='"+ConstantesLocalGISEIEL.REVISION_PUBLICABLE+"')";
		else if (revision.equals(ConstantesLocalGISEIEL.REVISION_PUBLICABLE) && object.getEstadoValidacionAnterior()==ConstantesLocalGISEIEL.ESTADO_PUBLICABLE_MOVILIDAD)
			sSQL = "delete from "+tabla+	" where "+sqlBusqueda+" and revision_expirada='"+ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD+"'";
		else
			sSQL = "delete from "+tabla+	" where "+sqlBusqueda+" and revision_expirada='"+revision+"'";
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean conectado=true;
		if (conn==null){
			conectado=false;
			conn = CPoolDatabase.getConnection();
		}
		try {
			ps = conn.prepareStatement(sSQL);
			ps.execute();
		} catch (Exception e) {
			if (!conectado)
				conn.rollback();
			else
				throw e;
		} finally {
			if (!conectado)
				safeClose(null, ps, conn);
			else
				ps.close();
		}
		if (tablaUsos!=null){
			eliminarVersionAnterior(conn,tablaUsos, null,object,revision);
		}
	}
	

	/**
	 * Elimina de la tabla eiel_t_cabildo_consejo
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarCabildoConsejo(CabildoConsejoEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevCabildoConsejo(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_cabildo_consejo", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevCabildoConsejo(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevCabildoConsejo(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevCabildoConsejo(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevCabildoConsejo(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}
	}
	
	/**
	 * Elimina de la tabla eiel_t_carreteras
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarCarreteras(TramosCarreterasEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;

		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevCarreteras(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_carreteras", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevCarreteras(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevCarreteras(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevCarreteras(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevCarreteras(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}
	}
	
	/**
	 * Elimina de la tabla eiel_t_cc
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarCasaConsistorial(CasasConsistorialesEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevCasaConsistorial(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_cc", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevCasaConsistorial(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevCasaConsistorial(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevCasaConsistorial(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevCasaConsistorial(conn, versionActual, versionActual, object);
					}
				}
			}
			//Eliminar casas ocnsistoriales usos
			String sSQL = "select * from eiel_t_cc_usos where clave=? and codprov=? and codmunic=? and orden_cc=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;
			
			conn = CPoolDatabase.getConnection();
			PreparedStatement ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ResultSet rs = ps.executeQuery();
			String tipo;
			UsosCasasConsistoriales uso;
			boolean encontrado;
			while( rs.next()){
				uso = new UsosCasasConsistoriales();
				uso.setUso(rs.getString("uso")); 
				uso.setSuperficieUso(rs.getInt("s_cubierta")); 
				uso.setFechaRevision(rs.getDate("fecha_revision")) ;
				uso.setEstadoRevision(rs.getString("estado_revision"));
				uso.setFechaUso(rs.getDate("fecha_ini"));
				uso.setCodigoOrdenUso(rs.getString("orden_uso")); 
				uso.setObservacionesUso(rs.getString("observ")); 
				uso.setInstPertenece(rs.getString("inst_pertenece"));							

				// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
				if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					updateRevUsosCasaConsistorial(conn, uso.getUso(), ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
				else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
					if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
						eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					else{
						//Se actualiza la tabla versionesAlfa
						beforeRequest(conn, userSesion.getIdUser(),"eiel_t_cc_usos", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

						//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
						if (object.isEstadoBorrable()){
							updateRevUsosCasaConsistorial(conn, uso.getUso(),versionActual, revisionExpiradaBorrable, object);
						} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
						else{
							updateRevUsosCasaConsistorial(conn, uso.getUso(),versionActual, revisionExpiradaNula, object);	
						}
						if (object.isEstadoABorrar()){
							//Entra cuando el usuario es publicador y le da a borrar un elemento
							insertRevUsosCasaConsistorial(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object, uso);
						}			
						else{
							//Entra cuando el usuario es validador y le da a borrar un elemento:
							insertRevUsosCasaConsistorial(conn, versionActual, versionActual, object, uso);
						}
					}
				}
				
			 }
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}
	}
	
	/**
	 * Elimina de la tabla eiel_t_ce
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarCementerios(CementeriosEIEL object, Sesion userSesion) throws Exception {
		
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevCementerios(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_ce", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevCementerios(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevCementerios(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevCementerios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevCementerios(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}

	/**
	 * Elimina de la tabla eiel_t_cu
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarCentroCultural(CentrosCulturalesEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevCentroCultural(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_cu", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevCentroCultural(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevCentroCultural(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevCentroCultural(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevCentroCultural(conn, versionActual, versionActual, object);
					}
				}
			}
			//Eliminar centros cultirales usos
			String sSQL = "select * from eiel_t_cu_usos where clave=? and codprov=? and codmunic=? and orden_cu=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;
			
			conn = CPoolDatabase.getConnection();
			PreparedStatement ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ResultSet rs = ps.executeQuery();
			String tipo;
			UsosCentrosCulturales uso;
			boolean encontrado;
			while( rs.next()){
				uso = new UsosCentrosCulturales();
				uso.setUso(rs.getString("uso")); 
				uso.setSuperficieUso(rs.getInt("s_cubierta")); 
				uso.setFechaRevision(rs.getDate("fecha_revision")) ;
				uso.setEstadoRevision(rs.getString("estado_revision"));
				uso.setFechaUso(rs.getDate("fecha_ini"));
				uso.setCodigoOrdenUso(rs.getString("orden_uso")); 
				uso.setObservacionesUso(rs.getString("observ")); 							
				// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
				if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					updateRevUsosCentroCultural(conn, uso.getUso(), ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
				else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
					if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
						eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					else{
						//Se actualiza la tabla versionesAlfa
						beforeRequest(conn, userSesion.getIdUser(),"eiel_t_cc_usos", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

						//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
						if (object.isEstadoBorrable()){
							updateRevUsosCentroCultural(conn, uso.getUso(),versionActual, revisionExpiradaBorrable, object);
						} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
						else{
							updateRevUsosCentroCultural(conn, uso.getUso(),versionActual, revisionExpiradaNula, object);	
						}
						if (object.isEstadoABorrar()){
							//Entra cuando el usuario es publicador y le da a borrar un elemento
							insertRevUsosCentroCultural(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object, uso);
						}			
						else{
							//Entra cuando el usuario es validador y le da a borrar un elemento:
							insertRevUsosCentroCultural(conn, versionActual, versionActual, object, uso);
						}
					}
				}
			 }
			
			
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_en
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarCentroEnsenianza(CentrosEnsenianzaEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevCentroEnsenianza(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_en", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevCentroEnsenianza(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevCentroEnsenianza(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevCentroEnsenianza(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevCentroEnsenianza(conn, versionActual, versionActual, object);
					}
				}
			}
			String sSQL = "select * from eiel_t_en_nivel where clave=? and codprov=? and codmunic=? and orden_en=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;			
			
			conn = CPoolDatabase.getConnection();
			PreparedStatement ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			ResultSet rs = ps.executeQuery();
			String tipo;
			NivelesCentrosEnsenianza nivel;
			while( rs.next()){
					
					nivel = new NivelesCentrosEnsenianza();
					nivel.setNivel(rs.getString("nivel")); 	
					nivel.setFechaRevision(rs.getDate("fecha_revision")) ;
					nivel.setEstadoRevision(rs.getString("estado_revision"));
					nivel.setFechaCurso(rs.getDate("fecha_curso")); 
					nivel.setCodigoOrdenNivel(rs.getString("orden_en_nivel"));
					nivel.setNumeroAlumnos(rs.getInt("alumnos"));
					nivel.setNumeroPlazas(rs.getInt("plazas"));
					nivel.setObservacionesNivel(rs.getString("observ")); 
					nivel.setUnidades(rs.getInt("unidades"));
					// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
					if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
						updateRevNivelesCentroEnsenianza(conn, nivel.getNivel(), ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
					else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
						if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
							eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
						else{
							//Se actualiza la tabla versionesAlfa
							beforeRequest(conn, userSesion.getIdUser(),"eiel_t_en_nivel", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

							//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
							if (object.isEstadoBorrable()){
								updateRevNivelesCentroEnsenianza(conn, nivel.getNivel(),versionActual, revisionExpiradaBorrable, object);
							} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
							else{
								updateRevNivelesCentroEnsenianza(conn, nivel.getNivel(),versionActual, revisionExpiradaNula, object);	
							}
							if (object.isEstadoABorrar()){
								//Entra cuando el usuario es publicador y le da a borrar un elemento
								insertRevNivelesCentroEnsenianza(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object, nivel);
							}			
							else{
								//Entra cuando el usuario es validador y le da a borrar un elemento:
								insertRevNivelesCentroEnsenianza(conn, versionActual, versionActual, object, nivel);
							}
						}
					}
					
				 }
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_as
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarCentrosAsistenciales(CentrosAsistencialesEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevCentrosAsistenciales(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_as", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevCentrosAsistenciales(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevCentrosAsistenciales(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevCentrosAsistenciales(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevCentrosAsistenciales(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}


	/**
	 * Elimina de la tabla eiel_t_entidad_singular
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarEntidadesSingulares(EntidadesSingularesEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevEntidadesSingulares(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),eiel_t_entidad_singular, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevEntidadesSingulares(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevEntidadesSingulares(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevEntidadesSingulares(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevEntidadesSingulares(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	
	
	
	
	/**
	 * Elimina de la tabla eiel_t_entidad_singular
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarEntidadesAgrupadas(EntidadesAgrupadasEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevEntidadesAgrupadas(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),eiel_t_entidades_agrupadas, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevEntidadesAgrupadas(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevEntidadesAgrupadas(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevEntidadesAgrupadas(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevEntidadesAgrupadas(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	


	/**
	 * Elimina de la tabla eiel_t_inf_ttmm
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarInfoTerminosMunicipales(NucleoEncuestado7EIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			//Se actualiza la tabla versionesAlfa

			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevInfoTerminosMunicipales(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_inf_ttmm", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevInfoTerminosMunicipales(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevInfoTerminosMunicipales(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevInfoTerminosMunicipales(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevInfoTerminosMunicipales(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	


	/**
	 * Elimina de la tabla eiel_t_ip
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarIncendiosProteccion(IncendiosProteccionEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevIncendiosProteccion(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_ip", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevIncendiosProteccion(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevIncendiosProteccion(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevIncendiosProteccion(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevIncendiosProteccion(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	


	/**
	 * Elimina de la tabla eiel_t_lm
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarLonjasMercados(LonjasMercadosEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevLonjasMercados(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_lm", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevLonjasMercados(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevLonjasMercados(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevLonjasMercados(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevLonjasMercados(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	


	/**
	 * Elimina de la tabla eiel_t_mt
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarMataderos(MataderosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevMataderos(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_mt", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevMataderos(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevMataderos(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevMataderos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevMataderos(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	


	/**
	 * Elimina de la tabla eiel_t_abast_tp
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarTratamientosPotabilizacion(
			TratamientosPotabilizacionEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevTratamientosPotabilizacion(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_abast_tp", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevTratamientosPotabilizacion(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevTratamientosPotabilizacion(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevTratamientosPotabilizacion(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevTratamientosPotabilizacion(conn, versionActual, versionActual, object);
						//Se borra el elemento de la tabla _tr_:
						eliminarTR(conn, versionActual, revisionExpiradaNula, object);	
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	

	/**
	 * Elimina de la tabla eiel_t_mun_diseminados
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarDiseminados(DiseminadosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevDiseminados(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_mun_diseminados", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevDiseminados(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevDiseminados(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevDiseminados(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevDiseminados(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}


	/**
	 * Elimina de la tabla eiel_t_nucl_encuest_1
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarEncuestados1(Encuestados1EIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevEncuestados1(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),eiel_t_nucl_encuest_1, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevEncuestados1(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevEncuestados1(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevEncuestados1(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevEncuestados1(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	


	/**
	 * Elimina de la tabla eiel_t_nucl_encuest_2
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarEncuestados2(Encuestados2EIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevEncuestados2(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_nucl_encuest_2", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevEncuestados2(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevEncuestados2(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevEncuestados2(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevEncuestados2(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}


	/**
	 * Elimina de la tabla eiel_t_nucleo_aband
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarNucleosAbandonados(NucleosAbandonadosEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevNucleosAbandonados(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_nucleo_aband", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevNucleosAbandonados(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevNucleosAbandonados(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevNucleosAbandonados(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevNucleosAbandonados(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	


	/**
	 * Elimina de la tabla eiel_t1_saneam_ed
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarDepuradora1(Depuradora1EIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevDepuradora1(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t1_saneam_ed", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevDepuradora1(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevDepuradora1(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevDepuradora1(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevDepuradora1(conn, versionActual, versionActual, object);
						//Se borra el elemento de la tabla _tr_:
						eliminarTR(conn, versionActual, revisionExpiradaNula, object);	
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t2_saneam_ed
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarDepuradora2(Depuradora2EIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevDepuradora2(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t2_saneam_ed", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevDepuradora2(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevDepuradora2(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevDepuradora2(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevDepuradora2(conn, versionActual, versionActual, object);
						//Se borra el elemento de la tabla _tr_:
						eliminarTR(conn, versionActual, revisionExpiradaNula, object);	
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}



	/**
	 * Elimina de la tabla eiel_t_id
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */

	private void eliminarInstalacionDeportiva(
			InstalacionesDeportivasEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		TipoDeporte tidepor;
		PreparedStatement ps;
		ResultSet rs;
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevInstalacionDeportiva(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_id", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevInstalacionDeportiva(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevInstalacionDeportiva(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevInstalacionDeportiva(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevInstalacionDeportiva(conn, versionActual, versionActual, object);
					}
				}
			}
			// Se comprueba lo que hay en la BBDD, por si ahy algo más que en lo
			// que viene
			String sSQL = "select * from eiel_t_id_deportes where clave=? and codprov=? and codmunic=? and orden_id=? and codentidad=? and codpoblamiento=? and "
					+ revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getOrdenIdDeportes());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			String tipo;
			boolean encontrado;
			while (rs.next()) {

				tidepor = new TipoDeporte();
				tidepor.setEstadoRevision(rs.getInt("estado_revision"));
				tidepor.setFechaInstalacion(rs.getDate("fecha_inst"));
				tidepor.setFechaRevision(rs.getDate("fecha_revision"));
				tidepor.setObservaciones(rs.getString("observ"));
				tidepor.setOrden(rs.getString("orden_id_deportes"));
				tidepor.setTipo(rs.getString("tipo_deporte"));

				// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
				if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					updateRevDepInstalacionDeportiva(conn, tidepor.getTipo(), ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
				else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
					if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
						eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					else{
						//Se actualiza la tabla versionesAlfa
						beforeRequest(conn, userSesion.getIdUser(),"eiel_t_id_deportes", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

						//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
						if (object.isEstadoBorrable()){
							updateRevDepInstalacionDeportiva(conn, tidepor.getTipo(),versionActual, revisionExpiradaBorrable, object);
						} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
						else{
							updateRevDepInstalacionDeportiva(conn, tidepor.getTipo(),versionActual, revisionExpiradaNula, object);	
						}
						if (object.isEstadoABorrar()){
							//Entra cuando el usuario es publicador y le da a borrar un elemento
							insertRevDepInstalacionDeportiva(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object, tidepor);
						}			
						else{
							//Entra cuando el usuario es validador y le da a borrar un elemento:
							insertRevDepInstalacionDeportiva(conn, versionActual, versionActual, object, tidepor);
						}
					}
				}
				
			 }
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_c_nucleo_poblacion
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarNucleosPoblacion(NucleosPoblacionEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevNucleosPoblacion(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),eiel_c_nucleo_poblacion, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevNucleosPoblacion(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevNucleosPoblacion(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevNucleosPoblacion(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevNucleosPoblacion(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_otros_serv_munic
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarOtrosServMunicipales(OtrosServMunicipalesEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevOtrosServMunicipales(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_otros_serv_munic", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevOtrosServMunicipales(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevOtrosServMunicipales(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevOtrosServMunicipales(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevOtrosServMunicipales(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_padron_nd
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarPadronNucleos(PadronNucleosEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevPadronNucleos(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_padron_nd", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevPadronNucleos(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevPadronNucleos(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevPadronNucleos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevPadronNucleos(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}


	/**
	 * Elimina de la tabla eiel_t_padron_ttmm
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarPadronMunicipios(PadronMunicipiosEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevPadronMunicipios(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),eiel_t_padron_ttmm, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevPadronMunicipios(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevPadronMunicipios(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevPadronMunicipios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevPadronMunicipios(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_pj
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarParquesJardines(ParquesJardinesEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevParquesJardines(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_pj", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevParquesJardines(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevParquesJardines(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevParquesJardines(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevParquesJardines(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_planeam_urban
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarPlaneamientoUrbano(PlaneamientoUrbanoEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevPlaneamientoUrbano(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_planeam_urban", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevPlaneamientoUrbano(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevPlaneamientoUrbano(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevPlaneamientoUrbano(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevPlaneamientoUrbano(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_poblamiento
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarPoblamiento(PoblamientoEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevPoblamiento(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),eiel_t_poblamiento, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevPoblamiento(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevPoblamiento(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevPoblamiento(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevPoblamiento(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_rb
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarRecogidaBasuras(RecogidaBasurasEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();
			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevRecogidaBasuras(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_rb", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevRecogidaBasuras(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevRecogidaBasuras(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevRecogidaBasuras(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevRecogidaBasuras(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_sa
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarCentrosSanitarios(CentrosSanitariosEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevCentrosSanitarios(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_sa", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevCentrosSanitarios(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevCentrosSanitarios(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevCentrosSanitarios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevCentrosSanitarios(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_saneam_au
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarSaneamientoAutonomo(SaneamientoAutonomoEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevSaneamientoAutonomo(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_saneam_au", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevSaneamientoAutonomo(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevSaneamientoAutonomo(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevSaneamientoAutonomo(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevSaneamientoAutonomo(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_saneam_serv
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarServiciosSaneamiento(ServiciosSaneamientoEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevServiciosSaneamiento(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_saneam_serv", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevServiciosSaneamiento(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevServiciosSaneamiento(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevServiciosSaneamiento(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevServiciosSaneamiento(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_srb
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarServiciosRecogidaBasuras(
			ServiciosRecogidaBasuraEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevServiciosRecogidaBasuras(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_srb", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevServiciosRecogidaBasuras(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevServiciosRecogidaBasuras(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevServiciosRecogidaBasuras(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevServiciosRecogidaBasuras(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_su
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarEdificiosSinUso(EdificiosSinUsoEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevEdificiosSinUso(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_su", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevEdificiosSinUso(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevEdificiosSinUso(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevEdificiosSinUso(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevEdificiosSinUso(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_ta
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarTanatorios(TanatoriosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevTanatorios(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_ta", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevTanatorios(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevTanatorios(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevTanatorios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevTanatorios(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_vt
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarVertederos(VertederosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevVertederos(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_vt", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevVertederos(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevVertederos(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevVertederos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevVertederos(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}



	/**
	 * Elimina de la tabla eiel_t_abast_de
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarDepositos(DepositosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevDepositos(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_abast_de", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevDepositos(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevDepositos(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevDepositos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevDepositos(conn, versionActual, versionActual, object);
						//Se borra el elemento de la tabla _tr_:
						eliminarTR(conn, versionActual, revisionExpiradaNula, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}

	}
	


	/**
	 * Elimina de la tabla eiel_t_saneam_pv
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarPuntosVertido(PuntosVertidoEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevPuntosVertido(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_saneam_pv", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevPuntosVertido(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevPuntosVertido(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevPuntosVertido(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevPuntosVertido(conn, versionActual, versionActual, object);
						//Se borra el elemento de la tabla _tr_:
						eliminarTR(conn, versionActual, revisionExpiradaNula, object);	
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}
	

	/**
	 * Elimina de la tabla eiel_t_abast_serv
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void eliminarServiciosAbastecimientos(
			ServiciosAbastecimientosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		
		try {
			conn = CPoolDatabase.getConnection();

			// Entra cuando el usuario es publicador y le da a borrar un elemento ya borrado:
			if ((ConstantesLocalGISEIEL.REVISION_BORRABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
				updateRevServiciosAbastecimientos(conn, ConstantesLocalGISEIEL.REVISION_VALIDA, revisionExpiradaBorrable, object);
			else{ // Entra cuando el usuario es publicador y le da a borrar un elemento temporal o publicable:
				if ((ConstantesLocalGISEIEL.REVISION_TEMPORAL.equals(object.getRevisionExpirada()+"") || ConstantesLocalGISEIEL.REVISION_PUBLICABLE.equals(object.getRevisionExpirada()+"")) && (object.isEstadoABorrar()))
					eliminarVersionAnterior(conn,object.getNombreTablaAlfanumerica(),object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
				else{
					//Se actualiza la tabla versionesAlfa
					beforeRequest(conn, userSesion.getIdUser(),"eiel_t_abast_serv", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);

					//Entra cuando el usuario es validador y le da a borrar un elemento borrado: 
					if (object.isEstadoBorrable()){
						updateRevServiciosAbastecimientos(conn, versionActual, revisionExpiradaBorrable, object);
					} //Entra cuando el usuario es publicador o validador y le da a borrar un elemento: 
					else{
						updateRevServiciosAbastecimientos(conn, versionActual, revisionExpiradaNula, object);	
					}
					if (object.isEstadoABorrar()){
						//Entra cuando el usuario es publicador y le da a borrar un elemento
						insertRevServiciosAbastecimientos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_BORRABLE, object);
					}			
					else{
						//Entra cuando el usuario es validador y le da a borrar un elemento:
						insertRevServiciosAbastecimientos(conn, versionActual, versionActual, object);
					}
				}
			}
		} catch (Exception e) {
			conn.rollback();
			throw e;
		} finally {
			safeClose(null, null, conn);
		}		

	}	
	


	/***************************************/
    

    /**
     * Inserta/Actualiza en la tabla eiel_t_abast_au
     * @param object
     * @param userSesion
     * @throws Exception
     */	
    private void insertarAbastecimientoAutonomo(AbastecimientoAutonomoEIEL object, Sesion userSesion) throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			conn = CPoolDatabase.getConnection();
			sSQL = "select * " + "from eiel_t_abast_au " + "where clave=? and "
					+ "codprov=? and c" + "odmunic=? and "
					+ "codentidad=? and " + "codpoblamiento=? and " +revisionExpiradaNula;

			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINENucleo());
			rs = ps.executeQuery();
			
			String tabla="eiel_t_abast_au";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevAbastecimientoAutonomo(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevAbastecimientoAutonomo(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevAbastecimientoAutonomo(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevAbastecimientoAutonomo(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevAbastecimientoAutonomo(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_abast_au", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevAbastecimientoAutonomo(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_abast_au", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevAbastecimientoAutonomo(conn, versionActual, "9999999999", object);
			*/
		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
    
    
    /**
     * Inserta/Actualiza en la tabla eiel_t_cabildo_consejo
     * @param object
     * @param userSesion
     * @throws Exception
     */
	private void insertarCabildoConsejo(CabildoConsejoEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_cabildo_consejo where codprov=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			rs = ps.executeQuery();
			
			String tabla="eiel_t_cabildo_consejo";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevCabildoConsejo(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevCabildoConsejo(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevCabildoConsejo(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevCabildoConsejo(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevCabildoConsejo(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_cabildo_consejo", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevCabildoConsejo(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_cabildo_consejo", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevCabildoConsejo(conn, versionActual, "9999999999", object);
			*/
		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
    
	/**
	 * Inserta/Actualiza en la tabla eiel_t_abast_ca
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarCaptacion(CaptacionesEIEL object, Sesion userSesion) throws Exception {

			Connection conn = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String sSQL = null;
			boolean actualizar = false;

			try {

				sSQL = "select * from eiel_t_abast_ca where clave=? and codprov=? and codmunic=? and orden_ca=? and " +revisionExpiradaNula;

				conn = CPoolDatabase.getConnection();
				ps = conn.prepareStatement(sSQL);
				ps.setString(1, object.getClave());
				ps.setString(2, object.getCodINEProvincia());
				ps.setString(3, object.getCodINEMunicipio());
				ps.setString(4, object.getCodOrden());
				rs = ps.executeQuery();

				String tabla="eiel_t_abast_ca";
				if (rs.next()) {
					
					//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
					
					//Si es una actualizacion temporal no actualizamos la versión
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
						updateRevCaptaciones(conn, versionActual, revisionExpiradaNula, object);
					
				} else {
					//La primera vez insertamos una entrada en la tabla de versiones
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
				}
				
				if (object.isEstadoValido()){	
					insertRevCaptaciones(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
				else{					
					if (object.isEstadoTemporal()){
						eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
						insertRevCaptaciones(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
					}
					else if (object.isEstadoAutoPublicable()){
						eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
						insertRevCaptaciones(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
					}
					else if (object.isEstadoPublicable()){
						eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
						insertRevCaptaciones(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
					}
				}

			} catch (Exception e) {
				conn.rollback();
				throw e;
			} finally {
				safeClose(rs, ps, conn);
			}

		}
	
	
	/**
	 * Inserta/Actualiza en la tabla eiel_t_carreteras
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarTramosCarreteras(TramosCarreterasEIEL object, Sesion userSesion) throws Exception  {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		int decrementar = 0;

		try {

			sSQL = "select * from eiel_t_carreteras where codprov=? and cod_carrt=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodCarretera());
			rs = ps.executeQuery();

			String tabla="eiel_t_carreteras";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevCarreteras(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevCarreteras(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevCarreteras(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevCarreteras(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevCarreteras(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_carreteras", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevCarreteras(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_carreteras", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevCarreteras(conn, versionActual, "9999999999", object);*/
			


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}

	/**
	 * Inserta/Actualiza de la tabla eiel_t_cc
	 * 
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarCasaConsistorial(CasasConsistorialesEIEL object,
			Sesion userSesion) throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		UsosCasasConsistoriales uso;

		try {


			//Definimos tabla y filtro sql comun para tratamiento de tabla de usos

			//Tratar los usos
			String revision = "";
			if (object.isEstadoValido()){      
				revision = "revision_expirada = " + ConstantesLocalGISEIEL.REVISION_VALIDA+" ";
			} 
			else{                          
				if (object.isEstadoTemporal()){ 
					// Aqui metemos tanto la revision temporal como la publicable por si acaso el elemento a editar es un elemento publicable:
					revision = "(revision_expirada = " + ConstantesLocalGISEIEL.REVISION_TEMPORAL+" OR revision_expirada = " + ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" )";         
				} 
				else if (object.isEstadoAutoPublicable()){ 
					revision = "revision_expirada = " + ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD+" ";                    
				} 
				else if (object.isEstadoPublicable()){ 
					revision = "revision_expirada = " + ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" ";
				} 
			}

			//Se comprueba lo que hay en la BBDD, por si hay algo más que en lo que viene
			sSQL = "select * from eiel_t_cc_usos where clave=? and codprov=? and codmunic=? and orden_cc=? and codentidad=? and codpoblamiento=? and " +revision;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			String tipo;
			boolean encontrado;
			String tabla="eiel_t_cc_usos";
			while( rs.next()){
				//				 System.out.println("Tipo: "+rs.getString("uso"));
				tipo = rs.getString("uso");
				encontrado = false;
				for (int i=0;i<object.getListaUsos().size();i++){
					uso = (UsosCasasConsistoriales) object.getListaUsos().get(i);
					if (uso.getUso().equalsIgnoreCase(tipo)){
						encontrado = true;
						break;
					}
				}
				//Si el uso de la BBDD no se ha encontrado en la lista, se debe eliminar de la BBDD
				if (!encontrado){

					uso = new UsosCasasConsistoriales();
					uso.setUso(rs.getString("uso")); 
					uso.setSuperficieUso(rs.getInt("s_cubierta")); 
					uso.setFechaRevision(rs.getDate("fecha_revision")) ;
					uso.setEstadoRevision(rs.getString("estado_revision"));
					uso.setFechaUso(rs.getDate("fecha_ini"));
					uso.setCodigoOrdenUso(rs.getString("orden_uso")); 
					uso.setObservacionesUso(rs.getString("observ")); 
					uso.setInstPertenece(rs.getString("inst_pertenece"));

					String claveExtra=" and uso='"+uso.getUso()+"'";
					
					if (object.isEstadoValido()){      
                        beforeRequest(conn, false, userSesion.getIdUser(),"eiel_t_cc_usos", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE); 
						updateRevUsosCasaConsistorial(conn, uso.getUso(),versionActual, revisionExpiradaNula, object); 
						insertRevUsosCasaConsistorial(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,uso);                          
					} 
					else{                          
						if (object.isEstadoTemporal()){ 
                             eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);                          
						} 
						else if (object.isEstadoAutoPublicable()){ 
                             eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);                          
						} 
						else if (object.isEstadoPublicable()){ 
                             eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);      
						} 
					}
				}
			}

			Iterator iterUsos = object.getListaUsos().iterator();
			// Se comprueban la lista de usos que vienen
			while (iterUsos.hasNext()) {
				uso = (UsosCasasConsistoriales) iterUsos.next();
				sSQL = "select * from eiel_t_cc_usos where clave=? and codprov=? and codmunic=? and orden_cc=? and codentidad=? and codpoblamiento=? and uso=? and "+ revisionExpiradaNula;

				ps = conn.prepareStatement(sSQL);
				ps.setString(1, object.getClave());
				ps.setString(2, object.getCodINEProvincia());
				ps.setString(3, object.getCodINEMunicipio());
				ps.setString(4, object.getCodOrden());
				ps.setString(5, object.getCodINEEntidad());
				ps.setString(6, object.getCodINEPoblamiento());
				ps.setString(7, uso.getUso());
				rs = ps.executeQuery();

				
				String claveExtra=" and uso='"+uso.getUso()+"'";
				if (rs.next()) {
					//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);

					//Si es una actualizacion temporal no actualizamos la versión
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
						updateRevUsosCasaConsistorial(conn, uso.getUso(),versionActual, revisionExpiradaNula, object);
					
				} else {
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
				}


				if (object.isEstadoValido()){	
					insertRevUsosCasaConsistorial(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,uso);
				}
				else{					
					if (object.isEstadoTemporal()){
						eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
						insertRevUsosCasaConsistorial(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object,uso);
					}
					else if (object.isEstadoAutoPublicable()){
						eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
						insertRevUsosCasaConsistorial(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object,uso);
					}
					else if (object.isEstadoPublicable()){
						eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
						insertRevUsosCasaConsistorial(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,uso);
					}
				}
			}


			sSQL = "select * from eiel_t_cc where clave=? and codprov=? and codmunic=? and orden_cc=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			//TODO: Para no insertar versiones de mas, habría que comparar y saber si se ha modificdo algo de eiel_t_cc

			//Tratamiento tabla principal
			tabla="eiel_t_cc";
			if (rs.next()) {
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevCasaConsistorial(conn, versionActual, revisionExpiradaNula, object);
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}

			if (object.isEstadoValido()){	
				insertRevCasaConsistorial(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevCasaConsistorial(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevCasaConsistorial(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevCasaConsistorial(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
/**
 * Inserta/Actualiza la tabla eiel_t_ce
 * @param object
 * @param userSesion
 * @throws Exception
 */
	private void insertarCementerios(CementeriosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_ce where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ce=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.setString(6, object.getOrden());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_ce";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevCementerios(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevCementerios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevCementerios(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevCementerios(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevCementerios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			
			
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_ce", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevCementerios(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_ce", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevCementerios(conn, versionActual, "9999999999", object);*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}

	


	/**
	 * Inserta/Actualiza la tabla eiel_t1_saneam_ed
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarDepuradora1(Depuradora1EIEL object, Sesion userSesion) throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t1_saneam_ed where clave=? and codprov=? and codmunic=? and orden_ed=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			rs = ps.executeQuery();
			
			String tabla="eiel_t1_saneam_ed";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevDepuradora1(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevDepuradora1(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevDepuradora1(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevDepuradora1(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevDepuradora1(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t1_saneam_ed", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevDepuradora1(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t1_saneam_ed", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevDepuradora1(conn, versionActual, "9999999999", object);*/



		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t2_saneam_ed
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarDepuradora2(Depuradora2EIEL object, Sesion userSesion) throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t2_saneam_ed where clave=? and codprov=? and codmunic=? and orden_ed=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			rs = ps.executeQuery();

			String tabla="eiel_t2_saneam_ed";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevDepuradora2(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevDepuradora2(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevDepuradora2(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevDepuradora2(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevDepuradora2(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t2_saneam_ed", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevDepuradora2(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t2_saneam_ed", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevDepuradora2(conn, versionActual, "9999999999", object);*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}

	
	/**
	 * Inserta/Actualiza la tabla eiel_t_en
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarCentroEnsenianza(CentrosEnsenianzaEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		NivelesCentrosEnsenianza nivel;

		try {


			//Definimos tabla y filtro sql comun para tratamiento de tabla de usos
			

			//Se comprueba lo que hay en la BBDD, por si ahy algo más que en lo que viene
			sSQL = "select * from eiel_t_en_nivel where clave=? and codprov=? and codmunic=? and orden_en=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;			
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			String tipo;
			boolean encontrado;
			String tabla="eiel_t_en_nivel";
			while( rs.next()){
				tipo = rs.getString("nivel");
				encontrado = false;
				for (int i=0;i<object.getListaNiveles().size();i++){
					nivel = (NivelesCentrosEnsenianza) object.getListaNiveles().get(i);
					if (nivel.getNivel().equalsIgnoreCase(tipo)){
						encontrado = true;
						break;
					}
				}
				//Si el uso de la BBDD no se ha encontrado en la lista, se debe eliminar de la BBDD
				if (!encontrado){

					nivel = new NivelesCentrosEnsenianza();
					nivel.setNivel(rs.getString("nivel")); 	
					nivel.setFechaRevision(rs.getDate("fecha_revision")) ;
					nivel.setEstadoRevision(rs.getString("estado_revision"));
					nivel.setFechaCurso(rs.getDate("fecha_curso")); 
					nivel.setCodigoOrdenNivel(rs.getString("orden_en_nivel"));
					nivel.setNumeroAlumnos(rs.getInt("alumnos"));
					nivel.setNumeroPlazas(rs.getInt("plazas"));
					nivel.setObservacionesNivel(rs.getString("observ")); 
					nivel.setUnidades(rs.getInt("unidades"));

					String claveExtra=" and nivel='"+nivel.getNivel()+"'";

					if (object.isEstadoValido()){      
                        beforeRequest(conn, false, userSesion.getIdUser(),"eiel_t_cc_usos", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE); 
						updateRevNivelesCentroEnsenianza(conn, nivel.getNivel(),versionActual, revisionExpiradaNula, object);
						insertRevNivelesCentroEnsenianza(conn, versionActual,versionActual, object, nivel);                    
					} 
					else{                          
						if (object.isEstadoTemporal()){ 
                             eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);                          
						} 
						else if (object.isEstadoAutoPublicable()){ 
                             eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);                          
						} 
						else if (object.isEstadoPublicable()){ 
                             eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);      
						} 
					}
				}
			}

			Iterator iterUsos = object.getListaNiveles().iterator();
			// Se comprueban la lista de usos que vienen
			while (iterUsos.hasNext()) {
				nivel = (NivelesCentrosEnsenianza) iterUsos.next();
				sSQL = "select * from eiel_t_en_nivel where clave=? and codprov=? and codmunic=? and orden_en=? and codentidad=? and codpoblamiento=? and nivel=? and "+ revisionExpiradaNula;

				ps = conn.prepareStatement(sSQL);
				ps.setString(1, object.getClave());
				ps.setString(2, object.getCodINEProvincia());
				ps.setString(3, object.getCodINEMunicipio());
				ps.setString(4, object.getCodOrden());
				ps.setString(5, object.getCodINEEntidad());
				ps.setString(6, object.getCodINEPoblamiento());
				ps.setString(7, nivel.getNivel());
				rs = ps.executeQuery();

				String claveExtra=" and nivel='"+nivel.getNivel()+"'";

				if (rs.next()) {
					//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
					//Si es una actualizacion temporal no actualizamos la versión
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
						updateRevNivelesCentroEnsenianza(conn,nivel.getNivel(),versionActual, revisionExpiradaNula, object);
				} else {

					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
				}
				if (object.isEstadoValido()){	
					insertRevNivelesCentroEnsenianza(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,nivel);
				}
				else{					
					if (object.isEstadoTemporal()){
						eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
						insertRevNivelesCentroEnsenianza(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object,nivel);
					}
					else if (object.isEstadoAutoPublicable()){
						eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
						insertRevNivelesCentroEnsenianza(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object,nivel);
					}
					else if (object.isEstadoPublicable()){
						eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
						insertRevNivelesCentroEnsenianza(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,nivel);
					}
				}
			}

			sSQL = "select * from eiel_t_en where clave=? and codprov=? and codmunic=? and orden_en=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;			
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			//Tratamiento tabla principal
			tabla="eiel_t_en";
			
			if (rs.next()) {
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevCentroEnsenianza(conn, versionActual, revisionExpiradaNula, object);
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}

			if (object.isEstadoValido()){	
				insertRevCentroEnsenianza(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevCentroEnsenianza(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevCentroEnsenianza(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevCentroEnsenianza(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_cu
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarCentroCultural(CentrosCulturalesEIEL object, Sesion userSesion)
			throws Exception {


		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		UsosCentrosCulturales uso;

		try {


			//Definimos tabla y filtro sql comun para tratamiento de tabla de usos

			//Tratar los usos
			String revision = "";
			if (object.isEstadoValido()){      
				revision = "revision_expirada = " + ConstantesLocalGISEIEL.REVISION_VALIDA+" ";
			} 
			else{                          
				if (object.isEstadoTemporal()){ 
					// Aqui metemos tanto la revision temporal como la publicable por si acaso el elemento a editar es un elemento publicable:
					revision = "(revision_expirada = " + ConstantesLocalGISEIEL.REVISION_TEMPORAL+" OR revision_expirada = " + ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" )";         
				} 
				else if (object.isEstadoAutoPublicable()){ 
					revision = "revision_expirada = " + ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD+" ";                    
				} 
				else if (object.isEstadoPublicable()){ 
					revision = "revision_expirada = " + ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" ";
				} 
			}
			//Se comprueba lo que hay en la BBDD, por si ahy algo más que en lo que viene
			sSQL = "select * from eiel_t_cu_usos where clave=? and codprov=? and codmunic=? and orden_cu=? and codentidad=? and codpoblamiento=? and " +revision;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			String tipo;
			boolean encontrado;
			String tabla="eiel_t_cu_usos";
			while( rs.next()){
				tipo = rs.getString("uso");
				encontrado = false;
				for (int i=0;i<object.getListaUsos().size();i++){
					uso = (UsosCentrosCulturales) object.getListaUsos().get(i);
					if (uso.getUso().equalsIgnoreCase(tipo)){
						encontrado = true;
						break;
					}
				}
				//Si el uso de la BBDD no se ha encontrado en la lista, se debe eliminar de la BBDD
				if (!encontrado){
					uso = new UsosCentrosCulturales();
					uso.setUso(rs.getString("uso")); 
					uso.setSuperficieUso(rs.getInt("s_cubierta")); 
					uso.setFechaRevision(rs.getDate("fecha_revision")) ;
					uso.setEstadoRevision(rs.getString("estado_revision"));
					uso.setFechaUso(rs.getDate("fecha_ini"));
					uso.setCodigoOrdenUso(rs.getString("orden_uso")); 
					uso.setObservacionesUso(rs.getString("observ"));

					String claveExtra=" and uso='"+uso.getUso()+"'";
					if (object.isEstadoValido()){      
                        beforeRequest(conn, false, userSesion.getIdUser(),"eiel_t_cc_usos", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE); 
						updateRevUsosCentroCultural(conn, uso.getUso(),versionActual, revisionExpiradaNula, object); 
						insertRevUsosCentroCultural(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,uso);                          
					} 
					else{                          
						if (object.isEstadoTemporal()){ 
                             eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);                          
						} 
						else if (object.isEstadoAutoPublicable()){ 
                             eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);                          
						} 
						else if (object.isEstadoPublicable()){ 
                             eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);      
						} 
					}
				}
			}

			Iterator iterUsos = object.getListaUsos().iterator();
			// Se comprueban la lista de usos que vienen
			while (iterUsos.hasNext()) {
				uso = (UsosCentrosCulturales) iterUsos.next();
				sSQL = "select * from eiel_t_cu_usos where clave=? and codprov=? and codmunic=? and orden_cu=? and codentidad=? and codpoblamiento=? and uso=? and "+ revisionExpiradaNula;

				ps = conn.prepareStatement(sSQL);
				ps.setString(1, object.getClave());
				ps.setString(2, object.getCodINEProvincia());
				ps.setString(3, object.getCodINEMunicipio());
				ps.setString(4, object.getCodOrden());
				ps.setString(5, object.getCodINEEntidad());
				ps.setString(6, object.getCodINEPoblamiento());
				ps.setString(7, uso.getUso());
				rs = ps.executeQuery();

				String claveExtra=" and uso='"+uso.getUso()+"'";
				if (rs.next()) {
					//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
					//Si es una actualizacion temporal no actualizamos la versión
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
						updateRevUsosCentroCultural(conn, uso.getUso(),versionActual, revisionExpiradaNula, object);
				} else {

					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
				}
				if (object.isEstadoValido()){	
					insertRevUsosCentroCultural(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,uso);
				}
				else{					
					if (object.isEstadoTemporal()){
						eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
						insertRevUsosCentroCultural(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object,uso);
					}
					else if (object.isEstadoAutoPublicable()){
						eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
						insertRevUsosCentroCultural(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object,uso);
					}
					else if (object.isEstadoPublicable()){
						eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
						insertRevUsosCentroCultural(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,uso);
					}
				}
			}

			sSQL = "select * from eiel_t_cu where clave=? and codprov=? and codmunic=? and orden_cu=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			//TODO: Para no insertar versiones de mas, habría que comparar y saber si se ha modificdo algo de eiel_t_cc

			//Tratamiento tabla principal
			tabla="eiel_t_cu";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);

				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevCentroCultural(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}

			if (object.isEstadoValido()){	
				insertRevCentroCultural(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevCentroCultural(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevCentroCultural(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevCentroCultural(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}		

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}


	/**
	 * Inserta/Actualiza la tabla eiel_t_id
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarInstalacionDeportiva(InstalacionesDeportivasEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		TipoDeporte tidepor;

		try {


			//Definimos tabla y filtro sql comun para tratamiento de tabla de usos

			//Tratar los usos
			String revision = "";
			if (object.isEstadoValido()){      
				revision = "revision_expirada = " + ConstantesLocalGISEIEL.REVISION_VALIDA+" ";

			} 
			else{                          
				if (object.isEstadoTemporal()){ 
					// Aqui metemos tanto la revision temporal como la publicable por si acaso el elemento a editar es un elemento publicable:
					revision = "(revision_expirada = " + ConstantesLocalGISEIEL.REVISION_TEMPORAL+" OR revision_expirada = " + ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" )";         
				} 
				else if (object.isEstadoAutoPublicable()){ 
					revision = "revision_expirada = " + ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD+" ";                    
				} 
				else if (object.isEstadoPublicable()){ 
					revision = "revision_expirada = " + ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" ";
				} 
			}
			//Se comprueba lo que hay en la BBDD, por si ahy algo más que en lo que viene
			sSQL = "select * from eiel_t_id_deportes where clave=? and codprov=? and codmunic=? and orden_id=? and codentidad=? and codpoblamiento=? and " +revision;			

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getOrdenIdDeportes());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			String tipo;
			boolean encontrado;
			while( rs.next()){
				tipo = rs.getString("tipo_deporte");
				encontrado = false;
				for (int i=0;i<object.getListaTipos().size();i++){
					tidepor = (TipoDeporte) object.getListaTipos().get(i);
					if (tidepor.getTipo().equalsIgnoreCase(tipo)){
						encontrado = true;
						break;
					}
				}
				//Si el uso de la BBDD no se ha encontrado en la lista, se debe eliminar de la BBDD
				if (!encontrado){
					tidepor = new TipoDeporte();
					tidepor.setEstadoRevision(rs.getInt("estado_revision")); 
					tidepor.setFechaInstalacion(rs.getDate("fecha_inst")); 
					tidepor.setFechaRevision(rs.getDate("fecha_revision")) ;
					tidepor.setObservaciones(rs.getString("observ"));
					tidepor.setOrden(rs.getString("orden_id_deportes"));
					tidepor.setTipo(rs.getString("tipo_deporte"));							
					beforeRequest(conn, false, userSesion.getIdUser(),"eiel_t_id_deportes", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_DELETE);
					updateRevDepInstalacionDeportiva(conn, tidepor.getTipo(),versionActual, revisionExpiradaNula, object);
					insertRevDepInstalacionDeportiva(conn, versionActual,versionActual, object, tidepor);
				}
			}

			Iterator iterUsos = object.getListaTipos().iterator();
			// Se comprueban la lista de usos que vienen
			while (iterUsos.hasNext()) {
				tidepor = (TipoDeporte) iterUsos.next();
				sSQL = "select * from eiel_t_id_deportes where clave=? and codprov=? and codmunic=? and orden_id=? and codentidad=? and codpoblamiento=? and tipo_deporte = ? and " +revisionExpiradaNula;
				ps = conn.prepareStatement(sSQL);
				ps.setString(1, object.getClave());
				ps.setString(2, object.getCodINEProvincia());
				ps.setString(3, object.getCodINEMunicipio());
				ps.setString(4, object.getOrdenIdDeportes());
				ps.setString(5, object.getCodINEEntidad());
				ps.setString(6, object.getCodINEPoblamiento());
				ps.setString(7, tidepor.getTipo());
				rs = ps.executeQuery();
				
				String tabla="eiel_t_id_deportes";
				String claveExtra=" and tipo_deporte='"+tidepor.getTipo()+"'";
				
				if (rs.next()) {
					//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);

					//Si es una actualizacion temporal no actualizamos la versión
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
						updateRevDepInstalacionDeportiva(conn, tidepor.getTipo(),versionActual, revisionExpiradaNula, object);
				} else {
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
				}
				if (object.isEstadoValido()){	
					insertRevDepInstalacionDeportiva(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,tidepor);
				}
				else{					
					if (object.isEstadoTemporal()){
						eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
						insertRevDepInstalacionDeportiva(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object,tidepor);
					}
					else if (object.isEstadoAutoPublicable()){
						eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
						insertRevDepInstalacionDeportiva(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object,tidepor);
					}
					else if (object.isEstadoPublicable()){
						eliminarVersionAnterior(conn,tabla,claveExtra,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
						insertRevDepInstalacionDeportiva(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object,tidepor);
					}
				}
			}

			sSQL = "select * from eiel_t_id where clave=? and codprov=? and codmunic=? and orden_id=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;			

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getOrdenIdDeportes());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			//TODO: Para no insertar versiones de mas, habría que comparar y saber si se ha modificdo algo de eiel_t_cc

			//Tratamiento tabla principal
			String tabla="eiel_t_id";
			if (rs.next()) {
				//Se actualiza la linea que hay, si ha cambiado algo con la que hayen la BBDD
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevInstalacionDeportiva(conn, versionActual, revisionExpiradaNula, object);

			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}

			if (object.isEstadoValido()){	
				insertRevInstalacionDeportiva(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevInstalacionDeportiva(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevInstalacionDeportiva(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevInstalacionDeportiva(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}	
	}

	

	/**
	 * Inserta/Actualiza la tabla eiel_t_cc_usos
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarUsosCasaConsistorial(CasasConsistorialesEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;

		UsosCasasConsistoriales uso;
		
		try {
			
			
			Iterator iterUsos = object.getListaUsos().iterator();
			
			
			//Se comprueban la lista de usos que vienen
			while(iterUsos.hasNext()){
				uso = (UsosCasasConsistoriales)iterUsos.next();
				sSQL = "select * from eiel_t_cc_usos where clave=? and codprov=? and codmunic=? and orden_cc=? and codentidad=? and codpoblamiento=? and uso=? and " +revisionExpiradaNula;

				conn = CPoolDatabase.getConnection();
				ps = conn.prepareStatement(sSQL);
				ps.setString(1, object.getClave());
				ps.setString(2, object.getCodINEProvincia());
				ps.setString(3, object.getCodINEMunicipio());
				ps.setString(4, object.getCodOrden());
				ps.setString(5, object.getCodINEEntidad());
				ps.setString(6, object.getCodINEPoblamiento());
				ps.setString(7,  uso.getUso());
				rs = ps.executeQuery();
				if (rs.next()) {
					//TODO: Si en la BBDD está lo que viene, se actualiza
					beforeRequest(conn, false, userSesion.getIdUser(),"eiel_t_cc_usos", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
					//Se actualiza la linea que hay
					updateRevUsosCasaConsistorial(conn, uso.getUso(), versionActual, revisionExpiradaNula, object);
				}else{
					//TODO: Si no hay nada en la BBDD, se inserta
					beforeRequest(conn, false, userSesion.getIdUser(),"eiel_t_cc_usos", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT); 
				}
				insertRevUsosCasaConsistorial(conn, versionActual, "9999999999" , object, uso);
			}
			
			
		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_c_nucleo_poblacion
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarNucleosPoblacion(NucleosPoblacionEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from "+eiel_c_nucleo_poblacion+" where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			ps.setString(3, object.getCodINEEntidad());
			ps.setString(4, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			
			String tabla=eiel_c_nucleo_poblacion;
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevNucleosPoblacion(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevNucleosPoblacion(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevNucleosPoblacion(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevNucleosPoblacion(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevNucleosPoblacion(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_nucleos_poblacion", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevNucleosPoblacion(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_nucleos_poblacion", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevNucleosPoblacion(conn, versionActual, "9999999999", object);
			*/


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}


	/**
	 * Inserta/Actualiza la tabla eiel_t_otros_serv_munic
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarOtrosServMunicipales(OtrosServMunicipalesEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_otros_serv_munic where codprov=? and codmunic=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			rs = ps.executeQuery();

			String tabla="eiel_t_otros_serv_munic";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevOtrosServMunicipales(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevOtrosServMunicipales(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevOtrosServMunicipales(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevOtrosServMunicipales(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevOtrosServMunicipales(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_otros_serv_munic", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevOtrosServMunicipales(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_otros_serv_munic", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevOtrosServMunicipales(conn, versionActual, "9999999999", object);
			*/


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_padron_nd
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarPadronNucleos(PadronNucleosEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_padron_nd where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			ps.setString(3, object.getCodINEEntidad());
			ps.setString(4, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			
			String tabla="eiel_t_padron_nd";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevPadronNucleos(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevPadronNucleos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevPadronNucleos(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevPadronNucleos(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevPadronNucleos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_padron_nd", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevPadronNucleos(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_padron_nd", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevPadronNucleos(conn, versionActual, "9999999999", object);*/
			


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	

	/**
	 * Inserta/Actualiza la tabla eiel_t_padron_ttmm
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarPadronMunicipios(PadronMunicipiosEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from "+eiel_t_padron_ttmm+" where codprov=? and codmunic=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			rs = ps.executeQuery();

			
			String tabla=eiel_t_padron_ttmm;
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevPadronMunicipios(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevPadronMunicipios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevPadronMunicipios(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevPadronMunicipios(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevPadronMunicipios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_padron_ttmm", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevPadronMunicipios(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_padron_ttmm", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevPadronMunicipios(conn, versionActual, "9999999999", object);*/
			


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_pj
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarParquesJardines(ParquesJardinesEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_pj where clave=? and codprov=? and codmunic=? and orden_pj=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			String tabla="eiel_t_pj";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevParquesJardines(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevParquesJardines(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevParquesJardines(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevParquesJardines(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevParquesJardines(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_pj", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevParquesJardines(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_pj", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevParquesJardines(conn, versionActual, "9999999999", object);
			*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_planeam_urban
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarPlaneamientoUrbano(PlaneamientoUrbanoEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_planeam_urban where codprov=? and codmunic=? and orden_plan=? and " +revisionExpiradaNula;
			
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			ps.setString(3, object.getOrden());
			rs = ps.executeQuery();

			
			String tabla="eiel_t_planeam_urban";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevPlaneamientoUrbano(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevPlaneamientoUrbano(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevPlaneamientoUrbano(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevPlaneamientoUrbano(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevPlaneamientoUrbano(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_planeam_urban", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevPlaneamientoUrbano(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_planeam_urban", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevPlaneamientoUrbano(conn, versionActual, "9999999999", object);*/
			


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_poblamiento
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarPoblamiento(PoblamientoEIEL object, Sesion userSesion) throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from "+eiel_t_poblamiento+" where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			ps.setString(3, object.getCodINEEntidad());
			ps.setString(4, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			
			String tabla=eiel_t_poblamiento;
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevPoblamiento(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevPoblamiento(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevPoblamiento(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevPoblamiento(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevPoblamiento(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_poblamiento", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevPoblamiento(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_poblamiento", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevPoblamiento(conn, versionActual, "9999999999", object);*/
			


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_rb
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarRecogidaBasuras(RecogidaBasurasEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_rb where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and tipo=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.setString(6, object.getTipo());
			rs = ps.executeQuery();

			
			String tabla="eiel_t_rb";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevRecogidaBasuras(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevRecogidaBasuras(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevRecogidaBasuras(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevRecogidaBasuras(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevRecogidaBasuras(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_rb", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevRecogidaBasuras(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_rb", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevRecogidaBasuras(conn, versionActual, "9999999999", object);			
			*/


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_sa
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarCentrosSanitarios(CentrosSanitariosEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_sa where clave=? and codprov=? and codmunic=? and orden_sa=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			
			String tabla="eiel_t_sa";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevCentrosSanitarios(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevCentrosSanitarios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevCentrosSanitarios(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevCentrosSanitarios(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevCentrosSanitarios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_sa", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevCentrosSanitarios(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_sa", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevCentrosSanitarios(conn, versionActual, "9999999999", object);
			*/


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_saneam_au
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarSaneamientoAutonomo(SaneamientoAutonomoEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_saneam_au where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			
			String tabla="eiel_t_saneam_au";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevSaneamientoAutonomo(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevSaneamientoAutonomo(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevSaneamientoAutonomo(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevSaneamientoAutonomo(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevSaneamientoAutonomo(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_saneam_au", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevSaneamientoAutonomo(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_saneam_au", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevSaneamientoAutonomo(conn, versionActual, "9999999999", object);
			*/


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_saneam_serv
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarServiciosSaneamiento(ServiciosSaneamientoEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_saneam_serv where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			ps.setString(3, object.getCodINEEntidad());
			ps.setString(4, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			String tabla="eiel_t_saneam_serv";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevServiciosSaneamiento(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevServiciosSaneamiento(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevServiciosSaneamiento(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevServiciosSaneamiento(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevServiciosSaneamiento(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_saneam_serv", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevServiciosSaneamiento(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_saneam_serv", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevServiciosSaneamiento(conn, versionActual, "9999999999", object);*/
			

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	

	/**
	 * Inserta/Actualiza la tabla eiel_t_ce
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarServiciosRecogidaBasuras(
			ServiciosRecogidaBasuraEIEL object, Sesion userSesion) throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_rb_serv where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			ps.setString(3, object.getCodINEEntidad());
			ps.setString(4, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_rb_serv";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevServiciosRecogidaBasuras(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevServiciosRecogidaBasuras(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevServiciosRecogidaBasuras(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevServiciosRecogidaBasuras(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevServiciosRecogidaBasuras(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_srb", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevServiciosRecogidaBasuras(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_srb", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevServiciosRecogidaBasuras(conn, versionActual, "9999999999", object);
			*/


		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_su
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarEdificiosSinUso(EdificiosSinUsoEIEL object, Sesion userSesion)
			throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_su where clave=? and codprov=? and codmunic=? and orden_su=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			String tabla="eiel_t_su";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevEdificiosSinUso(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevEdificiosSinUso(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevEdificiosSinUso(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevEdificiosSinUso(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevEdificiosSinUso(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_su", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevEdificiosSinUso(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_su", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevEdificiosSinUso(conn, versionActual, "9999999999", object);
			*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}


	/**
	 * Inserta/Actualiza la tabla eiel_t_ta
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarTanatorios(TanatoriosEIEL object, Sesion userSesion) throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_ta where clave=? and codprov=? and codmunic=? and orden_ta=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			ps.setString(5, object.getCodINEEntidad());
			ps.setString(6, object.getCodINEPoblamiento());
			rs = ps.executeQuery();

			String tabla="eiel_t_ta";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevTanatorios(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevTanatorios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevTanatorios(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevTanatorios(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevTanatorios(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_ta", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevTanatorios(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_ta", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevTanatorios(conn, versionActual, "9999999999", object);
			*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_vt
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarVertederos(VertederosEIEL object, Sesion userSesion) throws Exception {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;

		try {

			sSQL = "select * from eiel_t_vt where clave=? and codprov=? and codmunic=? and orden_vt=? and " +revisionExpiradaNula;

			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodOrden());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_vt";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevVertederos(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevVertederos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevVertederos(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevVertederos(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevVertederos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_vt", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevVertederos(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_vt", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevVertederos(conn, versionActual, "9999999999", object);
			*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}

	}

	


	/**
	 * Inserta/Actualiza la tabla eiel_t_abast_de
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarDepositos(DepositosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_abast_de where clave=? and codprov=? and codmunic=? and orden_de=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getOrdenDeposito());
			rs = ps.executeQuery();
			

			String tabla="eiel_t_abast_de";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevDepositos(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevDepositos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevDepositos(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevDepositos(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevDepositos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_saneam_pv
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarPuntosVertido(PuntosVertidoEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_saneam_pv where clave=? and codprov=? and codmunic=? and orden_pv=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getOrden());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_saneam_pv";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevPuntosVertido(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevPuntosVertido(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevPuntosVertido(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevPuntosVertido(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevPuntosVertido(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_saneam_pv", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevPuntosVertido(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_saneam_pv", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevPuntosVertido(conn, versionActual, "9999999999", object);*/
			

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_abast_serv
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarServiciosAbastecimientos(
			ServiciosAbastecimientosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_abast_serv where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			ps.setString(3, object.getCodINEEntidad());
			ps.setString(4, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_abast_serv";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevServiciosAbastecimientos(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevServiciosAbastecimientos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevServiciosAbastecimientos(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevServiciosAbastecimientos(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevServiciosAbastecimientos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
		

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	
	

	/**
	 * Inserta/Actualiza la tabla eiel_t_as
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarCentrosAsistenciales(CentrosAsistencialesEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_as where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_as=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.setString(6, object.getOrdenAsistencial());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_as";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevCentrosAsistenciales(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevCentrosAsistenciales(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevCentrosAsistenciales(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevCentrosAsistenciales(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevCentrosAsistenciales(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_as", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevCentrosAsistenciales(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_as", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevCentrosAsistenciales(conn, versionActual, "9999999999", object);
			*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}

	/**
	 * Inserta/Actualiza en la tabla eiel_t_entidades_agrupadas
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarEntidadesAgrupadas(EntidadesAgrupadasEIEL object, Sesion userSesion) throws Exception {

			Connection conn = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String sSQL = null;
			boolean actualizar = false;

			try {
			
				sSQL = "select * from "+eiel_t_entidades_agrupadas+" where codmunicipio=? and codentidad=? and codnucleo=? and " +revisionExpiradaNula;

				conn = CPoolDatabase.getConnection();
				ps = conn.prepareStatement(sSQL);
				ps.setString(1, object.getCodINEMunicipio());
				ps.setString(2, object.getCodEntidad());
				ps.setString(3, object.getCodNucleo());
			
				rs = ps.executeQuery();

				String tabla=eiel_t_entidades_agrupadas;
				if (rs.next()) {
					
					//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
					
					//Si es una actualizacion temporal no actualizamos la versión
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
						updateRevEntidadesAgrupadas(conn, versionActual, revisionExpiradaNula, object);

				} else {
					//La primera vez insertamos una entrada en la tabla de versiones
					if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
						beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
				}
				
				if (object.isEstadoValido()){	
					insertRevEntidadesAgrupadas(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
				else{					
					if (object.isEstadoTemporal()){
						eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
						insertRevEntidadesAgrupadas(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
					}
					else if (object.isEstadoAutoPublicable()){
						eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
						insertRevEntidadesAgrupadas(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
					}
					else if (object.isEstadoPublicable()){
						eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
						insertRevEntidadesAgrupadas(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
					}
				}

			} catch (Exception e) {
				conn.rollback();
				throw e;
			} finally {
				safeClose(rs, ps, conn);
			}

		}


	/**
	 * Inserta/Actualiza la tabla eiel_t_entidad_singular
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarEntidadesSingulares(EntidadesSingularesEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from "+eiel_t_entidad_singular+" where codprov=? and codmunic=? and codentidad=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			ps.setString(3, object.getCodINEEntidad());
			rs = ps.executeQuery();
			
			String tabla=eiel_t_entidad_singular;
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevEntidadesSingulares(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevEntidadesSingulares(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevEntidadesSingulares(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevEntidadesSingulares(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevEntidadesSingulares(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_entidad_singular", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevEntidadesSingulares(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_entidad_singular", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevEntidadesSingulares(conn, versionActual, "9999999999", object);
			*/
			

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	
	/**
	 * Inserta/Actualiza la tabla eiel_t_inf_ttmm
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarInfoTerminosMunicipales(NucleoEncuestado7EIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_inf_ttmm where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			ps.setString(3, object.getCodINEEntidad());
			ps.setString(4, object.getCodINEPoblamiento());
			rs = ps.executeQuery();
			
			String tabla="eiel_t_inf_ttmm";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevInfoTerminosMunicipales(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevInfoTerminosMunicipales(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevInfoTerminosMunicipales(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevInfoTerminosMunicipales(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevInfoTerminosMunicipales(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_inf_ttmm", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevInfoTerminosMunicipales(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_inf_ttmm", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevInfoTerminosMunicipales(conn, versionActual, "9999999999", object);*/
			

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_ip
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarIncendiosProteccion(IncendiosProteccionEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_ip where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ip=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.setString(6, object.getOrden());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_ip";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevIncendiosProteccion(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevIncendiosProteccion(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevIncendiosProteccion(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevIncendiosProteccion(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevIncendiosProteccion(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_ip", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevIncendiosProteccion(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_ip", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevIncendiosProteccion(conn, versionActual, "9999999999", object);
			*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	

	/**
	 * Inserta/Actualiza la tabla eiel_t_lm
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarLonjasMercados(LonjasMercadosEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_lm where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_lm=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.setString(6, object.getOrden());
			rs = ps.executeQuery();
			
			String tabla="eiel_t_lm";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevLonjasMercados(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevLonjasMercados(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevLonjasMercados(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevLonjasMercados(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevLonjasMercados(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_lm", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevLonjasMercados(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_lm", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevLonjasMercados(conn, versionActual, "9999999999", object);			
			*/
			

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_mt
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarMataderos(MataderosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_mt where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_mt=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			ps.setString(5, object.getCodINEPoblamiento());
			ps.setString(6, object.getOrden());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_mt";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevMataderos(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevMataderos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevMataderos(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevMataderos(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevMataderos(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_mt", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevMataderos(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_mt", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevMataderos(conn, versionActual, "9999999999", object);
			*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_abast_tp
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarTratamientosPotabilizacion(
			TratamientosPotabilizacionEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_abast_tp where clave=? and codprov=? and codmunic=? and orden_tp=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getClave());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getOrdenPotabilizadora());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_abast_tp";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevTratamientosPotabilizacion(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevTratamientosPotabilizacion(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevTratamientosPotabilizacion(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevTratamientosPotabilizacion(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevTratamientosPotabilizacion(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			
			/*if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_abast_tp", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevTratamientosPotabilizacion(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_abast_tp", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevTratamientosPotabilizacion(conn, versionActual, "9999999999", object);
			*/

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	

	/**
	 * Inserta/Actualiza la tabla eiel_t_mun_diseminados
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarDiseminados(DiseminadosEIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_mun_diseminados where codprov=? and codmunic=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEProvincia());
			ps.setString(2, object.getCodINEMunicipio());
			rs = ps.executeQuery();
			
			String tabla="eiel_t_mun_diseminados";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevDiseminados(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevDiseminados(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevDiseminados(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevDiseminados(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevDiseminados(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_mun_diseminados", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevDiseminados(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_mun_diseminados", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevDiseminados(conn, versionActual, "9999999999", object);
			*/
			

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_nucl_encuest_1
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarEncuestados1(Encuestados1EIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from "+eiel_t_nucl_encuest_1+" where codpoblamiento=? and codprov=? and codmunic=? and codentidad=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEPoblamiento());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			rs = ps.executeQuery();
			
			String tabla=eiel_t_nucl_encuest_1;
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevEncuestados1(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevEncuestados1(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevEncuestados1(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevEncuestados1(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevEncuestados1(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_nucl_encuest_1", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevEncuestados1(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_nucl_encuest_1", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			updateRevEncuestados1(conn, versionActual, "9999999999", object);*/
			

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_nucl_encuest_2
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarEncuestados2(Encuestados2EIEL object, Sesion userSesion) throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_nucl_encuest_2 where codpoblamiento=? and codprov=? and codmunic=? and codentidad=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEPoblamiento());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			rs = ps.executeQuery();
			
			
			String tabla="eiel_t_nucl_encuest_2";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevEncuestados2(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevEncuestados2(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevEncuestados2(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevEncuestados2(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevEncuestados2(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
						

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}
	


	/**
	 * Inserta/Actualiza la tabla eiel_t_nucleo_aband
	 * @param object
	 * @param userSesion
	 * @throws Exception
	 */
	private void insertarNucleosAbandonados(NucleosAbandonadosEIEL object, Sesion userSesion)
			throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sSQL = null;
		boolean actualizar = false;
		try {
			sSQL = "select * from eiel_t_nucleo_aband where codpoblamiento=? and codprov=? and codmunic=? and codentidad=? and " +revisionExpiradaNula;
			conn = CPoolDatabase.getConnection();
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, object.getCodINEPoblamiento());
			ps.setString(2, object.getCodINEProvincia());
			ps.setString(3, object.getCodINEMunicipio());
			ps.setString(4, object.getCodINEEntidad());
			rs = ps.executeQuery();
			
			String tabla="eiel_t_nucleo_aband";
			if (rs.next()) {
				
				//Insertar una nueva version en la tabla versionesAlfa solo si es el objeto actual
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				
				//Si es una actualizacion temporal no actualizamos la versión
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))					
					updateRevNucleosAbandonados(conn, versionActual, revisionExpiradaNula, object);
				
			} else {
				//La primera vez insertamos una entrada en la tabla de versiones
				if ((object.isEstadoValido()) || (object.isEstadoPublicable()))	
					beforeRequest(conn, userSesion.getIdUser(),tabla, ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			
			if (object.isEstadoValido()){	
				insertRevNucleosAbandonados(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
			}
			else{					
				if (object.isEstadoTemporal()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_TEMPORAL);					
					insertRevNucleosAbandonados(conn, "-1", ConstantesLocalGISEIEL.REVISION_TEMPORAL, object);
				}
				else if (object.isEstadoAutoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD);					
					insertRevNucleosAbandonados(conn, "-2", ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD, object);
				}
				else if (object.isEstadoPublicable()){
					eliminarVersionAnterior(conn,tabla,object,ConstantesLocalGISEIEL.REVISION_PUBLICABLE);	
					insertRevNucleosAbandonados(conn, versionActual, ConstantesLocalGISEIEL.REVISION_VALIDA, object);
				}
			}
			/*
			if (rs.next()) {
//				Insertar una nueva version en la tabla versionesAlfa
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_nucleo_aband", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_UPDATE);
				//Se actualiza la linea que hay
				updateRevNucleosAbandonados(conn, versionActual, revisionExpiradaNula, object);
			} else {
				beforeRequest(conn, userSesion.getIdUser(),"eiel_t_nucleo_aband", ConstantesLocalGISEIEL.OPERACION_VERSIONADO_INSERT);
			}
			insertRevNucleosAbandonados(conn, versionActual, "9999999999", object);
			*/
			

		} catch (Exception e) {
			throw e;
		} finally {
			safeClose(rs, ps, conn);
		}
	}

	


	/***************************************/
	/***************************************/
	/***************************************/	
	/**
	 * Inserta en la tabla eiel_t_abast_au
     * @param conn
     * @param version
     * @param revision
     * @param object
     * @throws Exception
     */
    private void insertRevAbastecimientoAutonomo(Connection conn, String version, String revision, AbastecimientoAutonomoEIEL object) throws Exception {
    	PreparedStatement ps = null;	
    	String sSQL = "insert into eiel_t_abast_au "
			+ "(clave, codprov, codmunic, codentidad, codpoblamiento, "
			+ "aau_vivien, aau_pob_re, aau_pob_es, aau_def_vi, aau_def_re,"
			+ " aau_def_es, aau_fecont, aau_fencon,aau_caudal, observ, "
			+ "fecha_revision, estado_revision,bloqueado, "+Const.REVISION_ACTUAL+", "+Const.REVISION_EXPIRADA+") "
			+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"+version +","+revision+")";
		
		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINENucleo());
		if (object.getViviendas() != null)
			ps.setInt(6, object.getViviendas().intValue());
		else
			ps.setInt(6, 0);
		if (object.getPoblacionResidente() != null)
			ps.setInt(7, object.getPoblacionResidente().intValue());
		else
			ps.setNull(7, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacional() != null)
			ps.setInt(8, object.getPoblacionEstacional().intValue());
		else
			ps.setNull(8, java.sql.Types.INTEGER);
		if (object.getViviendasDeficitarias() != null)
			ps.setInt(9, object.getViviendasDeficitarias().intValue());
		else
			ps.setNull(9, java.sql.Types.INTEGER);
		if (object.getPoblacionResidenteDef() != null)
			ps.setInt(10, object.getPoblacionResidenteDef().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacionalDef() != null)
			ps.setInt(11, object.getPoblacionEstacionalDef().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);
		if (object.getFuentesControladas() != null)
			ps.setInt(12, object.getFuentesControladas().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getFuentesNoControladas() != null)
			ps.setInt(13, object.getFuentesNoControladas().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);
		if (object.getFuentesNoControladas() != null)
			ps.setInt(13, object.getFuentesNoControladas().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);
		if (object.getSuficienciaCaudal() != null)
			ps.setString(14, object.getSuficienciaCaudal());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);
		
		if (object.getObservaciones() != null && !object.getObservaciones().equals("") )
			ps.setString(15, object.getObservaciones());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);
		
		if (object.getFechaRevision() != null)
			ps.setDate(16, object.getFechaRevision());
		else
			ps.setNull(16, java.sql.Types.DATE);
		
		if (object.getEstadoRevision() != null)
			ps.setInt(17, object.getEstadoRevision().intValue());
		else
			ps.setNull(17, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(18, object.getBloqueado());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		ps.execute();

		safeClose(null, ps, null);

		
    }    
    
    /**
     * Inserta en la tabla eiel_t_cabildo_consejo
     * @param conn
     * @param version
     * @param revision
     * @param object
     * @throws Exception
     */
    private void insertRevCabildoConsejo(Connection conn, String version, String revision, CabildoConsejoEIEL object) throws Exception {
    	PreparedStatement ps = null;	
	
		String sSQL = "insert into eiel_t_cabildo_consejo (codprov, cod_isla, denominacion, bloqueado, "+Const.REVISION_ACTUAL+", "+Const.REVISION_EXPIRADA+") "+
					"values (?,?,?,?,"+version +","+revision+")";
		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodIsla());
		if (object.getDenominacion() != null
				&& !object.getDenominacion().equals(""))
			ps.setString(3, object.getDenominacion());
		else
			ps.setNull(3, java.sql.Types.INTEGER);
		if (object.getBloqueado() != null
				&& !object.getBloqueado().equals(""))
			ps.setString(4, object.getBloqueado());
		else
			ps.setNull(4, java.sql.Types.INTEGER);

		ps.execute();
		safeClose(null, ps, null);
		
    }        
    /**
     * Inserta en la tabla eiel_t_abast_ca
     * @param conn
     * @param version
     * @param revision
     * @param object
     * @throws Exception
     */
    private void insertRevCaptaciones(Connection conn, String version, String revision, CaptacionesEIEL object) throws Exception {
    	PreparedStatement ps = null;		
		String sSQL = "insert into eiel_t_abast_ca (clave, codprov, codmunic, orden_ca, nombre, "
			+ "tipo, titular, gestor, sist_impulsion, estado, uso, proteccion, contador,"
			+ " observ, fecha_revision, estado_revision,fecha_inst, "
			+ "cuenca, n_expediente,n_inventario, cota,profundidad,"
			+ "max_consumo,bloqueado, "+Const.REVISION_ACTUAL+", "+Const.REVISION_EXPIRADA+") "
			+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"+version +","+revision+")";
		
		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(5, object.getNombre());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);
		
		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(6, object.getTipo());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(7, object.getTitularidad());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getGestion() != null && !object.getGestion().equals(""))
			ps.setString(8, object.getGestion());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getSistema() != null && !object.getSistema().equals(""))
			ps.setString(9, object.getSistema());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(10, object.getEstado());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getTipoUso() != null && !object.getTipoUso().equals(""))
			ps.setString(11, object.getTipoUso());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		if (object.getProteccion() != null
				&& !object.getProteccion().equals(""))
			ps.setString(12, object.getProteccion());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getContador() != null
				&& !object.getContador().equals(""))
			ps.setString(13, object.getContador());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);

		if (object.getObservaciones() != null && !object.getObservaciones().equals("") )
			ps.setString(14, object.getObservaciones());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);
		if (object.getFechaRevision() != null && !object.getFechaRevision().equals("") )
			ps.setDate(15, object.getFechaRevision());
		else
			ps.setNull(15, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(16, object.getEstadoRevision().intValue());
		else
			ps.setNull(16, java.sql.Types.INTEGER);

		if (object.getFechaInst() != null && !object.getFechaInst().equals("") )
			ps.setDate(17, object.getFechaInst());
		else
			ps.setNull(17, java.sql.Types.DATE);

		if (object.getCuenca() != null)
			ps.setString(18, object.getCuenca());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		if (object.getN_expediente() != null)
			ps.setString(19, object.getN_expediente());
		else
			ps.setNull(19, java.sql.Types.VARCHAR);

		if (object.getN_inventario() != null)
			ps.setString(20, object.getN_inventario());
		else
			ps.setNull(20, java.sql.Types.VARCHAR);

		if (object.getCota() != null)
			ps.setInt(21, object.getCota());
		else
			ps.setNull(21, java.sql.Types.INTEGER);

		if (object.getProfundidad() != null)
			ps.setInt(22, object.getProfundidad());
		else
			ps.setNull(22, java.sql.Types.INTEGER);

		if (object.getMax_consumo() != null)
			ps.setDouble(23, object.getMax_consumo());
		else
			ps.setNull(23, java.sql.Types.NUMERIC);

		if (object.getBloqueado() != null)
			ps.setString(24, object.getBloqueado());
		else
			ps.setNull(24, java.sql.Types.VARCHAR);

		ps.execute();
	
		safeClose(null, ps, null);

    }
     
    private void insertIntegEIELInventario(Connection conn, WorkflowEIEL object){
    	/* Antes de insertar comprobamos si ya existe una fila para ese elemento:
    	 * 
    	 * - Si existe:
    	 *  + Si titularidadmunicipal == "": Borramos la fila.
    	 *  + Si titularidadmunicipal != "": Actualizamos por si ha cambiado algo.
    	 * - Si no existe: Insertamos. 
    	 */
    	 
    	PreparedStatement ps = null;
    	ResultSet rs = null;
		String sSQL = "select * from eiel_inventario where union_clave_eiel = ? and vista_eiel = ? and id_municipio = ?";		
				
		try {
			ps = conn.prepareStatement(sSQL);

			ps.setString(1, object.getUnionClaveEIEL());
			ps.setString(2, object.getVistaEIEL());
			if (object.getIdMunicipio()!=null)
				ps.setInt(3, object.getIdMunicipio());
			else{
				String idMunicipio=object.getCodINEProvincia()+object.getCodINEMunicipio();
				ps.setInt(3, Integer.parseInt(idMunicipio,10));
			}
		
			rs = ps.executeQuery();
			// Existe una fila en eiel_inventario con esa clave:
			if (rs.next()) {
				// Si Titularidad Municipal != "" actualizamos por si ha cambiado algo
		    	if (object.getTitularidadMunicipal() != null){
			    	ps = null;
					sSQL = "update eiel_inventario set id_inventario=?, epig_inventario=?, titularidad_municipal=? where union_clave_eiel = ? and vista_eiel = ? and id_municipio = ?";
			
					ps = conn.prepareStatement(sSQL);
					ps.setInt(1, object.getIdBien());
					ps.setInt(2, object.getEpigInventario());
					ps.setString(3, object.getTitularidadMunicipal());
					ps.setString(4, object.getUnionClaveEIEL());
					ps.setString(5, object.getVistaEIEL());
					ps.setInt(6, object.getIdMunicipio());
				
					ps.execute();
		    	}
		    	else{ // Si Titularidad Municipal = "" borramos la fila, porque no se asocia con inventario
		    		ps = null;
					sSQL = "delete from eiel_inventario where union_clave_eiel = ? and vista_eiel = ? and id_municipio = ?";
			
					ps = conn.prepareStatement(sSQL);
					ps.setString(1, object.getUnionClaveEIEL());
					ps.setString(2, object.getVistaEIEL());
					ps.setInt(3, object.getIdMunicipio());
				
					ps.execute();
		    	}
			} 
			else{
				// No existe una fila en eiel_inventario, por lo que la insertamos:
				if (object.getTitularidadMunicipal() != null){
					ps = null;		
					sSQL = "insert into eiel_inventario (union_clave_eiel, vista_eiel, id_inventario, epig_inventario, id_municipio, titularidad_municipal) "
						+ "values (?,?,?,?,?,?)";		
							
					ps = conn.prepareStatement(sSQL);
					ps.setString(1, object.getUnionClaveEIEL());
					ps.setString(2, object.getVistaEIEL());
					ps.setInt(3, object.getIdBien());
					ps.setInt(4, object.getEpigInventario());
					ps.setInt(5, object.getIdMunicipio());
					ps.setString(6, object.getTitularidadMunicipal());
				
					ps.execute();
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			safeClose(rs, ps, null);
		}

    }
    
	/**
	 * Inserta en la tabla eiel_t_carreteras
	 * 
	 * @param conn
	 * @param version
	 * @param revision
	 * @param object
	 * @throws Exception
	 */

	private void insertRevCarreteras(Connection conn, String version,
			String revision, TramosCarreterasEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_carreteras (id,id_municipio,codprov, "
				+ "cod_carrt, clase_via, denominacion, titular_via, fecha_revision, observ,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") "
				+ "values (nextval('seq_eiel_t_carreteras'),?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setInt(1, object.getIdMunicipio());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodCarretera());
		if (object.getClaseVia() != null && !object.getClaseVia().equals(""))
			ps.setString(4, object.getClaseVia());
		else
			ps.setNull(4, java.sql.Types.VARCHAR);

		if (object.getDenominacion() != null
				&& !object.getDenominacion().equals(""))
			ps.setString(5, object.getDenominacion());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(6, object.getTitularidad());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getFechaActualizacion() != null)
			ps.setDate(7, object.getFechaActualizacion());
		else
			ps.setNull(7, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))
			ps.setString(8, object.getObservaciones());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(9, object.getBloqueado());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		ps.execute();
		object.setUnionClaveEIEL(object.getCodINEProvincia()+object.getCodCarretera());
		object.setVistaEIEL(ConstantesEIEL.VISTA_CARRETERAS);
		insertIntegEIELInventario(conn, object);
		
		safeClose(null, ps, null);

	}

	/**
	 * Inserta en la tabla eiel_t_cc
	 * 
	 * @param conn
	 * @param version
	 * @param revision
	 * @param object
	 * @throws Exception
	 */
	private void insertRevCasaConsistorial(Connection conn, String version,
			String revision, CasasConsistorialesEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_cc (clave, codprov, codmunic, orden_cc, codentidad, "
				+ "codpoblamiento, nombre, tipo, titular, tenencia, s_cubierta, s_aire, s_solar,"
				+ " estado,acceso_s_ruedas,obra_ejec, fecha_inst, observ, fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") "
				+ " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);
		if (object.getTipo() != null && object.getTipo() != "")
			ps.setString(8, object.getTipo());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);
		if (object.getTitular() != null && object.getTitular() != "")
			ps.setString(9, object.getTitular());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getTenencia() != null && object.getTenencia() != "")
			ps.setString(10, object.getTenencia());

		else
			ps.setNull(10, java.sql.Types.VARCHAR);
		if (object.getSupCubierta() != null)
			ps.setInt(11, object.getSupCubierta().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);
		if (object.getSupAire() != null)
			ps.setInt(12, object.getSupAire().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getSupSolar() != null)
			ps.setInt(13, object.getSupSolar().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);
		ps.setString(14, object.getEstado());

		if (object.getAcceso_s_ruedas() != null)
			ps.setString(15, object.getAcceso_s_ruedas());
		else
			ps.setNull(15, java.sql.Types.INTEGER);
		if (object.getObra_ejec() != null)
			ps.setString(16, object.getObra_ejec());
		else
			ps.setNull(16, java.sql.Types.INTEGER);

		if (object.getFechaInstalacion() != null)
			ps.setDate(17, object.getFechaInstalacion());
		else
			ps.setNull(17, java.sql.Types.DATE);
		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))
			ps.setString(18, object.getObservaciones());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null)
			ps.setDate(19, object.getFechaRevision());
		else
			ps.setNull(19, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null && !object.getEstadoRevision().equals(""))
			ps.setInt(20, object.getEstadoRevision().intValue());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(21, object.getBloqueado());
		else
			ps.setNull(21, java.sql.Types.INTEGER);
		
		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getCodOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_CASA_CONSISTORIAL);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevCementerios(Connection conn, String version,
			String revision, CementeriosEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_ce (clave, codprov, codmunic, codentidad, codpoblamiento, orden_ce, "
				+ "nombre, titular, distancia, acceso, capilla, deposito, ampliacion, saturacion, "
				+ "superficie , crematorio, acceso_s_ruedas, obra_ejec, fecha_inst, "
				+ "observ, fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrden());
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getTitular() != null && !object.getTitular().equals(""))
			ps.setString(8, object.getTitular());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getDistancia() != null)
			ps.setFloat(9, object.getDistancia().floatValue());
		else
			ps.setNull(9, java.sql.Types.FLOAT);

		if (object.getAcceso() != null && !object.getAcceso().equals(""))
			ps.setString(10, object.getAcceso());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getCapilla() != null && !object.getCapilla().equals(""))
			ps.setString(11, object.getCapilla());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		if (object.getDepositoCadaveres() != null
				&& !object.getDepositoCadaveres().equals(""))
			ps.setString(12, object.getDepositoCadaveres());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getAmpliacion() != null
				&& !object.getAmpliacion().equals(""))
			ps.setString(13, object.getAmpliacion());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);

		if (object.getSaturacion() != null
				&& !object.getSaturacion().equals(""))
			ps.setInt(14, object.getSaturacion().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);
		if (object.getSuperficie() != null
				&& !object.getSuperficie().equals(""))
			ps.setInt(15, object.getSuperficie().intValue());
		else
			ps.setNull(15, java.sql.Types.INTEGER);

		if (object.getCrematorio() != null
				&& !object.getCrematorio().equals(""))
			ps.setString(16, object.getCrematorio());
		else
			ps.setNull(16, java.sql.Types.INTEGER);

		if (object.getAcceso_s_ruedas() != null
				&& !object.getAcceso_s_ruedas().equals(""))
			ps.setString(17, object.getAcceso_s_ruedas());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);
		if (object.getObra_ejec() != null && !object.getObra_ejec().equals(""))
			ps.setString(18, object.getObra_ejec());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null)
			ps.setDate(19, object.getFechaInstalacion());
		else
			ps.setNull(19, java.sql.Types.DATE);

		if (object.getObservaciones() != null && !object.getObservaciones().equals(""))
			ps.setString(20, object.getObservaciones());
		else
			ps.setNull(20, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null)
			ps.setDate(21, object.getFechaRevision());
		else
			ps.setNull(21, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(22, object.getEstadoRevision().intValue());
		else
			ps.setNull(22, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(23, object.getBloqueado());
		else
			ps.setNull(23, java.sql.Types.INTEGER);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_CEMENTERIO);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevDepuradora1(Connection conn, String version,
			String revision, Depuradora1EIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t1_saneam_ed (clave, codprov, codmunic, orden_ed, trat_pr_1, "
				+ "trat_pr_2, trat_pr_3, trat_sc_1, trat_sc_2, trat_sc_3, trat_av_1, trat_av_2, trat_av_3,"
				+ " proc_cm_1, proc_cm_2, proc_cm_3, trat_ld_1, trat_ld_2, trat_ld_3, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") "
				+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		if (object.getTratPrimario1() != null
				&& !object.getTratPrimario1().equals(""))
			ps.setString(5, object.getTratPrimario1());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getTratPrimario2() != null
				&& !object.getTratPrimario2().equals(""))
			ps.setString(6, object.getTratPrimario2());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getTratPrimario3() != null
				&& !object.getTratPrimario3().equals(""))
			ps.setString(7, object.getTratPrimario3());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getTratSecundario1() != null
				&& !object.getTratSecundario1().equals(""))
			ps.setString(8, object.getTratSecundario1());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getTratSecundario2() != null
				&& !object.getTratSecundario2().equals(""))
			ps.setString(9, object.getTratSecundario2());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getTratSecundario3() != null
				&& !object.getTratSecundario3().equals(""))
			ps.setString(10, object.getTratSecundario3());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getTratAvanzado1() != null
				&& !object.getTratAvanzado1().equals(""))
			ps.setString(11, object.getTratAvanzado1());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		if (object.getTratAvanzado2() != null
				&& !object.getTratAvanzado2().equals(""))
			ps.setString(12, object.getTratAvanzado2());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getTratAvanzado3() != null
				&& !object.getTratAvanzado3().equals(""))
			ps.setString(13, object.getTratAvanzado3());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);

		if (object.getProcComplementario1() != null
				&& !object.getProcComplementario1().equals(""))
			ps.setString(14, object.getProcComplementario1());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getProcComplementario2() != null
				&& !object.getProcComplementario2().equals(""))
			ps.setString(15, object.getProcComplementario2());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getProcComplementario3() != null
				&& !object.getProcComplementario3().equals(""))
			ps.setString(16, object.getProcComplementario3());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getTratLodos1() != null
				&& !object.getTratLodos1().equals(""))
			ps.setString(17, object.getTratLodos1());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		if (object.getTratLodos2() != null
				&& !object.getTratLodos2().equals(""))
			ps.setString(18, object.getTratLodos2());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		if (object.getTratLodos3() != null
				&& !object.getTratLodos3().equals(""))
			ps.setString(19, object.getTratLodos3());
		else
			ps.setNull(19, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null)
			ps.setDate(20, object.getFechaRevision());
		else
			ps.setNull(20, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null && !object.getEstadoRevision().equals(""))
			ps.setInt(21, object.getEstadoRevision().intValue());
		else
			ps.setNull(21, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(22, object.getBloqueado());
		else
			ps.setNull(22, java.sql.Types.INTEGER);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_DEPURADORAS);
		insertIntegEIELInventario(conn, object);
		
		safeClose(null, ps, null);
	}

	private void insertRevDepuradora2(Connection conn, String version,
			String revision, Depuradora2EIEL object) throws Exception {
		PreparedStatement ps = null;
		String sSQL = "insert into eiel_t2_saneam_ed (clave, codprov, codmunic, orden_ed, titular, "
				+ "gestor, capacidad, problem_1, problem_2, problem_3, lodo_gest, lodo_vert, lodo_inci,"
				+ " lodo_con_agri, lodo_sin_agri, lodo_ot, fecha_inst, observ, fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") "
				+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		if (object.getTitular() != null && !object.getTitular().equals(""))
			ps.setString(5, object.getTitular());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getGestor() != null && !object.getGestor().equals(""))
			ps.setString(6, object.getGestor());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getCapacidad() != null)
			ps.setInt(7, Integer.valueOf(object.getCapacidad().intValue()));
		else
			ps.setNull(7, java.sql.Types.INTEGER);

		if (object.getProblemas1() != null
				&& !object.getProblemas1().equals(""))
			ps.setString(8, object.getProblemas1());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getProblemas2() != null
				&& !object.getProblemas2().equals(""))
			ps.setString(9, object.getProblemas2());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getProblemas3() != null
				&& !object.getProblemas3().equals(""))
			ps.setString(10, object.getProblemas3());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getGestionLodos() != null
				&& !object.getGestionLodos().equals(""))
			ps.setString(11, object.getGestionLodos());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		if (object.getLodosVertedero() != null)
			ps.setInt(12, object.getLodosVertedero().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getLodosIncineracion() != null)
			ps.setInt(13, object.getLodosIncineracion().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);
		if (object.getLodosAgrConCompostaje() != null)
			ps.setInt(14, object.getLodosAgrConCompostaje().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);
		if (object.getLodosAgrSinCompostaje() != null)
			ps.setInt(15, object.getLodosAgrSinCompostaje().intValue());
		else
			ps.setNull(15, java.sql.Types.INTEGER);
		if (object.getLodosOtroFinal() != null)
			ps.setInt(16, object.getLodosOtroFinal().intValue());
		else
			ps.setNull(16, java.sql.Types.INTEGER);
		if (object.getFechaInstalacion() != null)
			ps.setDate(17, object.getFechaInstalacion());
		else
			ps.setNull(17, java.sql.Types.DATE);
		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(18, object.getObservaciones());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);
		if (object.getFechaRevision() != null)
			ps.setDate(19, object.getFechaRevision());
		else
			ps.setNull(17, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(20, object.getEstadoRevision().intValue());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(21, object.getBloqueado());
		else
			ps.setNull(21, java.sql.Types.VARCHAR);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_DEPURADORAS);
		insertIntegEIELInventario(conn, object);
		
		safeClose(null, ps, null);

	}

	private void insertRevCentroEnsenianza(Connection conn, String version,
			String revision, CentrosEnsenianzaEIEL object) throws Exception {

		PreparedStatement ps = null;
		String sSQL = "insert into eiel_t_en (clave, codprov, codmunic, orden_en, codentidad, "
				+ "codpoblamiento, nombre, ambito, titular, s_cubierta, s_aire, s_solar,"
				+ " estado,acceso_s_ruedas, obra_ejec, fecha_inst, observ, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ")"
				+ " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version
				+ "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getAmbito() != null && object.getAmbito() != "")
			ps.setString(8, object.getAmbito());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getTitular() != null && object.getTitular() != "")
			ps.setString(9, object.getTitular());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getSupCubierta() != null)
			ps.setInt(10, object.getSupCubierta().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);
		if (object.getSupAire() != null)
			ps.setInt(11, object.getSupAire().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);
		if (object.getSupSolar() != null)
			ps.setInt(12, object.getSupSolar().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getEstado() != null && object.getEstado() != "")
			ps.setString(13, object.getEstado());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);

		if (object.getAcceso_s_ruedas() != null)
			ps.setString(14, object.getAcceso_s_ruedas());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getObra_ejec() != null)
			ps.setString(15, object.getObra_ejec());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null)
			ps.setDate(16, object.getFechaInstalacion());
		else
			ps.setNull(16, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(17, object.getObservaciones());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);
		if (object.getFechaRevision() != null)
			ps.setDate(18, object.getFechaRevision());
		else
			ps.setNull(18, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null && !object.getEstadoRevision().equals(""))
			ps.setInt(19, object.getEstadoRevision().intValue());
		else
			ps.setNull(19, java.sql.Types.INTEGER);
		if (object.getBloqueado() != null)
			ps.setString(20, object.getBloqueado());
		else
			ps.setNull(20, java.sql.Types.VARCHAR);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getCodOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_CENTRO_ENSENIANZA);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevCentroCultural(Connection conn, String version,
			String revision, CentrosCulturalesEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_cu (clave, codprov, codmunic, orden_cu, codentidad, "
				+ "codpoblamiento, nombre, tipo, titular, gestor, s_cubierta, s_aire, s_solar,"
				+ " estado, acceso_s_ruedas,obra_ejec,fecha_inst, observ, fecha_revision, estado_revision,bloqueado, inst_pertenece, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getTipo() != null && object.getTipo() != "")
			ps.setString(8, object.getTipo());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getTitular() != null && object.getTitular() != "")
			ps.setString(9, object.getTitular());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getGestor() != null && object.getGestor() != "")
			ps.setString(10, object.getGestor());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getSupCubierta() != null)
			ps.setInt(11, object.getSupCubierta().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);
		if (object.getSupAire() != null)
			ps.setInt(12, object.getSupAire().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getSupSolar() != null)
			ps.setInt(13, object.getSupSolar().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getEstado() != null && object.getEstado() != "")
			ps.setString(14, object.getEstado());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getAcceso_s_ruedas() != null
				&& object.getAcceso_s_ruedas() != "")
			ps.setString(15, object.getAcceso_s_ruedas());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);
		if (object.getObra_ejec() != null && object.getObra_ejec() != "")
			ps.setString(16, object.getObra_ejec());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null)
			ps.setDate(17, object.getFechaInstalacion());
		else
			ps.setNull(17, java.sql.Types.DATE);
		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))
			ps.setString(18, object.getObservaciones());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);
		if (object.getFechaRevision() != null)
			ps.setDate(19, object.getFechaRevision());
		else
			ps.setNull(19, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null)
			ps.setInt(20, object.getEstadoRevision().intValue());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(21, object.getBloqueado());
		else
			ps.setNull(21, java.sql.Types.INTEGER);
		
		if (object.getInstPertenece() != null
				&& !object.getInstPertenece().equals(""))
			ps.setString(22, object.getInstPertenece());
		else
			ps.setNull(22, java.sql.Types.VARCHAR);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getCodOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_CENTRO_CULTURAL);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevInstalacionDeportiva(Connection conn, String version,
			String revision, InstalacionesDeportivasEIEL object)
			throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_id (clave, codprov, codmunic, orden_id, codentidad, "
				+ "codpoblamiento, nombre, tipo, titular, gestor, s_cubierta, s_aire, s_solar,"
				+ " estado,acceso_s_ruedas,obra_ejec, fecha_inst, observ, fecha_revision, estado_revision,bloqueado, inst_pertenece, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrdenIdDeportes());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		
		if (object.getTipo() != null && object.getTipo() != "")
			ps.setString(8, object.getTipo());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);
		if (object.getTitular() != null && object.getTitular() != "")
			ps.setString(9, object.getTitular());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getGestor() != null && object.getGestor() != "")
			ps.setString(10, object.getGestor());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);
		if (object.getSupCubierta() != null)
			ps.setInt(11, object.getSupCubierta().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);
		if (object.getSupAire() != null)
			ps.setInt(12, object.getSupAire().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getSupSolar() != null)
			ps.setInt(13, object.getSupSolar().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);
		ps.setString(14, object.getEstado());

		if (object.getAcceso_s_ruedas() != null
				&& object.getAcceso_s_ruedas() != "")
			ps.setString(15, object.getAcceso_s_ruedas());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getObra_ejec() != null && object.getObra_ejec() != "")
			ps.setString(16, object.getObra_ejec());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null)
			ps.setDate(17, object.getFechaInstalacion());
		else
			ps.setNull(17, java.sql.Types.DATE);
		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(18, object.getObservaciones());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);
		if (object.getFechaRevision() != null)
			ps.setDate(19, object.getFechaRevision());
		else
			ps.setNull(19, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null)
			ps.setInt(20, object.getEstadoRevision().intValue());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(21, object.getBloqueado());
		else
			ps.setNull(21, java.sql.Types.VARCHAR);

		if (object.getInst_P() != null)
			ps.setString(22, object.getInst_P());
		else
			ps.setNull(22, java.sql.Types.VARCHAR);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getOrdenIdDeportes());
		object.setVistaEIEL(ConstantesEIEL.VISTA_INSTALACION_DEPORTIVA);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	// private void insertRevInstalacionDeportiva(Connection conn,
	// String version, String Actual2,
	// InstalacionesDeportivasEIEL object) throws Exception {
	//
	// PreparedStatement ps = null;
	// TODO Auto-generated method stub
	// String sSQL =
	// "delete from eiel_t_id_deportes where clave=? and codprov=? and codmunic=? and orden_id=? and codentidad=? and codpoblamiento=?";
	//
	// conn = CPoolDatabase.getConnection();
	// ps = conn.prepareStatement(sSQL);
	// ps.setString(1, object.getClave());
	// ps.setString(2, object.getCodINEProvincia());
	// ps.setString(3, object.getCodINEMunicipio());
	// ps.setString(4, object.getOrdenIdDeportes());
	// ps.setString(5, object.getCodINEEntidad());
	// ps.setString(6, object.getCodINEPoblamiento());
	// ps.execute();
	// conn.commit();
	//
	// String sSQL =
	// "insert into eiel_t_id_deportes (clave, codprov, codmunic, codentidad, codpoblamiento, orden_id, "
	// +
	// "tipo_deporte, fecha_inst, observ, fecha_revision, estado_revision,orden_id_deportes, "+Const.REVISION_ACTUAL+", "+Const.REVISION_EXPIRADA+") values (?,?,?,?,?,?,?,?,?,?,?,?)";
	//
	// ArrayList lstTipos = object.getListaTipos();
	// for (Iterator iterTipos = lstTipos.iterator(); iterTipos.hasNext();) {
	//
	// Object obj = iterTipos.next();
	//
	// if (obj instanceof TipoDeporte) {
	//
	// TipoDeporte tipo = (TipoDeporte) obj;
	//
	// ps = conn.prepareStatement(sSQL);
	// ps.setString(1, object.getClave());
	// ps.setString(2, object.getCodINEProvincia());
	// ps.setString(3, object.getCodINEMunicipio());
	// ps.setString(4, object.getCodINEEntidad());
	// ps.setString(5, object.getCodINEPoblamiento());
	// ps.setString(6, object.getOrdenIdDeportes());
	//
	// if (tipo.getTipo() != null && tipo.getTipo() !="")
	// ps.setString(7, tipo.getTipo());
	// else
	// ps.setNull(7, java.sql.Types.VARCHAR);
	//
	// if (tipo.getFechaInstalacion() != null)
	// ps.setDate(8, tipo.getFechaInstalacion());
	// else
	// ps.setNull(8, java.sql.Types.DATE);
	//
	// if (object.getObservaciones() != null &&
	// !object.getObservaciones().equals("") )
	//
	// ps.setString(9, object.getObservaciones());
	// else
	// ps.setNull(9, java.sql.Types.VARCHAR);
	//
	// if (object.getFechaRevision() != null)
	// ps.setDate(10, tipo.getFechaRevision());
	// else
	// ps.setNull(10, java.sql.Types.DATE);
	// if (object.getEstadoRevision() != null)
	// ps.setInt(11, tipo.getEstadoRevision().intValue());
	// else
	// ps.setNull(11, java.sql.Types.INTEGER);
	//
	// if (tipo.getOrden() != null)
	// ps.setString(12, tipo.getOrden());
	// else
	// ps.setNull(12, java.sql.Types.VARCHAR);
	//
	// ps.execute();
	// }
	// }
	//
	// ps.close();
	// }

	private void insertRevNucleosPoblacion(Connection conn, String version,
			String revision, NucleosPoblacionEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into "+eiel_c_nucleo_poblacion+" (id,id_municipio,codprov, codmunic, codentidad, "
				+ "codpoblamiento, nombre_oficial,fecha_revision, estado_revision, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (nextval('seq_eiel_c_nucleo_poblacion'),?,?,?,?,?,?,?,?," + version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		
		ps.setInt(1, Integer.valueOf(object.getCodINEProvincia()+object.getCodINEMunicipio()));
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		
		if (object.getNombreOficial()!=null)
			ps.setString(6, object.getNombreOficial());
		else
			ps.setString(6, "Diseminado");


		if (object.getFechaRevision() != null)
			ps.setDate(7, object.getFechaRevision());
		else
			ps.setNull(7, java.sql.Types.DATE);

		if (object.getEstadoActualizacion() != null)
			ps.setInt(8, object.getEstadoActualizacion().intValue());
		else
			ps.setNull(8, java.sql.Types.INTEGER);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevOtrosServMunicipales(Connection conn, String version,
			String revision, OtrosServMunicipalesEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_otros_serv_munic (codprov, codmunic, "
				+ "sw_inf_grl, sw_inf_tur, sw_gb_elec, ord_soterr, en_eolica, kw_eolica, en_solar, kw_solar, pl_mareo, kw_mareo, ot_energ, kw_ot_energ,cob_serv_tlf_m,tv_dig_cable, observ, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";
		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getSwInfGeneral());
		ps.setString(4, object.getSwInfTuristica());
		ps.setString(5, object.getSwGbElectronico());
		ps.setString(6, object.getOrdSoterramiento());
		ps.setString(7, object.getEnEolica());

		if (object.getKwEolica() != null)
			ps.setInt(8, object.getKwEolica().intValue());
		else
			ps.setNull(8, java.sql.Types.INTEGER);

		ps.setString(9, object.getEnSolar());

		if (object.getKwSolar() != null)
			ps.setInt(10, object.getKwSolar().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);

		ps.setString(11, object.getPlMareomotriz());

		if (object.getKwMareomotriz() != null)
			ps.setInt(12, object.getKwMareomotriz().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		ps.setString(13, object.getOtEnergias());

		if (object.getKwOtEnergias() != null)
			ps.setInt(14, object.getKwOtEnergias().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getCoberturaTlf() != null)
			ps.setString(15, object.getCoberturaTlf());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getTeleCable() != null)
			ps.setString(16, object.getTeleCable());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(17, object.getObservaciones());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null)
			ps.setDate(18, object.getFechaRevision());
		else
			ps.setNull(18, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(19, object.getEstadoRevision().intValue());
		else
			ps.setNull(19, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(20, object.getBloqueado());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevPadronNucleos(Connection conn, String version,
			String revision, PadronNucleosEIEL object) throws Exception {

		PreparedStatement ps = null;
		String sSQL = "insert into eiel_t_padron_nd (codprov, codmunic, codentidad, "
				+ "codpoblamiento, n_hombres_a1, n_mujeres_a1, total_poblacion_a1, n_hombres_a2, n_mujeres_a2, total_poblacion_a2, "
				+ "fecha_a1, fecha_a2, fecha_revision ,observ , estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version
				+ ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		if (object.getHombres_a1() != null)
			ps.setInt(5, object.getHombres_a1().intValue());
		else
			ps.setNull(5, java.sql.Types.INTEGER);

		if (object.getMujeres_a1() != null)
			ps.setInt(6, object.getMujeres_a1().intValue());
		else
			ps.setNull(6, java.sql.Types.INTEGER);

		if (object.getTotPobl_a1() != null)
			ps.setInt(7, object.getTotPobl_a1().intValue());
		else
			ps.setNull(7, java.sql.Types.INTEGER);

		if (object.getHombres_a2() != null)
			ps.setInt(8, object.getHombres_a2().intValue());
		else
			ps.setNull(8, java.sql.Types.INTEGER);

		if (object.getMujeres_a2() != null)
			ps.setInt(9, object.getMujeres_a2().intValue());
		else
			ps.setNull(9, java.sql.Types.INTEGER);

		if (object.getTotPobl_a2() != null)
			ps.setInt(10, object.getTotPobl_a2().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);

		if (object.getFecha_a1() != null)
			ps.setInt(11, object.getFecha_a1().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getFecha_a2() != null)
			ps.setInt(12, object.getFecha_a2().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getFechaRevision() != null)
			ps.setDate(13, object.getFechaRevision());
		else
			ps.setNull(13, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(14, object.getObservaciones());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getEstadoRevision() != null)
			ps.setInt(15, object.getEstadoRevision());
		else
			ps.setNull(15, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(16, object.getBloqueado());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevPadronMunicipios(Connection conn, String version,
			String revision, PadronMunicipiosEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into "+eiel_t_padron_ttmm+" (codprov, codmunic, "
				+ "n_hombres_a1, n_mujeres_a1, total_poblacion_a1, n_hombres_a2, n_mujeres_a2, total_poblacion_a2, "
				+ " fecha_revision,observ,fecha_a1, fecha_a2,estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL + ", " + Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?," + version + ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());

		if (object.getHombres_a1() != null)
			ps.setInt(3, object.getHombres_a1().intValue());
		else
			ps.setNull(3, java.sql.Types.INTEGER);

		if (object.getMujeres_a1() != null)
			ps.setInt(4, object.getMujeres_a1().intValue());
		else
			ps.setNull(4, java.sql.Types.INTEGER);

		if (object.getTotPobl_a1() != null)
			ps.setInt(5, object.getTotPobl_a1().intValue());
		else
			ps.setNull(5, java.sql.Types.INTEGER);

		if (object.getHombres_a2() != null)
			ps.setInt(6, object.getHombres_a2().intValue());
		else
			ps.setNull(6, java.sql.Types.INTEGER);

		if (object.getMujeres_a2() != null)
			ps.setInt(7, object.getMujeres_a2().intValue());
		else
			ps.setNull(7, java.sql.Types.INTEGER);

		if (object.getTotPobl_a2() != null)
			ps.setInt(8, object.getTotPobl_a2().intValue());
		else
			ps.setNull(8, java.sql.Types.INTEGER);

		if (object.getFechaActualizacion() != null)
			ps.setDate(9, object.getFechaActualizacion());
		else
			ps.setNull(9, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(10, object.getObservaciones());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getFecha_a1() != null)
			ps.setInt(11, object.getFecha_a1());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getFecha_a2() != null)
			ps.setInt(12, object.getFecha_a2());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getEstadoRevision() != null)
			ps.setInt(13, object.getEstadoRevision());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(14, object.getBloqueado());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevParquesJardines(Connection conn, String version,
			String revision, ParquesJardinesEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_pj (clave, codprov, codmunic, codentidad,codpoblamiento,orden_pj,  "
				+ " nombre, tipo, titular, gestor, s_cubierta, s_aire, s_solar,"
				+ " agua, saneamiento, electricidad, comedor, juegos_inf, otras, estado,acceso_s_ruedas,obra_ejec,observ, fecha_revision, estado_revision,bloqueado , "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getCodOrden());
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(8, object.getTipo());
		else
			ps.setInt(8, java.sql.Types.VARCHAR);
		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(9, object.getTitularidad());
		else
			ps.setInt(9, java.sql.Types.VARCHAR);

		if (object.getGestion() != null && !object.getGestion().equals(""))
			ps.setString(10, object.getGestion());
		else
			ps.setInt(10, java.sql.Types.VARCHAR);

		if (object.getSupCubierta() != null)
			ps.setInt(11, object.getSupCubierta().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);
		if (object.getSupLibre() != null)
			ps.setInt(12, object.getSupLibre().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getSupSolar() != null)
			ps.setInt(13, object.getSupSolar().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getAgua() != null && object.getAgua() != "")
			ps.setString(14, object.getAgua());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getSaneamiento() != null && object.getSaneamiento() != "")
			ps.setString(15, object.getSaneamiento());

		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getElectricidad() != null && object.getElectricidad() != "")
			ps.setString(16, object.getElectricidad());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getComedor() != null && object.getComedor() != "")
			ps.setString(17, object.getComedor());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		if (object.getJuegosInf() != null && object.getJuegosInf() != "")
			ps.setString(18, object.getJuegosInf());

		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		if (object.getOtros() != null && object.getOtros() != "")
			ps.setString(19, object.getOtros());

		else
			ps.setNull(19, java.sql.Types.VARCHAR);

		if (object.getEstado() != null && object.getEstado() != "")
			ps.setString(20, object.getEstado());
		else
			ps.setNull(20, java.sql.Types.VARCHAR);

		if (object.getAccesoSilla() != null && object.getAccesoSilla() != "")
			ps.setString(21, object.getAccesoSilla());
		else
			ps.setNull(21, java.sql.Types.VARCHAR);

		if (object.getObra_ejec() != null && object.getObra_ejec() != "")
			ps.setString(22, object.getObra_ejec());
		else
			ps.setNull(22, java.sql.Types.VARCHAR);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(23, object.getObservaciones());
		else
			ps.setNull(23, java.sql.Types.VARCHAR);
		if (object.getFechaRevision() != null)
			ps.setDate(24, object.getFechaRevision());
		else
			ps.setNull(24, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(25, object.getEstadoRevision().intValue());
		else
			ps.setNull(25, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(26, object.getBloqueado());
		else
			ps.setNull(26, java.sql.Types.VARCHAR);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getCodOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_PARQUES_JARDINES);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevPlaneamientoUrbano(Connection conn, String version,
			String revision, PlaneamientoUrbanoEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_planeam_urban (codprov, codmunic, "
				+ "tipo_urba, estado_tramit, denominacion, sup_muni, fecha_bo, s_urbano, s_urbanizable, s_no_urbanizable, s_no_urban_especial, observ,fecha_revision,  estado_revision,orden_plan,bloqueado, "
				+ Const.REVISION_ACTUAL + ", " + Const.REVISION_EXPIRADA + ") "
				+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?," + version + ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(3, object.getTipo());
		else
			ps.setNull(3, java.sql.Types.VARCHAR);

		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(4, object.getEstado());
		else
			ps.setNull(4, java.sql.Types.VARCHAR);

		ps.setString(5, object.getDenominacion());

		if (object.getSupMunicipal() != null)
			ps.setFloat(6, object.getSupMunicipal());
		else
			ps.setNull(6, java.sql.Types.INTEGER);

		if (object.getFechaPublicacion() != null)
			ps.setDate(7, object.getFechaPublicacion());
		else
			ps.setNull(7, java.sql.Types.DATE);

		if (object.getSupUrbano() != null)
			ps.setFloat(8, object.getSupUrbano());
		else
			ps.setNull(8, java.sql.Types.INTEGER);

		if (object.getSupUrbanizable() != null)
			ps.setFloat(9, object.getSupUrbanizable());
		else
			ps.setNull(9, java.sql.Types.INTEGER);

		if (object.getSupNoUrbanizable() != null)
			ps.setFloat(10, object.getSupNoUrbanizable());
		else
			ps.setNull(10, java.sql.Types.INTEGER);

		if (object.getSupNoUrbanizableEsp() != null)
			ps.setFloat(11, object.getSupNoUrbanizableEsp());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getFechaRevision() != null)
			ps.setDate(13, object.getFechaRevision());
		else
			ps.setNull(13, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(12, object.getObservaciones());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getEstadoRevision() != null)
			ps.setInt(14, object.getEstadoRevision().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getOrden() != null && !object.getOrden().equals(""))
			ps.setString(15, object.getOrden());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(16, object.getBloqueado());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevPoblamiento(Connection conn, String version,
			String revision, PoblamientoEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into "+eiel_t_poblamiento+" (codprov, codmunic, codentidad, "
				+ "codpoblamiento, observ, fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?," + version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		if (object.getFechaActualizacion() != null)
			ps.setDate(6, object.getFechaActualizacion());
		else
			ps.setNull(6, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(5, object.getObservaciones());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getEstadoRevision() != null)
			ps.setString(7, object.getEstadoRevision());
		else
			ps.setNull(7, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(8, object.getBloqueado());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevRecogidaBasuras(Connection conn, String version,
			String revision, RecogidaBasurasEIEL object) throws Exception {

		PreparedStatement ps = null;
		
		ResultSet rs = null;
		String caudalDesSql = "select padron, pob_estacional from "+eiel_t_nucl_encuest_1+" where codprov = '"+ object.getCodINEProvincia() +
			"' and codmunic = '" + object.getCodINEMunicipio() + "' and codentidad = '" + object.getCodINEEntidad() + 
			"' and codpoblamiento = '" +object.getCodINEPoblamiento()+ "'";
		
		ps = conn.prepareStatement(caudalDesSql);
		rs = ps.executeQuery();
		VersionEiel versionEiel;
		 //Cálculo del número de toneladas de recogida  
		while (rs.next()) {
			double prodBasura = 0;
			if (object.getTipo().equals("PL")){
				prodBasura =  (double)(((rs.getInt("padron") + rs.getInt("pob_estacional")) * 0.025) /2)*365/1000;
			}
			else if (object.getTipo().equals("PA")){
				prodBasura= (double)(((rs.getInt("padron") + rs.getInt("pob_estacional")) * 0.074) /2)*365/1000;
			}
			else if (object.getTipo().equals("VI")){
				prodBasura= (double)(((rs.getInt("padron") + rs.getInt("pob_estacional")) * 0.039) /2)*365/1000;
			}
			else if (object.getTipo().equals("RN")){
				//prodBasura = (double)(((rs.getInt("padron") + rs.getInt("pob_estacional") * 1.12) /2)*365/1000);
				prodBasura = (double)(((rs.getInt("padron") + rs.getInt("pob_estacional")) * 1.2) /2)*365/1000;
			}
			
			if (prodBasura > 0 && prodBasura < 1){
				object.setTonProducidas(new Float(1));
			}
			else{
				float tonProd = 0;
				tonProd = (float)Math.floor(prodBasura+ 0.5d);	
				object.setTonProducidas(tonProd);
			}
		}
		
		
		String sSQL = "insert into eiel_t_rb (clave, codprov, codmunic, codentidad, "
				+ "codpoblamiento, tipo, gestor, periodicidad, calidad, tm_res_urb, n_contenedores,"
				+ " observ,fecha_revision,  estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version
				+ ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		if (object.getTipo() != null && object.getTipo() != "")
			ps.setString(6, object.getTipo());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getGestion() != null && object.getGestion() != "")
			ps.setString(7, object.getGestion());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getPeriodicidad() != null && object.getPeriodicidad() != "")
			ps.setString(8, object.getPeriodicidad());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getCalidad() != null && object.getCalidad() != "")
			ps.setString(9, object.getCalidad());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getTonProducidas() != null)
			ps.setFloat(10, object.getTonProducidas());
		else
			ps.setNull(10, java.sql.Types.FLOAT);

		if (object.getNumContenedores() != null)
			ps.setInt(11, object.getNumContenedores().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getObservaciones() != null)
			ps.setString(12, object.getObservaciones());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getFecharevision() != null)
			ps.setDate(13, object.getFecharevision());
		else
			ps.setNull(13, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(14, object.getEstadoRevision().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(15, object.getBloqueado());
		else
			ps.setNull(15, java.sql.Types.INTEGER);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevCentrosSanitarios(Connection conn, String version,
			String revision, CentrosSanitariosEIEL object) throws Exception {

		PreparedStatement ps = null;
		String sSQL = "insert into eiel_t_sa (clave, codprov, codmunic, orden_sa, codentidad, "
				+ "codpoblamiento, nombre, tipo, titular, gestor, s_cubierta, s_aire, s_solar, uci, n_camas,"
				+ " estado,acceso_s_ruedas,obra_ejec, fecha_inst, observ, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);		
		
		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(8, object.getTipo());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(9, object.getTitularidad());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getGestion() != null && !object.getGestion().equals(""))
			ps.setString(10, object.getGestion());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getSupCubierta() != null
				&& !object.getSupCubierta().equals(""))
			ps.setInt(11, object.getSupCubierta().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getSupLibre() != null && !object.getSupLibre().equals(""))
			ps.setInt(12, object.getSupLibre().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getSupSolar() != null && !object.getSupSolar().equals(""))
			ps.setInt(13, object.getSupSolar().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getUci() != null && !object.getUci().equals(""))
			ps.setString(14, object.getUci());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getNumCamas() != null && !object.getNumCamas().equals(""))
			ps.setInt(15, object.getNumCamas().intValue());
		else
			ps.setNull(15, java.sql.Types.INTEGER);

		if (object.getEstado() != null
				&& !object.getEstado().equals(""))
			ps.setString(16, object.getEstado());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);
		
		

		if (object.getAcceso_s_ruedas() != null
				&& !object.getAcceso_s_ruedas().equals(""))
			ps.setString(17, object.getAcceso_s_ruedas());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		if (object.getObra_ejec() != null && !object.getObra_ejec().equals(""))
			ps.setString(18, object.getObra_ejec());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null
				&& !object.getFechaInstalacion().equals(""))
			ps.setDate(19, object.getFechaInstalacion());
		else
			ps.setNull(19, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(20, object.getObservaciones());
		else
			ps.setNull(20, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null
				&& !object.getFechaRevision().equals(""))
			ps.setDate(21, object.getFechaRevision());
		else
			ps.setNull(21, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(22, object.getEstadoRevision().intValue());
		else
			ps.setNull(22, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(23, object.getBloqueado());
		else
			ps.setNull(23, java.sql.Types.VARCHAR);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_CENTRO_SANITARIO);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevSaneamientoAutonomo(Connection conn, String version,
			String revision, SaneamientoAutonomoEIEL object) throws Exception {

		PreparedStatement ps = null;
		String sSQL = "insert into eiel_t_saneam_au (clave, codprov, codmunic, codentidad, "
				+ "codpoblamiento, tipo_sau, estado_sau, adecuacion_sau, sau_vivien, sau_pob_re, sau_pob_es, sau_vi_def, sau_pob_re_def, sau_pob_es_def, fecha_inst, observ, fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") "
				+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version
				+ "," + revision + ")";
		//
		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		if (object.getTipo() != null && object.getTipo() != "")
			ps.setString(6, object.getTipo());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getEstado() != null && object.getEstado() != "")
			ps.setString(7, object.getEstado());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getAdecuacion() != null && object.getAdecuacion() != "")
			ps.setString(8, object.getAdecuacion());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getViviendas() != null)
			ps.setInt(9, object.getViviendas().intValue());
		else
			ps.setNull(9, java.sql.Types.INTEGER);

		if (object.getPoblResidente() != null)
			ps.setInt(10, object.getPoblResidente().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);

		if (object.getPoblEstacional() != null)
			ps.setInt(11, object.getPoblEstacional().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getVivDeficitarias() != null)
			ps.setInt(12, object.getVivDeficitarias().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getPoblResDeficitaria() != null)
			ps.setInt(13, object.getPoblResDeficitaria().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getPoblEstDeficitaria() != null)
			ps.setInt(14, object.getPoblEstDeficitaria().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getFechaInstalacion() != null)
			ps.setDate(15, object.getFechaInstalacion());
		else
			ps.setNull(15, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(16, object.getObservaciones());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(17, object.getFechaRevision());
		else
			ps.setNull(17, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(18, object.getEstadoRevision().intValue());
		else
			ps.setNull(18, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(19, object.getBloqueado());
		else
			ps.setNull(19, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevServiciosSaneamiento(Connection conn, String version,
			String revision, ServiciosSaneamientoEIEL object) throws Exception {

		PreparedStatement ps = null;
		
		
		ResultSet rs = null;
		int caudalDes =0;
		String sqlPadronNucleo = "select padron from eiel_t_nucl_encuest_1 where codprov = '"+ object.getCodINEProvincia() +
				"' and codmunic = '" + object.getCodINEMunicipio() + "' and codentidad = '" + object.getCodINEEntidad() + 
				"' and codpoblamiento = '" +object.getCodINEPoblamiento()+ "' and revision_expirada=9999999999";
			
			/*String caudalDesSql = "select consumo_inv, consumo_verano from eiel_t_abast_serv where codprov = '"+ object.getCodINEProvincia() +
					"' and codmunic = '" + object.getCodINEMunicipio() + "' and codentidad = '" + object.getCodINEEntidad() + 
					"' and codpoblamiento = '" +object.getCodINEPoblamiento()+ "' and revision_expirada=9999999999";*/
		
		ps = conn.prepareStatement(sqlPadronNucleo);
		rs = ps.executeQuery();
		VersionEiel versionEiel;
		while (rs.next()) {
			//Si no existe servicio o casas conectadas, no puede haber caudal de desagüe.
			if (object.getCalidad().equals("NO") || (object.getVivConectadas() != null && object.getVivConectadas().intValue() == 0)) {
				object.setCaudalTotal(0);
			} else {
				/*
				Resumiendo, para el cálculo de desagüe desde el módulo de la EIEL, aplicaremos la expresión:
					eiel_t_saneam_serv. caudal_total := 365*250*1.25* eiel_t_nucl_encuest_1.padron/1000
					Incidencia 105
				*/
				int padronNucleo=rs.getInt("padron");
				
				caudalDes=(int) Math.ceil((365*250*1.25* padronNucleo)/1000);				
				object.setCaudalTotal(caudalDes);
			}
		}

		String sSQL = "insert into eiel_t_saneam_serv (" +
				"codprov, " +
				"codmunic, " +
				"codentidad, " +
				"codpoblamiento, " +
				"pozos_registro, " +
				"sumideros, " +
				"aliv_c_acum, " +
				"aliv_s_acum, " +
				"calidad_serv, " +
				"viviendas_s_conex, " +
				"viviendas_c_conex, " +
				"long_rs_deficit, " +
				"viviendas_def_conex, " +
				"pobl_res_def_afect, " +
				"pobl_est_def_afect, " +
				"caudal_total, " +
				"caudal_tratado, " +
				"c_reutilizado_urb, " +
				"c_reutilizado_rust, " +
				"c_reutilizado_ind, " +
				"observ, " +
				"fecha_revision, " +
				"estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());
		if (object.getPozos() != null && object.getPozos() != "")
			ps.setString(5, object.getPozos());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getSumideros() != null && object.getSumideros() != "")
			ps.setString(6, object.getSumideros());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getAlivAcumulacion() != null
				&& object.getAlivAcumulacion() != "")
			ps.setString(7, object.getAlivAcumulacion());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getAlivSinAcumulacion() != null
				&& object.getAlivSinAcumulacion() != "")
			ps.setString(8, object.getAlivSinAcumulacion());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getCalidad() != null && object.getCalidad() != "")
			ps.setString(9, object.getCalidad());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getVivNoConectadas() != null)
			ps.setInt(10, object.getVivNoConectadas().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);

		if (object.getVivConectadas() != null)
			ps.setInt(11, object.getVivConectadas().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getLongDeficitaria() != null)
			ps.setInt(12, object.getLongDeficitaria().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getVivDeficitarias() != null)
			ps.setInt(13, object.getVivDeficitarias().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getPoblResDeficitaria() != null)
			ps.setInt(14, object.getPoblResDeficitaria().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getPoblEstDeficitaria() != null)
			ps.setInt(15, object.getPoblEstDeficitaria().intValue());
		else
			ps.setNull(15, java.sql.Types.INTEGER);

		if (object.getCaudalTotal() != null)
			ps.setInt(16, object.getCaudalTotal().intValue());
		else
			ps.setNull(16, java.sql.Types.INTEGER);

		if (object.getcCaudalTratado() != null)
			ps.setInt(17, object.getcCaudalTratado().intValue());
		else
			ps.setNull(17, java.sql.Types.INTEGER);

		if (object.getCaudalUrbano() != null)
			ps.setInt(18, object.getCaudalUrbano().intValue());
		else
			ps.setNull(18, java.sql.Types.INTEGER);

		if (object.getCaudalRustico() != null)
			ps.setInt(19, object.getCaudalRustico().intValue());
		else
			ps.setNull(19, java.sql.Types.INTEGER);

		if (object.getCaudalIndustrial() != null)
			ps.setInt(20, object.getCaudalIndustrial().intValue());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(21, object.getObservaciones());
		else
			ps.setNull(21, java.sql.Types.VARCHAR);
		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(22, object.getFechaRevision());
		else
			ps.setNull(22, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(23, object.getEstadoRevision().intValue());
		else
			ps.setNull(23, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(24, object.getBloqueado());
		else
			ps.setNull(24, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(rs, ps, null);

	}

	private void insertRevServiciosRecogidaBasuras(Connection conn,
			String version, String revision, ServiciosRecogidaBasuraEIEL object)
			throws Exception {

		PreparedStatement ps = null;
		String sSQL = "insert into eiel_t_rb_serv (codprov, codmunic, codentidad, "
				+ "codpoblamiento, srb_viviendas_afec, srb_pob_res_afect, srb_pob_est_afect, serv_limp_calles, plantilla_serv_limp, observ, fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version
				+ ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		if (object.getVivSinServicio() != null)
			ps.setInt(5, object.getVivSinServicio().intValue());
		else
			ps.setNull(5, java.sql.Types.INTEGER);

		if (object.getPoblResSinServicio() != null)
			ps.setInt(6, object.getPoblResSinServicio().intValue());
		else
			ps.setNull(6, java.sql.Types.INTEGER);

		if (object.getPoblEstSinServicio() != null)
			ps.setInt(7, object.getPoblEstSinServicio().intValue());
		else
			ps.setNull(7, java.sql.Types.INTEGER);

		if (object.getServLimpCalles() != null
				&& object.getServLimpCalles() != "")
			ps.setString(8, object.getServLimpCalles());
		else
			ps.setNull(8, java.sql.Types.INTEGER);

		if (object.getPlantilla() != null)
			ps.setInt(9, object.getPlantilla().intValue());
		else
			ps.setNull(9, java.sql.Types.INTEGER);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(10, object.getObservaciones());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(11, object.getFechaRevision());
		else
			ps.setNull(11, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(12, object.getEstadoRevision().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(13, object.getBloqueado());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevEdificiosSinUso(Connection conn, String version,
			String revision, EdificiosSinUsoEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_su (clave, codprov, codmunic, orden_su, codentidad, "
				+ "codpoblamiento, nombre, titular, s_cubierta, s_aire, s_solar,"
				+ " estado, uso_anterior,acceso_s_ruedas,obra_ejec, observ, fecha_revision, estado_revision,bloqueado, inst_pertenece, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());		
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		if (object.getNombre() != null
				&& !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(8, object.getTitularidad());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getSupCubierta() != null
				&& !object.getSupCubierta().equals(""))
			ps.setInt(9, object.getSupCubierta().intValue());
		else
			ps.setNull(9, java.sql.Types.INTEGER);
		if (object.getSupLibre() != null && !object.getSupLibre().equals(""))
			ps.setInt(10, object.getSupLibre().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);
		if (object.getSupSolar() != null && !object.getSupSolar().equals(""))
			ps.setInt(11, object.getSupSolar().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(12, object.getEstado());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getUsoAnterior() != null
				&& !object.getUsoAnterior().equals(""))
			ps.setString(13, object.getUsoAnterior());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);

		if (object.getAcceso_s_ruedas() != null)
			ps.setString(14, object.getAcceso_s_ruedas());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getObra_ejec() != null)
			ps.setString(15, object.getObra_ejec());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(16, object.getObservaciones());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(17, object.getFechaRevision());
		else
			ps.setNull(17, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null)
			ps.setInt(18, object.getEstadoRevision().intValue());
		else
			ps.setNull(18, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(19, object.getBloqueado());
		else
			ps.setNull(19, java.sql.Types.INTEGER);

		ps.setString(20, object.getInst_pertenece());

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getCodOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_EDIFICIO_SIN_USO);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevTanatorios(Connection conn, String version,
			String revision, TanatoriosEIEL object) throws Exception {

		PreparedStatement ps = null;
		String sSQL = "insert into eiel_t_ta (clave, codprov, codmunic, orden_ta, codentidad, "
				+ "codpoblamiento, nombre, titular, gestor, s_cubierta, s_aire, s_solar, salas,"
				+ " estado,acceso_s_ruedas,obra_ejec, fecha_inst, observ, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		
		if (object.getNombre() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);
		

		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(8, object.getTitularidad());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getGestion() != null && !object.getGestion().equals(""))
			ps.setString(9, object.getGestion());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getSupCubierta() != null
				&& !object.getSupCubierta().equals(""))
			ps.setInt(10, object.getSupCubierta().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);
		if (object.getSupLibre() != null && !object.getSupLibre().equals(""))
			ps.setInt(11, object.getSupLibre().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);
		if (object.getSupSolar() != null && !object.getSupSolar().equals(""))
			ps.setInt(12, object.getSupSolar().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getSalas() != null && !object.getSalas().equals(""))
			ps.setInt(13, object.getSalas().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(14, object.getEstado());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getAcceso_s_ruedas() != null
				&& object.getAcceso_s_ruedas() != "")
			ps.setString(15, object.getAcceso_s_ruedas());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getObra_ejec() != null && object.getObra_ejec() != "")
			ps.setString(16, object.getObra_ejec());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null)
			ps.setDate(17, object.getFechaInstalacion());
		else
			ps.setNull(17, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(18, object.getObservaciones());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(19, object.getFechaRevision());
		else
			ps.setNull(19, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null)
			ps.setInt(20, object.getEstadoRevision().intValue());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(21, object.getBloqueado());
		else
			ps.setNull(21, java.sql.Types.INTEGER);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getCodOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_TANATORIO);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevVertederos(Connection conn, String version,
			String revision, VertederosEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_vt (clave, codprov, codmunic, orden_vt, "
				+ "tipo, titular, gestor, olores, humos, cont_anima, r_inun, filtracion, impacto_v, frec_averia, saturacion, inestable, otros, capac_tot, capac_tot_porc, capac_transf,"
				+ " estado, vida_util, categoria, actividad, fecha_apertura, obra_ejec,observ, capac_ampl, fecha_revision, estado_revision,bloqueado , "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(5, object.getTipo());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(6, object.getTitularidad());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getGestion() != null && !object.getGestion().equals(""))
			ps.setString(7, object.getGestion());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getOlores() != null && !object.getOlores().equals(""))
			ps.setString(8, object.getOlores());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getHumos() != null && !object.getHumos().equals(""))
			ps.setString(9, object.getHumos());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getContAnimal() != null && !object.getContAnimal().equals(""))
			ps.setString(10, object.getContAnimal());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getRsgoInundacion() != null && !object.getRsgoInundacion().equals(""))
			ps.setString(11, object.getRsgoInundacion());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);
		if (object.getFiltraciones() != null && !object.getFiltraciones().equals(""))
			ps.setString(12, object.getFiltraciones());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);
		if (object.getImptVisual() != null && !object.getImptVisual().equals(""))
			ps.setString(13, object.getImptVisual());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);
		if (object.getFrecAverias() != null && !object.getFrecAverias().equals(""))
			ps.setString(14, object.getFrecAverias());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);
		if (object.getSaturacion() != null && !object.getSaturacion().equals(""))
			ps.setString(15, object.getSaturacion());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);
		if (object.getInestabilidad() != null
				&& !object.getInestabilidad().equals(""))
			ps.setString(16, object.getInestabilidad());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);
		
		if (object.getOtros() != null && !object.getOtros().equals(""))
			ps.setString(17, object.getOtros());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		if (object.getCapTotal() != null&& !object.getCapTotal().equals(""))
			ps.setInt(18, object.getCapTotal());
		else
			ps.setNull(18, java.sql.Types.INTEGER);

		if (object.getCapOcupada() != null)
			ps.setInt(19, object.getCapOcupada());
		else
			ps.setNull(19, java.sql.Types.INTEGER);

		if (object.getCapTransform() != null)
			ps.setInt(20, object.getCapTransform());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(21, object.getEstado());
		else
			ps.setNull(21, java.sql.Types.VARCHAR);

		if (object.getVidaUtil() != null)
			ps.setInt(22, object.getVidaUtil());
		else
			ps.setNull(22, java.sql.Types.INTEGER);

		if (object.getCategoria() != null && !object.getCategoria().equals(""))
			ps.setString(23, object.getCategoria());
		else
			ps.setNull(23, java.sql.Types.VARCHAR);

		if (object.getActividad() != null && !object.getActividad().equals(""))
			ps.setString(24, object.getActividad());
		else
			ps.setNull(24, java.sql.Types.VARCHAR);

		if (object.getFechaApertura() != null)
			ps.setInt(25, object.getFechaApertura());
		else
			ps.setNull(25, java.sql.Types.NUMERIC);

		if (object.getObra_ejecutada() != null
				&& !object.getObra_ejecutada().equals(""))
			ps.setString(26, object.getObra_ejecutada());
		else
			ps.setNull(26, java.sql.Types.VARCHAR);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(27, object.getObservaciones());
		else
			ps.setNull(27, java.sql.Types.VARCHAR);

		if (object.getPosbAmpliacion() != null
				&& !object.getPosbAmpliacion().equals(""))
			ps.setString(28, object.getPosbAmpliacion());
		else
			ps.setNull(28, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(29, object.getFechaRevision());
		else
			ps.setNull(29, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(30, object.getEstadoRevision().intValue());
		else
			ps.setNull(30, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(31, object.getBloqueado());
		else
			ps.setNull(31, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);

	}

	private void insertRevDepositos(Connection conn, String version,
			String revision, DepositosEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_abast_de "
				+ "(clave, codprov, codmunic, orden_de, ubicacion, "
				+ "titular, gestor, capacidad, estado, proteccion, fecha_limpieza, "
				+ "contador, fecha_inst, observ, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL + ", " + Const.REVISION_EXPIRADA + ") "
				+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?," + version + ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrdenDeposito());
		if (object.getUbicacion() != null && !object.getUbicacion().equals(""))
			ps.setString(5, object.getUbicacion());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(6, object.getTitularidad());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getGestor() != null && !object.getGestor().equals(""))
			ps.setString(7, object.getGestor());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getCapacidad() != null)
			ps.setInt(8, object.getCapacidad().intValue());
		else
			ps.setNull(8, java.sql.Types.INTEGER);

		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(9, object.getEstado());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getProteccion() != null
				&& !object.getProteccion().equals(""))
			ps.setString(10, object.getProteccion());
		else
			ps.setNull(10, java.sql.Types.INTEGER);

		if (object.getFechaLimpieza() != null)
			ps.setString(11, object.getFechaLimpieza());
		else
			ps.setNull(11, java.sql.Types.DATE);

		if (object.getContador() != null && !object.getContador().equals(""))
			ps.setString(12, object.getContador());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null)
			ps.setDate(13, object.getFechaInstalacion());
		else
			ps.setNull(13, java.sql.Types.DATE);

		if (object.getObservaciones() != null)
			ps.setString(14, object.getObservaciones());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(15, object.getFechaRevision());
		else
			ps.setNull(15, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null)
			ps.setInt(16, object.getEstadoRevision().intValue());
		else
			ps.setNull(16, java.sql.Types.INTEGER);
		if (object.getBloqueado() != null)
			ps.setString(17, object.getBloqueado());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		ps.execute();
		
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getOrdenDeposito());
		object.setVistaEIEL(ConstantesEIEL.VISTA_DEPOSITOS);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevPuntosVertido(Connection conn, String version,
			String revision, PuntosVertidoEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_saneam_pv (clave, codprov, codmunic, orden_pv, "
				+ "tipo, zona, distancia_nucleo, fecha_ini_vertido, "
				+ "observ, fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version
				+ ","
				+ revision + ")";
		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrden());
		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(5, object.getTipo());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getZona() != null && !object.getZona().equals(""))
			ps.setString(6, object.getZona());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getDistanciaNucleo() != null)
			ps.setInt(7, object.getDistanciaNucleo().intValue());
		else
			ps.setNull(7, java.sql.Types.INTEGER);
		if (object.getFechaInicio() != null)
			ps.setDate(8, object.getFechaInicio());
		else
			ps.setNull(8, java.sql.Types.DATE);
		
		if (object.getObservaciones() != null && !object.getObservaciones().equals(""))
			ps.setString(9, object.getObservaciones());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);
		
		
		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(10, object.getFechaRevision());
		else
			ps.setNull(10, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null)
			ps.setInt(11, object.getEstadoRevision().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(12, object.getBloqueado());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevServiciosAbastecimientos(Connection conn,
			String version, String revision, ServiciosAbastecimientosEIEL object)
			throws Exception {

		PreparedStatement ps = null;
		ResultSet rs = null;
		int consumoInv =0;
		int consumoVer = 0;
		
		//En el caso de que venga sin valor generamos un consumo en base al padron en caso contrario 
		//cargamos el que viene
	//	if (object.getConsumoInvierno()==null || object.getConsumoInvierno()==0){
			String consumoInviernoSql = "select padron, pob_estacional from "+eiel_t_nucl_encuest_1+" where codprov = '"+ object.getCodINEProvincia() +
				"' and codmunic = '" + object.getCodINEMunicipio() + "' and codentidad = '" + object.getCodINEEntidad() + 
				"' and codpoblamiento = '" +object.getCodINEPoblamiento()+ "' and revision_expirada=9999999999";
			
			ps = conn.prepareStatement(consumoInviernoSql);
			rs = ps.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {
				//Si no existe servicio o casas conectadas, no puede haber consumos
				if (object.getCalidadServicio().equals("NO") || (object.getViviendasConectadas() != null && object.getViviendasConectadas().intValue() == 0)) {
					object.setConsumoInvierno(0);
					object.setConsumoVerano(0);
				} else {
					int padron=rs.getInt("padron");
					double consumI = (double)(padron *ConstantesLocalGISEIEL.MULTIPLO_CONSUMO_INVIERNO) /1000;
					if (consumI > 0 && consumI < 1)
						consumoInv = 1;
					else
						consumoInv = (int)Math.floor(consumI + 0.5d);
					
					int poblacion_estacional=rs.getInt("pob_estacional");
					double consumV = (double)(poblacion_estacional *ConstantesLocalGISEIEL.MULTIPLO_CONSUMO_VERANO) /1000;
					if (consumV > 0 && consumV < 1)
						consumoVer = 1;
					else
						consumoVer = (int)Math.floor(consumV+ 0.5d);	
					
					if(consumoVer ==consumoInv)
						consumoVer=consumoVer+1;
					
					object.setConsumoInvierno(consumoInv);
					object.setConsumoVerano(consumoVer);
				}
			}
	//	}
		
		
		String sSQL = "insert into eiel_t_abast_serv "
				+ "(codprov, " +
				"codmunic, " +
				"codentidad, " +
				"codpoblamiento, " +
				"viviendas_c_conex, " +
				"viviendas_s_conexion, " +
				"consumo_inv, " +
				"consumo_verano, " +
				"viv_exceso_pres, " +
				"viv_defic_presion, " +
				"perdidas_agua, " +
				"calidad_serv, " +
				"long_deficit, " +
				"viv_deficitarias, " +
				"pobl_res_afect, " +
				"pobl_est_afect, " +
				"observ, " +
				"fecha_revision, " +
				"estado_revision," +
				"bloqueado, "
				+ Const.REVISION_ACTUAL + ", " + Const.REVISION_EXPIRADA + ") "
				+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?," + version
				+ "," + revision + ")";
		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());
		if (object.getViviendasConectadas() != null
				&& !object.getViviendasConectadas().equals(""))
			ps.setInt(5, object.getViviendasConectadas().intValue());
		else
			ps.setNull(5, java.sql.Types.INTEGER);
		if (object.getViviendasNoConectadas() != null
				&& !object.getViviendasNoConectadas().equals(""))
			ps.setInt(6, object.getViviendasNoConectadas().intValue());
		else
			ps.setNull(6, java.sql.Types.INTEGER);
		if (object.getConsumoInvierno() != null
				&& !object.getConsumoInvierno().equals(""))
			ps.setInt(7, object.getConsumoInvierno().intValue());
		else
			ps.setNull(7, java.sql.Types.INTEGER);
		
		
		if (object.getConsumoVerano() != null
				&& !object.getConsumoVerano().equals(""))
			ps.setInt(8, object.getConsumoVerano().intValue());
		else
			ps.setNull(8, java.sql.Types.INTEGER);
		if (object.getViviendasExcesoPresion() != null
				&& !object.getViviendasExcesoPresion().equals(""))
			ps.setInt(9, object.getViviendasExcesoPresion().intValue());
		else
			ps.setNull(9, java.sql.Types.INTEGER);
		if (object.getViviendasDeficitPresion() != null
				&& !object.getViviendasDeficitPresion().equals(""))
			ps.setInt(10, object.getViviendasDeficitPresion().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);
		if (object.getPerdidasAgua() != null
				&& !object.getPerdidasAgua().equals(""))
			ps.setInt(11, object.getPerdidasAgua().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getCalidadServicio() != null
				&& !object.getCalidadServicio().equals(""))
			ps.setString(12, object.getCalidadServicio());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getLogitudDeficitaria() != null
				&& !object.getLogitudDeficitaria().equals(""))
			ps.setInt(13, object.getLogitudDeficitaria().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);
		if (object.getViviendasDeficitarias() != null
				&& !object.getViviendasDeficitarias().equals(""))
			ps.setInt(14, object.getViviendasDeficitarias().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);
		if (object.getPoblacionResidenteDeficitaria() != null
				&& !object.getPoblacionResidenteDeficitaria().equals(""))
			ps.setInt(15, object.getPoblacionResidenteDeficitaria().intValue());
		else
			ps.setNull(15, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacionalDeficitaria() != null
				&& !object.getPoblacionEstacionalDeficitaria().equals(""))
			ps.setInt(16, object.getPoblacionEstacionalDeficitaria().intValue());
		else
			ps.setNull(16, java.sql.Types.INTEGER);

		if (object.getObservaciones() != null && !object.getObservaciones().equals(""))
			ps.setString(17, object.getObservaciones());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(18, object.getFechaRevision());
		else
			ps.setNull(18, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(19, object.getEstadoRevision().intValue());
		else
			ps.setNull(19, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(20, object.getBloqueado());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevCentrosAsistenciales(Connection conn, String version,
			String revision, CentrosAsistencialesEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_as (clave, codprov, codmunic, codentidad, codpoblamiento, orden_as, "
				+ "nombre, tipo, titular, gestor, plazas, s_cubierta, s_aire, s_solar, estado,acceso_s_ruedas,obra_ejec, fecha_inst, "
				+ "observ, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrdenAsistencial());
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(8, object.getTipo());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(9, object.getTitularidad());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getGestion() != null && !object.getGestion().equals(""))
			ps.setString(10, object.getGestion());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getPlazas() != null && !object.getPlazas().equals(""))
			ps.setInt(11, object.getPlazas().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getSuperficieCubierta() != null
				&& !object.getSuperficieCubierta().equals(""))
			ps.setInt(12, object.getSuperficieCubierta().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getSuperficieAireLibre() != null
				&& !object.getSuperficieAireLibre().equals(""))
			ps.setInt(13, object.getSuperficieAireLibre().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getSuperficieSolar() != null
				&& !object.getSuperficieSolar().equals(""))
			ps.setInt(14, object.getSuperficieSolar().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(15, object.getEstado());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getAcceso_s_ruedas() != null
				&& !object.getAcceso_s_ruedas().equals(""))
			ps.setString(16, object.getAcceso_s_ruedas());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getObra_ejec() != null && !object.getObra_ejec().equals(""))
			ps.setString(17, object.getObra_ejec());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null && !object.getFechaInstalacion().equals(""))
			ps.setDate(18, object.getFechaInstalacion());
		else
			ps.setNull(18, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))
			ps.setString(19, object.getObservaciones());
		else
			ps.setNull(19, java.sql.Types.DATE);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(20, object.getFechaRevision());
		else
			ps.setNull(20, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(21, object.getEstadoRevision().intValue());
		else
			ps.setNull(21, java.sql.Types.INTEGER);
		
		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(22, object.getBloqueado());
		else
			ps.setNull(22, java.sql.Types.VARCHAR);
		
		ps.execute();
		
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getOrdenAsistencial());
		object.setVistaEIEL(ConstantesEIEL.VISTA_CENTRO_ASISTENCIAL);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevEntidadesSingulares(Connection conn, String version,
			String revision, EntidadesSingularesEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into "+eiel_t_entidad_singular+" (codprov, codmunic, codentidad, "
				+ "denominacion, observ, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?," + version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		if (object.getDenominacion() != null && !object.getDenominacion().equals(""))
			ps.setString(4, object.getDenominacion());
		else
			ps.setNull(4, java.sql.Types.VARCHAR);

		if (object.getObservaciones() != null && !object.getObservaciones().equals(""))
			ps.setString(5, object.getObservaciones());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(6, object.getFechaRevision());
		else
			ps.setNull(6, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null && !object.getEstadoRevision().equals(""))
			ps.setInt(7, object.getEstadoRevision().intValue());
		else
			ps.setNull(7, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(8, object.getBloqueado());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}
	
	private void insertRevEntidadesAgrupadas(Connection conn, String version,
			String revision, EntidadesAgrupadasEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into "+eiel_t_entidades_agrupadas+" (codmunicipio, codentidad, codnucleo, "
				+ "codentidad_agrupada, codnucleo_agrupado, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?," + version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEMunicipio());
		ps.setString(2, object.getCodEntidad());
		ps.setString(3, object.getCodNucleo());
		ps.setString(4, object.getCodEntidad_agrupada());
		ps.setString(5, object.getCodNucleo_agrupado());
		
		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(6, object.getBloqueado());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevInfoTerminosMunicipales(Connection conn,
			String version, String revision, NucleoEncuestado7EIEL object)
			throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_inf_ttmm (codprov, codmunic, codentidad, codpoblamiento, "
				+ "tv_ant, tv_ca, tm_gsm, tm_umts,tm_gprs, correo, ba_rd, ba_xd, ba_wi, ba_ca, "
				+ "ba_rb , ba_st, capi, electric, gas, alu_v_sin, alu_l_sin, "
				+ "observ, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());
		if (object.getTvAntena() != null && !object.getTvAntena().equals(""))
			ps.setString(5, object.getTvAntena());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getTvCable() != null && !object.getTvCable().equals(""))
			ps.setString(6, object.getTvCable());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getCalidadGSM() != null
				&& !object.getCalidadGSM().equals(""))
			ps.setString(7, object.getCalidadGSM());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getCalidadUMTS() != null
				&& !object.getCalidadUMTS().equals(""))
			ps.setString(8, object.getCalidadUMTS());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getCalidadGPRS() != null && !object.getTvAntena().equals(""))
			ps.setString(9, object.getCalidadGPRS());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getCorreos() != null && !object.getCorreos().equals(""))
			ps.setString(10, object.getCorreos());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getRdsi() != null && !object.getRdsi().equals(""))
			ps.setString(11, object.getRdsi());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		if (object.getAdsl() != null && !object.getRdsi().equals(""))
			ps.setString(12, object.getAdsl());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getWifi() != null && !object.getWifi().equals(""))
			ps.setString(13, object.getWifi());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);

		if (object.getInternetTV() != null
				&& !object.getInternetTV().equals(""))
			ps.setString(14, object.getInternetTV());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getInternetRed() != null
				&& !object.getInternetRed().equals(""))
			ps.setString(15, object.getInternetRed());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getInternetSatelite() != null
				&& !object.getInternetSatelite().equals(""))
			ps.setString(16, object.getInternetSatelite());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getInternetPublico() != null
				&& !object.getInternetPublico().equals(""))
			ps.setString(17, object.getInternetPublico());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		if (object.getCalidadElectricidad() != null
				&& !object.getCalidadElectricidad().equals(""))
			ps.setString(18, object.getCalidadElectricidad());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		if (object.getCalidadGas() != null
				&& !object.getCalidadGas().equals(""))
			ps.setString(19, object.getCalidadGas());
		else
			ps.setNull(19, java.sql.Types.VARCHAR);

		if (object.getViviendasDeficitariasAlumbrado() != null
				&& !object.getViviendasDeficitariasAlumbrado().equals(""))
			ps.setInt(20, object.getViviendasDeficitariasAlumbrado().intValue());
		else
			ps.setNull(20, java.sql.Types.VARCHAR);

		if (object.getLongitudDeficitariaAlumbrado() != null && !object.getLongitudDeficitariaAlumbrado().equals(""))
			ps.setInt(21, object.getLongitudDeficitariaAlumbrado().intValue());
		else
			ps.setNull(21, java.sql.Types.INTEGER);
		if (object.getObservaciones() != null && !object.getObservaciones().equals(""))
			ps.setString(22, object.getObservaciones());
		else
			ps.setNull(22, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(23, object.getFechaRevision());
		else
			ps.setNull(23, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(24, object.getEstadoRevision().intValue());
		else
			ps.setNull(24, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(25, object.getBloqueado());
		else
			ps.setNull(25, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevIncendiosProteccion(Connection conn, String version,
			String revision, IncendiosProteccionEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_ip (clave, codprov, codmunic, codentidad, codpoblamiento, orden_ip, "
				+ "nombre, tipo,titular, gestor, ambito, s_cubierta, s_aire, "
				+ "s_solar, plan_profe, plan_volun, estado, acceso_s_ruedas,obra_ejec, vehic_incendio, vehic_rescate, ambulancia, "
				+ "medios_aereos, otros_vehc, quitanieves, detec_ince, otros, "
				+ "fecha_inst, observ, fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, "
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrden());
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);


		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(8, object.getTipo());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getTitular() != null && !object.getTipo().equals(""))
			ps.setString(9, object.getTitular());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getGestor() != null && !object.getTipo().equals(""))
			ps.setString(10, object.getGestor());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getAmbito() != null && !object.getTipo().equals(""))
			ps.setString(11, object.getAmbito());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		
		if (object.getSuperficieCubierta() != null)
			ps.setInt(12, object.getSuperficieCubierta().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getSuperficieAireLibre() != null)
			ps.setInt(13, object.getSuperficieAireLibre().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);
		if (object.getSuperficieSolar() != null)
			ps.setInt(14, object.getSuperficieSolar().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);
		if (object.getPlantillaProfesionales() != null)
			ps.setInt(15, object.getPlantillaProfesionales().intValue());
		else
			ps.setNull(15, java.sql.Types.INTEGER);
		if (object.getPlantillaVoluntarios() != null)
			ps.setInt(16, object.getPlantillaVoluntarios().intValue());
		else
			ps.setNull(16, java.sql.Types.INTEGER);
		if (object.getEstado() != null && object.getEstado() != "")
			ps.setString(17, object.getEstado());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);
			
		if (object.getAcceso_s_ruedas() != null
				&& object.getAcceso_s_ruedas() != "")
			ps.setString(18, object.getAcceso_s_ruedas());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);
		if (object.getObra_ejec() != null && object.getObra_ejec() != "")
			ps.setString(19, object.getObra_ejec());
		else
			ps.setNull(19, java.sql.Types.VARCHAR);

		if (object.getVechiculosIncendios() != null && !object.getVechiculosIncendios().equals(""))
			ps.setInt(20, object.getVechiculosIncendios().intValue());
		else
			ps.setNull(20, java.sql.Types.INTEGER);
		if (object.getVechiculosRescate() != null && !object.getVechiculosRescate().equals(""))
			ps.setInt(21, object.getVechiculosRescate().intValue());
		else
			ps.setNull(21, java.sql.Types.INTEGER);
		if (object.getAmbulancias() != null)
			ps.setInt(22, object.getAmbulancias().intValue());
		else
			ps.setNull(22, java.sql.Types.INTEGER);
		if (object.getMediosAereos() != null && !object.getMediosAereos().equals(""))
			ps.setInt(23, object.getMediosAereos().intValue());
		else
			ps.setNull(23, java.sql.Types.INTEGER);
		if (object.getOtrosVehiculos() != null && !object.getOtrosVehiculos().equals(""))
			ps.setInt(24, object.getOtrosVehiculos().intValue());
		else
			ps.setNull(24, java.sql.Types.INTEGER);
		
		if (object.getQuitanieves() != null && !object.getQuitanieves().equals(""))
			ps.setInt(25, object.getQuitanieves().intValue());
		else
			ps.setNull(25, java.sql.Types.INTEGER);
		if (object.getSistemasDeteccionIncencios() != null && !object.getSistemasDeteccionIncencios().equals(""))
			ps.setInt(26, object.getSistemasDeteccionIncencios().intValue());
		else
			ps.setNull(26, java.sql.Types.INTEGER);
		if (object.getOtros() != null && !object.getOtros().equals(""))
			ps.setInt(27, object.getOtros().intValue());
		else
			ps.setNull(27, java.sql.Types.INTEGER);
		if (object.getFechaInstalacion() != null && !object.getFechaInstalacion().equals(""))
			ps.setDate(28, object.getFechaInstalacion());
		else
			ps.setNull(28, java.sql.Types.DATE);

		if (object.getObservaciones() != null && !object.getObservaciones().equals(""))
			ps.setString(29, object.getObservaciones());
		else
			ps.setNull(29, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(30, object.getFechaRevision());
		else
			ps.setNull(30, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null && !object.getEstadoRevision().equals(""))
			ps.setInt(31, object.getEstadoRevision().intValue());
		else
			ps.setNull(31, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(32, object.getBloqueado());
		else
			ps.setNull(32, java.sql.Types.INTEGER);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_INCENDIOS_PROTECCION);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevLonjasMercados(Connection conn, String version,
			String revision, LonjasMercadosEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_lm (clave, codprov, codmunic, codentidad, codpoblamiento, orden_lm, "
				+ "nombre, tipo, titular, gestor, s_cubierta, s_aire, s_solar, "
				+ "estado,acceso_s_ruedas,obra_ejec, fecha_inst, observ, fecha_revision, estado_revision,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrden());
		
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);
		
		
		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(8, object.getTipo());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getTitular() != null && !object.getTitular().equals(""))
			ps.setString(9, object.getTitular());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getGestion() != null && !object.getGestion().equals(""))
			ps.setString(10, object.getGestion());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getSuperficieCubierta() != null && !object.getSuperficieCubierta().equals(""))
			ps.setInt(11, object.getSuperficieCubierta().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (object.getSuperficieAireLibre() != null && !object.getSuperficieAireLibre().equals(""))
			ps.setInt(12, object.getSuperficieAireLibre().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getSuperficieSolar() != null && !object.getSuperficieSolar().equals(""))
			ps.setInt(13, object.getSuperficieSolar().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);
		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(14, object.getEstado());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getAcceso_s_ruedas() != null
				&& !object.getAcceso_s_ruedas().equals(""))
			ps.setString(15, object.getAcceso_s_ruedas());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getObra_ejec() != null && !object.getObra_ejec().equals(""))
			ps.setString(16, object.getObra_ejec());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null)
			ps.setDate(17, object.getFechaInstalacion());
		else
			ps.setNull(17, java.sql.Types.DATE);

		if (object.getObservaciones() != null)
			ps.setString(18, object.getObservaciones());
		else
			ps.setNull(18, java.sql.Types.DATE);

		if (object.getFechaRevision() != null && !object.getFechaRevision().equals(""))
			ps.setDate(19, object.getFechaRevision());
		else
			ps.setNull(19, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(20, object.getEstadoRevision().intValue());
		else
			ps.setNull(20, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null && !object.getBloqueado().equals(""))
			ps.setString(21, object.getBloqueado());
		else
			ps.setNull(21, java.sql.Types.INTEGER);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_LONJAS_MERCADOS);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevMataderos(Connection conn, String version,
			String revision, MataderosEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_mt (clave, codprov, codmunic, codentidad, codpoblamiento, orden_mt, "
				+ "nombre, clase,titular,  gestor, s_cubierta, s_aire, s_solar, estado, acceso_s_ruedas, obra_ejec, "
				+ "capacidad, utilizacion, tunel, bovino, ovino, porcino, otros, "
				+ "fecha_inst, observ, fecha_revision, estado_revision,bloqueado , "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrden());
		
		if (object.getNombre() != null && !object.getNombre().equals(""))
			ps.setString(7, object.getNombre());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);		
		

		if (object.getClase() != null && !object.getClase().equals(""))
			ps.setString(8, object.getClase());
		else
			ps.setNull(8, java.sql.Types.INTEGER);

		if (object.getTitular() != null && !object.getTitular().equals(""))
			ps.setString(9, object.getTitular());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getGestion() != null && !object.getGestion().equals(""))
			ps.setString(10, object.getGestion());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getSuperficieCubierta() != null)
			ps.setInt(11, object.getSuperficieCubierta().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);
		if (object.getSuperficieAireLibre() != null)
			ps.setInt(12, object.getSuperficieAireLibre().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getSuperficieSolar() != null)
			ps.setInt(13, object.getSuperficieSolar().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(14, object.getEstado());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getAcceso_s_ruedas() != null
				&& !object.getAcceso_s_ruedas().equals(""))
			ps.setString(15, object.getAcceso_s_ruedas());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getObra_ejec() != null && !object.getObra_ejec().equals(""))
			ps.setString(16, object.getObra_ejec());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getCapacidadMax() != null)
			ps.setInt(17, object.getCapacidadMax().intValue());
		else
			ps.setNull(17, java.sql.Types.INTEGER);
		if (object.getCapacidadUtilizada() != null)
			ps.setInt(18, object.getCapacidadUtilizada().intValue());
		else
			ps.setNull(18, java.sql.Types.INTEGER);

		if (object.getTunel() != null && !object.getTunel().equals(""))
			ps.setString(19, object.getTunel());
		else
			ps.setNull(19, java.sql.Types.VARCHAR);

		if (object.getBovino() != null && !object.getBovino().equals(""))
			ps.setString(20, object.getBovino());
		else
			ps.setNull(20, java.sql.Types.VARCHAR);

		if (object.getOvino() != null && !object.getOvino().equals(""))
			ps.setString(21, object.getOvino());
		else
			ps.setNull(21, java.sql.Types.VARCHAR);

		if (object.getPorcino() != null && !object.getPorcino().equals(""))
			ps.setString(22, object.getPorcino());
		else
			ps.setNull(22, java.sql.Types.VARCHAR);

		if (object.getOtros() != null && !object.getOtros().equals(""))
			ps.setString(23, object.getOtros());
		else
			ps.setNull(23, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null)
			ps.setDate(24, object.getFechaInstalacion());
		else
			ps.setNull(24, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))
			ps.setString(25, object.getObservaciones());
		else
			ps.setNull(25, java.sql.Types.INTEGER);

		if (object.getFechaRevision() != null)
			ps.setDate(26, object.getFechaRevision());
		else
			ps.setNull(26, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(27, object.getEstadoRevision().intValue());
		else
			ps.setNull(27, java.sql.Types.INTEGER);
		if (object.getBloqueado() != null)
			ps.setString(28, object.getBloqueado());
		else
			ps.setNull(28, java.sql.Types.INTEGER);

		ps.execute();
		object.setUnionClaveEIEL(object.getClave()+object.getCodINEProvincia()+object.getCodINEMunicipio()+object.getCodINEEntidad()+object.getCodINEPoblamiento()+object.getOrden());
		object.setVistaEIEL(ConstantesEIEL.VISTA_MATADEROS);
		insertIntegEIELInventario(conn, object);
		safeClose(null, ps, null);
	}

	private void insertRevTratamientosPotabilizacion(Connection conn,
			String version, String revision,
			TratamientosPotabilizacionEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_abast_tp (clave, codprov, codmunic, orden_tp, "
				+ "tipo, ubicacion, s_desinf, categoria_a1, categoria_a2, categoria_a3, desaladora, otros, "
				+ "desinf_1, desinf_2, desinf_3, periodicidad, organismo_control, estado, "
				+ "fecha_inst, fecha_revision, estado_revision, observ,bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrdenPotabilizadora());
		if (object.getTipo() != null && !object.getTipo().equals(""))
			ps.setString(5, object.getTipo());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);

		if (object.getUbicacion() != null && !object.getUbicacion().equals(""))
			ps.setString(6, object.getUbicacion());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getSoloDesinfeccion() != null
				&& !object.getSoloDesinfeccion().equals(""))
			ps.setString(7, object.getSoloDesinfeccion());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getCategoriaA1() != null
				&& !object.getCategoriaA1().equals(""))
			ps.setString(8, object.getCategoriaA1());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getCategoriaA2() != null
				&& !object.getCategoriaA2().equals(""))
			ps.setString(9, object.getCategoriaA2());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getCategoriaA3() != null
				&& !object.getCategoriaA3().equals(""))
			ps.setString(10, object.getCategoriaA3());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getDesaladora() != null
				&& !object.getDesaladora().equals(""))
			ps.setString(11, object.getDesaladora());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		if (object.getOtros() != null && !object.getOtros().equals(""))
			ps.setString(12, object.getOtros());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getMetodoDesinfeccion1() != null
				&& !object.getMetodoDesinfeccion1().equals(""))
			ps.setString(13, object.getMetodoDesinfeccion1());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);

		if (object.getMetodoDesinfeccion2() != null
				&& !object.getMetodoDesinfeccion2().equals(""))
			ps.setString(14, object.getMetodoDesinfeccion2());
		else
			ps.setNull(14, java.sql.Types.VARCHAR);

		if (object.getMetodoDesinfeccion3() != null
				&& !object.getMetodoDesinfeccion3().equals(""))
			ps.setString(15, object.getMetodoDesinfeccion3());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getPerioricidad() != null
				&& !object.getPerioricidad().equals(""))
			ps.setString(16, object.getPerioricidad());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getOrganismoControl() != null
				&& !object.getOrganismoControl().equals(""))
			ps.setString(17, object.getOrganismoControl());
		else
			ps.setNull(17, java.sql.Types.VARCHAR);

		if (object.getEstado() != null && !object.getEstado().equals(""))
			ps.setString(18, object.getEstado());
		else
			ps.setNull(18, java.sql.Types.VARCHAR);

		if (object.getFechaInstalacion() != null)
			ps.setDate(19, object.getFechaInstalacion());
		else
			ps.setNull(19, java.sql.Types.DATE);
		if (object.getFechaRevision() != null)
			ps.setDate(20, object.getFechaRevision());
		else
			ps.setNull(20, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null)
			ps.setInt(21, object.getEstadoRevision().intValue());
		else
			ps.setNull(21, java.sql.Types.INTEGER);

		if (object.getObserv() != null)
			ps.setString(22, object.getObserv());
		else
			ps.setNull(22, java.sql.Types.VARCHAR);

		if (object.getBloqueado() != null)
			ps.setString(23, object.getBloqueado());
		else
			ps.setNull(23, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevDiseminados(Connection conn, String version,
			String revision, DiseminadosEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_mun_diseminados (codprov, codmunic, "
				+ "padron_dis, pob_estaci, viv_total,  hoteles, casas_rural, longitud, aag_v_cone, aag_v_ncon, "
				+ "aag_c_invi, aag_c_vera, aag_v_expr, aag_v_depr, aag_l_defi, "
				+ "aag_v_defi, aag_pr_def, aag_pe_def, aau_pob_re, aau_pob_es, "
				+ "aau_def_vi, aau_def_re, aau_def_es, aau_fencon, longi_ramal, "
				+ "syd_v_cone, syd_v_ncon, syd_l_defi, syd_v_defi, syd_pr_def, "
				+ "syd_pe_def, syd_c_desa, syd_c_trat, sau_vivien, sau_pob_es, "
				+ "sau_vi_def, sau_pob_re_def, sau_pob_es_def, produ_basu, contenedores, "
				+ "rba_v_sser, rba_pr_sse, rba_pe_sse, rba_plalim, puntos_luz, "
				+ "alu_v_sin, alu_l_sin, aau_vivien, aau_fecont, sau_pob_re, "
				+ "fecha_revision, estado_revision, bloqueado , "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ""
				+ ") values (?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		/*********************************/
		if (object.getPadron() != null && !object.getPadron().equals(""))
			ps.setInt(3, object.getPadron().intValue());
		else
			ps.setNull(3, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacional() != null)
			ps.setInt(4, object.getPoblacionEstacional().intValue());
		else
			ps.setNull(4, java.sql.Types.INTEGER);

		if (object.getViviendasTotales() != null)
			ps.setInt(5, object.getViviendasTotales().intValue());
		else
			ps.setNull(5, java.sql.Types.INTEGER);
		if (object.getPlazasHoteleras() != null)
			ps.setInt(6, object.getPlazasHoteleras().intValue());
		else
			ps.setNull(6, java.sql.Types.INTEGER);
		if (object.getPlazasCasasRurales() != null)
			ps.setInt(7, object.getPlazasCasasRurales().intValue());
		else
			ps.setNull(7, java.sql.Types.INTEGER);
		if (object.getLongitudAbastecimiento() != null)
			ps.setInt(8, object.getLongitudAbastecimiento().intValue());
		else
			ps.setNull(8, java.sql.Types.INTEGER);
		if (object.getViviendasConAbastecimiento() != null)
			ps.setInt(9, object.getViviendasConAbastecimiento().intValue());
		else
			ps.setNull(9, java.sql.Types.INTEGER);
		if (object.getViviendasSinAbastecimiento() != null)
			ps.setInt(10, object.getViviendasSinAbastecimiento().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);
		if (object.getConsumoInvierno() != null)
			ps.setInt(11, object.getConsumoInvierno().intValue());
		else
			ps.setNull(11, java.sql.Types.INTEGER);
		if (object.getConsumoVerano() != null)
			ps.setInt(12, object.getConsumoVerano().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);
		if (object.getViviendasExcesoPresion() != null)
			ps.setInt(13, object.getViviendasExcesoPresion().intValue());
		else
			ps.setNull(13, java.sql.Types.INTEGER);
		if (object.getViviendasDefectoPresion() != null)
			ps.setInt(14, object.getViviendasDefectoPresion().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);
		if (object.getLongDeficitariaAbast() != null)
			ps.setInt(15, object.getLongDeficitariaAbast().intValue());
		else
			ps.setNull(15, java.sql.Types.INTEGER);
		if (object.getViviendasDeficitAbast() != null)
			ps.setInt(16, object.getViviendasDeficitAbast().intValue());
		else
			ps.setNull(16, java.sql.Types.INTEGER);
		if (object.getPoblacionResidenteDefAbast() != null)
			ps.setInt(17, object.getPoblacionResidenteDefAbast().intValue());
		else
			ps.setNull(17, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacionalDefAbast() != null)
			ps.setInt(18, object.getPoblacionEstacionalDefAbast().intValue());
		else
			ps.setNull(18, java.sql.Types.INTEGER);
		if (object.getPoblacionResidenteAbastAuto() != null)
			ps.setInt(19, object.getPoblacionResidenteAbastAuto().intValue());
		else
			ps.setNull(19, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacionalAbastAuto() != null)
			ps.setInt(20, object.getPoblacionEstacionalAbastAuto().intValue());
		else
			ps.setNull(20, java.sql.Types.INTEGER);
		if (object.getViviendasDefAbastAuto() != null)
			ps.setInt(21, object.getViviendasDefAbastAuto().intValue());
		else
			ps.setNull(21, java.sql.Types.INTEGER);
		if (object.getPoblacionResidenteDefAbastAuto() != null)
			ps.setInt(22, object.getPoblacionResidenteDefAbastAuto().intValue());
		else
			ps.setNull(22, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacionalDefAbastAuto() != null)
			ps.setInt(23, object.getPoblacionEstacionalDefAbastAuto()
					.intValue());
		else
			ps.setNull(23, java.sql.Types.INTEGER);
		if (object.getFuentesNoControladas() != null)
			ps.setInt(24, object.getFuentesNoControladas().intValue());
		else
			ps.setNull(24, java.sql.Types.INTEGER);
		if (object.getLongitudSaneamiento() != null)
			ps.setInt(25, object.getLongitudSaneamiento().intValue());
		else
			ps.setNull(25, java.sql.Types.INTEGER);
		if (object.getViviendasConSaneamiento() != null)
			ps.setInt(26, object.getViviendasConSaneamiento().intValue());
		else
			ps.setNull(26, java.sql.Types.INTEGER);
		if (object.getViviendasSinSaneamiento() != null)
			ps.setInt(27, object.getViviendasSinSaneamiento().intValue());
		else
			ps.setNull(27, java.sql.Types.INTEGER);
		if (object.getLongDeficitariaSaneam() != null)
			ps.setInt(28, object.getLongDeficitariaSaneam().intValue());
		else
			ps.setNull(28, java.sql.Types.INTEGER);
		if (object.getViviendasDefSaneam() != null)
			ps.setInt(29, object.getViviendasDefSaneam().intValue());
		else
			ps.setNull(29, java.sql.Types.INTEGER);
		if (object.getPoblacionResidenteDefSaneam() != null)
			ps.setInt(30, object.getPoblacionResidenteDefSaneam().intValue());
		else
			ps.setNull(30, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacionalDefSaneam() != null)
			ps.setInt(31, object.getPoblacionEstacionalDefSaneam().intValue());
		else
			ps.setNull(31, java.sql.Types.INTEGER);
		if (object.getCaudalDesaguado() != null)
			ps.setInt(32, object.getCaudalDesaguado().intValue());
		else
			ps.setNull(32, java.sql.Types.INTEGER);
		if (object.getCaudalTratado() != null)
			ps.setInt(33, object.getCaudalTratado().intValue());
		else
			ps.setNull(33, java.sql.Types.INTEGER);
		if (object.getViviendasSaneamientoAuto() != null)
			ps.setInt(34, object.getViviendasSaneamientoAuto().intValue());
		else
			ps.setNull(34, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacionalSaneamAuto() != null)
			ps.setInt(35, object.getPoblacionEstacionalSaneamAuto().intValue());
		else
			ps.setNull(35, java.sql.Types.INTEGER);
		if (object.getViviendasDeficitSaneamAuto() != null)
			ps.setInt(36, object.getViviendasDeficitSaneamAuto().intValue());
		else
			ps.setNull(36, java.sql.Types.INTEGER);
		if (object.getPoblacionResidenteDefSaneamAuto() != null)
			ps.setInt(37, object.getPoblacionResidenteDefSaneamAuto()
					.intValue());
		else
			ps.setNull(37, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacionalDefSaneamAuto() != null)
			ps.setInt(38, object.getPoblacionEstacionalDefSaneamAuto()
					.intValue());
		else
			ps.setNull(38, java.sql.Types.FLOAT);
		if (object.getTmBasura() != null)
			ps.setFloat(39, object.getTmBasura().floatValue());
		else
			ps.setNull(39, java.sql.Types.INTEGER);
		if (object.getContenedores() != null)
			ps.setInt(40, object.getContenedores().intValue());
		else
			ps.setNull(40, java.sql.Types.INTEGER);
		if (object.getViviendasSinBasura() != null)
			ps.setInt(41, object.getViviendasSinBasura().intValue());
		else
			ps.setNull(41, java.sql.Types.INTEGER);
		if (object.getPoblacionResidenteSinBasura() != null)
			ps.setInt(42, object.getPoblacionResidenteSinBasura().intValue());
		else
			ps.setNull(42, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacionalSinBasura() != null)
			ps.setInt(43, object.getPoblacionEstacionalSinBasura().intValue());
		else
			ps.setNull(43, java.sql.Types.INTEGER);
		if (object.getPlantillaLimpieza() != null)
			ps.setInt(44, object.getPlantillaLimpieza().intValue());
		else
			ps.setNull(44, java.sql.Types.INTEGER);
		if (object.getPuntosLuz() != null)
			ps.setInt(45, object.getPuntosLuz().intValue());
		else
			ps.setNull(45, java.sql.Types.INTEGER);
		if (object.getViviendasSinAlumbrado() != null)
			ps.setInt(46, object.getViviendasSinAlumbrado().intValue());
		else
			ps.setNull(46, java.sql.Types.INTEGER);
		if (object.getLongDeficitariaAlumbrado() != null)
			ps.setInt(47, object.getLongDeficitariaAlumbrado().intValue());
		else
			ps.setNull(47, java.sql.Types.INTEGER);
		if (object.getVivendasAbastecimientoAuto() != null)
			ps.setInt(48, object.getVivendasAbastecimientoAuto().intValue());
		else
			ps.setNull(48, java.sql.Types.INTEGER);
		if (object.getFuentesControladas() != null)
			ps.setInt(49, object.getFuentesControladas().intValue());
		else
			ps.setNull(49, java.sql.Types.INTEGER);
		if (object.getPoblacionResidenteSaneamAuto() != null)
			ps.setInt(50, object.getPoblacionResidenteSaneamAuto().intValue());
		else
			ps.setNull(50, java.sql.Types.INTEGER);
		if (object.getFecha() != null)
			ps.setDate(51, object.getFecha());
		else
			ps.setNull(51, java.sql.Types.DATE);
		if (object.getEstado() != null)
			ps.setInt(52, object.getEstado().intValue());
		else
			ps.setNull(52, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(53, object.getBloqueado());
		else
			ps.setNull(53, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevEncuestados1(Connection conn, String version,
			String revision, Encuestados1EIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into "+eiel_t_nucl_encuest_1+" ( codprov, codmunic, codentidad, codpoblamiento,"
				+ "padron, pob_estacional, altitud, viviendas_total, hoteles, casas_rural, accesibilidad, "
				+ "fecha_revision, observ, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,"
				+ version
				+ ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(4, object.getCodINEPoblamiento());
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		if (object.getPadron() != null)
			ps.setInt(5, object.getPadron().intValue());
		else
			ps.setNull(5, java.sql.Types.INTEGER);
		if (object.getPoblacionEstacional() != null)
			ps.setInt(6, object.getPoblacionEstacional().intValue());
		else
			ps.setNull(6, java.sql.Types.INTEGER);
		if (object.getAltitud() != null)
			ps.setInt(7, object.getAltitud().intValue());
		else
			ps.setNull(7, java.sql.Types.INTEGER);
		if (object.getViviendasTotales() != null)
			ps.setInt(8, object.getViviendasTotales().intValue());
		else
			ps.setNull(8, java.sql.Types.INTEGER);
		if (object.getPlazasHoteleras() != null)
			ps.setInt(9, object.getPlazasHoteleras().intValue());
		else
			ps.setNull(9, java.sql.Types.INTEGER);
		if (object.getPlazasCasasRurales() != null)
			ps.setInt(10, object.getPlazasCasasRurales().intValue());
		else
			ps.setNull(10, java.sql.Types.INTEGER);
		if (object.getAccesibilidad() != null
				&& !object.getAccesibilidad().equals(""))
			ps.setString(11, object.getAccesibilidad());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null)
			ps.setDate(12, object.getFechaRevision());
		else
			ps.setNull(12, java.sql.Types.DATE);

		if (object.getObservaciones() != null)
			ps.setString(13, object.getObservaciones());
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(14, object.getEstadoRevision().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(15, object.getBloqueado());
		else
			ps.setNull(15, java.sql.Types.INTEGER);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevEncuestados2(Connection conn, String version,
			String revision, Encuestados2EIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_nucl_encuest_2 (codpoblamiento, codprov, codmunic, codentidad, "
				+ "aag_caudal, aag_restri, aag_contad, aag_tasa, aag_instal, aag_hidran, aag_est_hi, "
				+ "aag_valvul, aag_est_va, aag_bocasr, aag_est_bo, cisterna, "
				+ "observ,fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,"
				+ version + "," + revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEPoblamiento());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		if (object.getDisponibilidadCaudal() != null
				&& !object.getDisponibilidadCaudal().equals(""))
			ps.setString(5, object.getDisponibilidadCaudal());
		else
			ps.setNull(5, java.sql.Types.VARCHAR);
		
		if (object.getRestriccionesAgua() != null
				&& !object.getRestriccionesAgua().equals(""))
			ps.setString(6, object.getRestriccionesAgua());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getContadores() != null
				&& !object.getContadores().equals(""))
			ps.setString(7, object.getContadores());
		else
			ps.setNull(7, java.sql.Types.INTEGER);

		if (object.getTasa() != null && !object.getTasa().equals(""))
			ps.setString(8, object.getTasa());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getAnnoInstalacion() != null
				&& !object.getAnnoInstalacion().equals(""))
			ps.setString(9, object.getAnnoInstalacion());
		else
			ps.setNull(9, java.sql.Types.INTEGER);

		if (object.getHidrantes() != null && !object.getHidrantes().equals(""))
			ps.setString(10, object.getHidrantes());
		else
			ps.setNull(10, java.sql.Types.INTEGER);

		if (object.getEstadoHidrantes() != null
				&& !object.getEstadoHidrantes().equals(""))
			ps.setString(11, object.getEstadoHidrantes());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		if (object.getValvulas() != null && !object.getValvulas().equals(""))
			ps.setString(12, object.getValvulas());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (object.getEstadoValvulas() != null
				&& !object.getEstadoValvulas().equals(""))
			ps.setString(13, object.getEstadoValvulas());
		else
			ps.setNull(13, java.sql.Types.VARCHAR);

		if (object.getBocasRiego() != null
				&& !object.getBocasRiego().equals(""))
			ps.setString(14, object.getBocasRiego());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getEstadoBocasRiego() != null
				&& !object.getEstadoBocasRiego().equals(""))
			ps.setString(15, object.getEstadoBocasRiego());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		if (object.getCisterna() != null && !object.getCisterna().equals(""))
			ps.setString(16, object.getCisterna());
		else
			ps.setNull(16, java.sql.Types.VARCHAR);

		if (object.getObservaciones() != null)
			ps.setString(17, object.getObservaciones());
		else
			ps.setNull(17, java.sql.Types.INTEGER);

		if (object.getFechaRevision() != null)
			ps.setDate(18, object.getFechaRevision());
		else
			ps.setNull(18, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(19, object.getEstadoRevision().intValue());
		else
			ps.setNull(19, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(20, object.getBloqueado());
		else
			ps.setNull(20, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}

	private void insertRevNucleosAbandonados(Connection conn, String version,
			String revision, NucleosAbandonadosEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_nucleo_aband (codpoblamiento, codprov, codmunic, codentidad, "
				+ "a_abandono, causa_abandono, titular_abandono, rehabilitacion, acceso, serv_agua, serv_elect, "
				+ " observ, fecha_revision, estado_revision, bloqueado, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,"
				+ version
				+ ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getCodINEPoblamiento());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getAnnoAbandono());
		if (object.getCausaAbandono() != null
				&& !object.getCausaAbandono().equals(""))
			ps.setString(6, object.getCausaAbandono());
		else
			ps.setNull(6, java.sql.Types.VARCHAR);

		if (object.getTitularidad() != null
				&& !object.getTitularidad().equals(""))
			ps.setString(7, object.getTitularidad());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (object.getRehabilitacion() != null
				&& !object.getRehabilitacion().equals(""))
			ps.setString(8, object.getRehabilitacion());
		else
			ps.setNull(8, java.sql.Types.VARCHAR);

		if (object.getAcceso() != null && !object.getAcceso().equals(""))
			ps.setString(9, object.getAcceso());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getServicioAgua() != null
				&& !object.getServicioAgua().equals(""))
			ps.setString(10, object.getServicioAgua());
		else
			ps.setNull(10, java.sql.Types.INTEGER);

		if (object.getServicioElectricidad() != null
				&& !object.getServicioElectricidad().equals(""))
			ps.setString(11, object.getServicioElectricidad());
		else
			ps.setNull(11, java.sql.Types.VARCHAR);

		if (object.getObservaciones() != null)
			ps.setString(12, object.getObservaciones());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null)
			ps.setDate(13, object.getFechaRevision());
		else
			ps.setNull(13, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null
				&& !object.getEstadoRevision().equals(""))
			ps.setInt(14, object.getEstadoRevision().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (object.getBloqueado() != null)
			ps.setString(15, object.getBloqueado());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		ps.execute();
		safeClose(null, ps, null);
	}
		
	
	private void insertRevUsosCentroCultural(Connection conn, String version,
			String revision, CentrosCulturalesEIEL object,
			UsosCentrosCulturales uso) throws Exception {

		PreparedStatement ps = null;
		// TODO: Comprobar que esto esta hecho bien
		String sSQL = "insert into eiel_t_cu_usos (clave, codprov, codmunic, orden_cu, codentidad, "
				+ "codpoblamiento, uso,s_cubierta, fecha_ini,observ, fecha_revision,estado_revision,orden_uso, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ " ) values (?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version
				+ ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		if (uso.getUso() != null && uso.getUso() != "")
			ps.setString(7, uso.getUso());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (uso.getSuperficieUso() != null) {
			ps.setInt(8, uso.getSuperficieUso().intValue());
		} else {
			ps.setNull(8, java.sql.Types.INTEGER);
		}

		if (uso.getFechaUso() != null)
			ps.setDate(9, uso.getFechaUso());
		else
			ps.setNull(9, java.sql.Types.DATE);

		if (uso.getObservacionesUso() != null
				&& !uso.getObservacionesUso().equals(""))

			ps.setString(10, uso.getObservacionesUso());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null)
			ps.setDate(11, object.getFechaRevision());
		else
			ps.setNull(11, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null)
			ps.setInt(12, object.getEstadoRevision().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		if (uso.getCodigoOrdenUso() != null
				&& !uso.getCodigoOrdenUso().equals(""))
			ps.setInt(13, Integer.valueOf(uso.getCodigoOrdenUso()));
		else
			ps.setNull(13, java.sql.Types.INTEGER);

		ps.execute();

		safeClose(null, ps, null);
	}
	
	private void insertRevUsosCasaConsistorial(Connection conn, String version,
			String revision, CasasConsistorialesEIEL object,
			UsosCasasConsistoriales uso) throws Exception {

		PreparedStatement ps = null;
		// TODO: Comprobar que esto esta hecho bien
		String sSQL = "insert into eiel_t_cc_usos (" + "clave, " + "codprov, "
				+ "codmunic, " + "orden_cc, " + "codentidad, "
				+ "codpoblamiento, " + "uso, " + "fecha_ini," + "s_cubierta, "
				+ "observ, " + "fecha_revision, " + "estado_revision, "
				+ "orden_uso,inst_pertenece, " + Const.REVISION_ACTUAL + ", "
				+ Const.REVISION_EXPIRADA
				+ " ) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?," + version + ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		if (uso.getUso() != null && uso.getUso() != "")
			ps.setString(7, uso.getUso());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (uso.getFechaUso() != null)
			ps.setDate(8, uso.getFechaUso());
		else
			ps.setNull(8, java.sql.Types.DATE);

		if (uso.getSuperficieUso() != null) {
			ps.setInt(9, uso.getSuperficieUso().intValue());
		} else {
			ps.setNull(9, java.sql.Types.INTEGER);
		}
		if (uso.getObservacionesUso() != null
				&& !uso.getObservacionesUso().equals(""))

			ps.setString(10, uso.getObservacionesUso());
		else
			ps.setNull(10, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null)
			ps.setDate(11, object.getFechaRevision());
		else
			ps.setNull(11, java.sql.Types.DATE);
		if (object.getEstadoRevision() != null)
			ps.setInt(12, object.getEstadoRevision().intValue());
		else
			ps.setNull(12, java.sql.Types.INTEGER);

		ps.setString(13, uso.getCodigoOrdenUso());

		ps.setString(14, uso.getInstPertenece());

		ps.execute();

		safeClose(null, ps, null);
	}
	
	private void insertRevDepInstalacionDeportiva(Connection conn,
			String version, String revision,
			InstalacionesDeportivasEIEL object, TipoDeporte tipo)
			throws Exception {

		PreparedStatement ps = null;

		String sSQL = "insert into eiel_t_id_deportes (clave, codprov, codmunic, codentidad, codpoblamiento, orden_id, "
				+ "tipo_deporte, fecha_inst, observ, fecha_revision, estado_revision,orden_id_deportes, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version
				+ ","
				+ revision + ")";

		ArrayList lstTipos = object.getListaTipos();

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrdenIdDeportes());
//		ps.setString(6, tipo.getOrden());

		if (tipo.getTipo() != null && tipo.getTipo() != "")
			ps.setString(7, tipo.getTipo());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);

		if (tipo.getFechaInstalacion() != null)
			ps.setDate(8, tipo.getFechaInstalacion());
		else
			ps.setNull(8, java.sql.Types.DATE);

		if (object.getObservaciones() != null
				&& !object.getObservaciones().equals(""))

			ps.setString(9, object.getObservaciones());
		else
			ps.setNull(9, java.sql.Types.VARCHAR);

		if (object.getFechaRevision() != null)
			ps.setDate(10, tipo.getFechaRevision());
		else
			ps.setNull(10, java.sql.Types.DATE);
		
		if (object.getEstadoRevision() != null)
			ps.setInt(11, object.getEstadoRevision());
		else
			ps.setNull(11, java.sql.Types.INTEGER);

		if (tipo.getOrden() != null)
			ps.setString(12, tipo.getOrden());
//		if (object.getOrdenIdDeportes() != null)
//			ps.setString(12, object.getOrdenIdDeportes());		
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		ps.execute();

		safeClose(null, ps, null);
	}
	
	private void insertRevNivelesCentroEnsenianza(Connection conn,
			String version, String revision, CentrosEnsenianzaEIEL object,
			NivelesCentrosEnsenianza nivel) throws Exception {

		PreparedStatement ps = null;
		// TODO: Comprobar que esto esta hecho bien
		String sSQL = "insert into eiel_t_en_nivel (" +
				"clave, " +
				"codprov, " +
				"codmunic, " +
				"codentidad, " +
				"codpoblamiento, " +
				"orden_en, " +
				"nivel, " +
				"unidades, " +
				"plazas, " +
				"alumnos," +
				"fecha_curso, " +
				"observ, " +
				"fecha_revision, " +
				"estado_revision, " +
				"orden_en_nivel, "
				+ Const.REVISION_ACTUAL
				+ ", "
				+ Const.REVISION_EXPIRADA
				+ ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
				+ version
				+ ","
				+ revision + ")";

		ps = conn.prepareStatement(sSQL);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getCodOrden());

		if (nivel.getNivel() != null && nivel.getNivel() != "")
			ps.setString(7, nivel.getNivel());
		else
			ps.setNull(7, java.sql.Types.VARCHAR);
		
		if (nivel.getUnidades() != null) {
			ps.setInt(8, nivel.getUnidades().intValue());
		} else
			ps.setNull(8, java.sql.Types.INTEGER);

		if (nivel.getNumeroPlazas() != null) {
			ps.setInt(9, nivel.getNumeroPlazas().intValue());
		} else
			ps.setNull(9, java.sql.Types.INTEGER);

		if (nivel.getNumeroAlumnos() != null) {
			ps.setInt(10, nivel.getNumeroAlumnos().intValue());
		} else
			ps.setNull(10, java.sql.Types.INTEGER);

		if (nivel.getFechaCurso() != null)
			ps.setDate(11, nivel.getFechaCurso());
		else
			ps.setNull(11, java.sql.Types.DATE);

		if (nivel.getObservacionesNivel() != null
				&& !nivel.getObservacionesNivel().equals(""))

			ps.setString(12, nivel.getObservacionesNivel());
		else
			ps.setNull(12, java.sql.Types.VARCHAR);

		
		if (object.getFechaRevision() != null)
			ps.setDate(13, object.getFechaRevision());
		else
			ps.setNull(13, java.sql.Types.DATE);

		if (object.getEstadoRevision() != null)
			ps.setInt(14, object.getEstadoRevision().intValue());
		else
			ps.setNull(14, java.sql.Types.INTEGER);

		if (nivel.getCodigoOrdenNivel() != null)
			ps.setString(15, nivel.getCodigoOrdenNivel());
		else
			ps.setNull(15, java.sql.Types.VARCHAR);

		ps.execute();

		safeClose(null, ps, null);
	}
	/***************************************/
	/***************************************/
	/***************************************/
    /**
     * Actualiza el registro de la tabla eiel_t_abast_au
     */  
    
	private void updateRevAbastecimientoAutonomo(Connection conn,
			String version, String revision, AbastecimientoAutonomoEIEL object)
			throws Exception {

		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_abast_au set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and "
				+ revision;
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINENucleo());

		ps.execute();
		safeClose(null, ps, null);

	}

	/**
	 * Actualiza el registro de la tabla eiel_t_cabildo_consejo
	 */

	private void updateRevCabildoConsejo(Connection conn, String version,
			String revision, CabildoConsejoEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_cabildo_consejo set revision_expirada="
				+ version + " where codprov=? and " + revision;

		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());

		ps.execute();
		safeClose(null, ps, null);

	}

	/**
	 * Actualiza el registro de la tabla eiel_t_abast_ca
	 */

	private void updateRevCaptaciones(Connection conn, String version,
			String revision, CaptacionesEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_abast_ca set revision_expirada="
				+ version
				+ " ,bloqueado=null where clave=? and codprov=? and codmunic=? and orden_ca=? and "
				+ revision;
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.execute();
		safeClose(null, ps, null);
	}

	/**
	 * Actuailza el registro de la tabla eiel_t_carreteras
	 */

	private void updateRevCarreteras(Connection conn, String version,
			String revision, TramosCarreterasEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_carreteras set revision_expirada="
				+ version + " where codprov=? and cod_carrt=? and " + revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodCarretera());

		ps.execute();
		safeClose(null, ps, null);
	}

	/**
	 * Actualiza el registro de la tabla eiel_t_abast_ca
	 */
	private void updateRevCasaConsistorial(Connection conn, String version,
			String revision, CasasConsistorialesEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_cc set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_cc=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}

	
	private void updateRevDepInstalacionDeportiva(Connection conn, String tipo,
			String version, String revision, InstalacionesDeportivasEIEL object)
			throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_id_deportes set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_id=? and codentidad=? and codpoblamiento=? and tipo_deporte =? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrdenIdDeportes());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		ps.setString(7, tipo);

		ps.execute();
		safeClose(null, ps, null);

	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_ce
     */
	private void updateRevCementerios(Connection conn, String version,
			String revision, CementeriosEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_ce set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ce=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrden());
		ps.execute();
		safeClose(null, ps, null);
	}

    /**
     * Actualiza el registro de la tabla eiel_t_cu
     */
	private void updateRevCentroCultural(Connection conn, String version,
			String revision, CentrosCulturalesEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_cu set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_cu=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}

    /**
     * Actualiza el registro de la tabla eiel_t_en
     */
	private void updateRevCentroEnsenianza(Connection conn, String version,
			String revision, CentrosEnsenianzaEIEL object) throws Exception {

		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_en set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_en=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}

    /**
     * Actualiza el registro de la tabla eiel_t_as
     */
	private void updateRevCentrosAsistenciales(Connection conn, String version,
			String revision, CentrosAsistencialesEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_as set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_as=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrdenAsistencial());

		ps.execute();
		safeClose(null, ps, null);

	}

    /**
     * Actualiza el registro de la tabla eiel_t_entidad_singular
     */
	private void updateRevEntidadesSingulares(Connection conn, String version,
			String revision, EntidadesSingularesEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update "+eiel_t_entidad_singular+" set revision_expirada="
				+ version
				+ " where codprov=? and codmunic=? and codentidad=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());

		ps.execute();
		safeClose(null, ps, null);
	}

	 /**
     * Actualiza el registro de la tabla eiel_t_entidades_agrupadas
     */
	private void updateRevEntidadesAgrupadas(Connection conn, String version,
			String revision, EntidadesAgrupadasEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update "+eiel_t_entidades_agrupadas+" set revision_expirada="
				+ version
				+ " where codmunicipio=? and codentidad=? and codnucleo=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEMunicipio());
		ps.setString(2, object.getCodEntidad());
		ps.setString(3, object.getCodNucleo());

		ps.execute();
		safeClose(null, ps, null);
	}
    /**
     * Actualiza el registro de la tabla eiel_t_inf_ttmm
     */
	private void updateRevInfoTerminosMunicipales(Connection conn,
			String version, String revision, NucleoEncuestado7EIEL object)
			throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_inf_ttmm set revision_expirada="
				+ version
				+ " where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}

    /**
     * Actualiza el registro de la tabla eiel_t_ip
     */
	private void updateRevIncendiosProteccion(Connection conn, String version,
			String revision, IncendiosProteccionEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_ip set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_ip=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrden());

		ps.execute();
		safeClose(null, ps, null);

	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_lm
     */
	private void updateRevLonjasMercados(Connection conn, String version,
			String revision, LonjasMercadosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_lm set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_lm=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrden());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_mt
     */
	private void updateRevMataderos(Connection conn, String version,
			String revision, MataderosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_mt set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and orden_mt=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getOrden());

		ps.execute();
		safeClose(null, ps, null);

	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_abast_tp
     */
	private void updateRevTratamientosPotabilizacion(Connection conn,
			String version, String revision,
			TratamientosPotabilizacionEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_abast_tp set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_tp=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrdenPotabilizadora());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_mun_diseminados
     */
	private void updateRevDiseminados(Connection conn, String version,
			String revision, DiseminadosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_mun_diseminados set revision_expirada="
				+ version + " where codprov=? and codmunic=? and " + revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());

		ps.execute();
		safeClose(null, ps, null);

	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_nucl_encuest_1
     */
	private void updateRevEncuestados1(Connection conn, String version,
			String revision, Encuestados1EIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update "+eiel_t_nucl_encuest_1+" set revision_expirada="
				+ version
				+ " where codpoblamiento=? and codprov=? and codmunic=? and codentidad=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEPoblamiento());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());

		//logger.debug("SQL Ejecutando updateRevEncuestados1 "+((org.enhydra.jdbc.standard.StandardXAPreparedStatement)ps).ps.toString());
		
		ps.execute();
		safeClose(null, ps, null);

	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_nucl_encuest_2
     */
	private void updateRevEncuestados2(Connection conn, String version,
			String revision, Encuestados2EIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_nucl_encuest_2 set revision_expirada="
				+ version
				+ " where codpoblamiento=? and codprov=? and codmunic=? and codentidad=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEPoblamiento());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());

		ps.execute();
		ps.close();
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_nucleo_aband
     */
	private void updateRevNucleosAbandonados(Connection conn, String version,
			String revision, NucleosAbandonadosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_nucleo_aband set revision_expirada="
				+ version
				+ " where codpoblamiento=? and codprov=? and codmunic=? and codentidad=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEPoblamiento());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t1_saneam_ed
     */
	private void updateRevDepuradora1(Connection conn, String version,
			String revision, Depuradora1EIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t1_saneam_ed set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_ed=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t2_saneam_ed
     */
	private void updateRevDepuradora2(Connection conn, String version,
			String revision, Depuradora2EIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t2_saneam_ed set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_ed=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_id
     */
	private void updateRevInstalacionDeportiva(Connection conn, String version,
			String revision, InstalacionesDeportivasEIEL object)
			throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_id set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_id=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrdenIdDeportes());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_c_nucleo_poblacion
     */
	private void updateRevNucleosPoblacion(Connection conn, String version,
			String revision, NucleosPoblacionEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update "+eiel_c_nucleo_poblacion +" set revision_expirada="
				+ version
				+ " where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_otros_serv_munic
     */
	private void updateRevOtrosServMunicipales(Connection conn, String version,
			String revision, OtrosServMunicipalesEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_otros_serv_munic set revision_expirada="
				+ version + " where codprov=? and codmunic=? and " + revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_padron_nd
     */
	private void updateRevPadronNucleos(Connection conn, String version,
			String revision, PadronNucleosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_padron_nd set revision_expirada="
				+ version
				+ " where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_padron_ttmm
     */
	private void updateRevPadronMunicipios(Connection conn, String version,
			String revision, PadronMunicipiosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update "+eiel_t_padron_ttmm+" set revision_expirada="
				+ version + " where codprov=? and codmunic=? and " + revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_pj
     */
	private void updateRevParquesJardines(Connection conn, String version,
			String revision, ParquesJardinesEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_pj set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_pj=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_planeam_urban
     */
	private void updateRevPlaneamientoUrbano(Connection conn, String version,
			String revision, PlaneamientoUrbanoEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_planeam_urban set revision_expirada="
				+ version
				+ " where codprov=? and codmunic=? and orden_plan=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getOrden());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_poblamiento
     */
	private void updateRevPoblamiento(Connection conn, String version,
			String revision, PoblamientoEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update "+eiel_t_poblamiento+" set revision_expirada="
				+ version
				+ " where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_rb
     */
	private void updateRevRecogidaBasuras(Connection conn, String version,
			String revision, RecogidaBasurasEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_rb set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and tipo=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());
		ps.setString(6, object.getTipo());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_sa
     */
	private void updateRevCentrosSanitarios(Connection conn, String version,
			String revision, CentrosSanitariosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_sa set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_sa=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_saneam_au
     */
	private void updateRevSaneamientoAutonomo(Connection conn, String version,
			String revision, SaneamientoAutonomoEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_saneam_au set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodINEEntidad());
		ps.setString(5, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_saneam_serv
     */
	private void updateRevServiciosSaneamiento(Connection conn, String version,
			String revision, ServiciosSaneamientoEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_saneam_serv set revision_expirada="
				+ version
				+ " where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_srb
     */
	private void updateRevServiciosRecogidaBasuras(Connection conn,
			String version, String revision, ServiciosRecogidaBasuraEIEL object)
			throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_rb_serv set revision_expirada="
				+ version
				+ " where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_su
     */
	private void updateRevEdificiosSinUso(Connection conn, String version,
			String revision, EdificiosSinUsoEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_su set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_su=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_ta
     */
	private void updateRevTanatorios(Connection conn, String version,
			String revision, TanatoriosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_ta set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_ta=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_vt
     */
	private void updateRevVertederos(Connection conn, String version,
			String revision, VertederosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_vt set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_vt=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_abast_de
     */
	private void updateRevDepositos(Connection conn, String version,
			String revision, DepositosEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_abast_de set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_de=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrdenDeposito());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_saneam_pv
     */
	private void updateRevPuntosVertido(Connection conn, String version,
			String revision, PuntosVertidoEIEL object) throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_saneam_pv set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_pv=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getOrden());

		ps.execute();
		safeClose(null, ps, null);
	}
	
    /**
     * Actualiza el registro de la tabla eiel_t_abast_serv
     */
	private void updateRevServiciosAbastecimientos(Connection conn,
			String version, String revision, ServiciosAbastecimientosEIEL object)
			throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_abast_serv set revision_expirada="
				+ version
				+ " where codprov=? and codmunic=? and codentidad=? and codpoblamiento=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getCodINEProvincia());
		ps.setString(2, object.getCodINEMunicipio());
		ps.setString(3, object.getCodINEEntidad());
		ps.setString(4, object.getCodINEPoblamiento());

		ps.execute();
		safeClose(null, ps, null);
	}

	private void updateRevUsosCentroCultural(Connection conn,String uso, String version, String revision , CentrosCulturalesEIEL object) throws Exception {

		PreparedStatement ps = null;
		String sSQLUpdate = "update eiel_t_cu_usos set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_cu=? and codentidad=? and codpoblamiento=? and uso=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		ps.setString(7, uso);

		ps.execute();
		safeClose(null, ps, null);
	}
	
	private void updateRevNivelesCentroEnsenianza(Connection conn, String nivel,
			String version, String revision, CentrosEnsenianzaEIEL object)
			throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_en_nivel set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_en=? and codentidad=? and codpoblamiento=? and nivel=? and "
				+ revision;

		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		ps.setString(7, nivel);
		ps.execute();
		safeClose(null, ps, null);
	}
	
	private void updateRevUsosCasaConsistorial(Connection conn,String uso, String version, String revision,CasasConsistorialesEIEL object)
			throws Exception {
		PreparedStatement ps = null;

		String sSQLUpdate = "update eiel_t_cc_usos set revision_expirada="
				+ version
				+ " where clave=? and codprov=? and codmunic=? and orden_cc=? and codentidad=? and codpoblamiento=? and uso=? and "
				+ revision;


		//conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		ps.setString(1, object.getClave());
		ps.setString(2, object.getCodINEProvincia());
		ps.setString(3, object.getCodINEMunicipio());
		ps.setString(4, object.getCodOrden());
		ps.setString(5, object.getCodINEEntidad());
		ps.setString(6, object.getCodINEPoblamiento());
		ps.setString(7, uso);
		ps.execute();
		conn.commit();
		safeClose(null, ps, null);

	}
	
    /***************************************/
    
   

	public void getUsuariosEntidad(ObjectOutputStream oos, String idEntidad,String idEntidadOriginal) throws Exception {
		Connection connection = null;

		try {
			ArrayList<Usuario> lstDatos = getusuariosEnt(idEntidad,idEntidadOriginal);
			oos.writeObject(lstDatos);

		} catch (Exception e) {
			logger.error("getLstElementos: " + e.getMessage());
			oos.writeObject(new ACException(e));
			throw e;
		}
		
	}

	private ArrayList<Usuario> getusuariosEnt(String idEntidad,String idEntidadOriginal) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			String sql = "select id, name, nombrecompleto from iuseruserhdr where id_entidad = '"+idEntidad+"'";
			if ((idEntidad!=null) && idEntidadOriginal!=null){
				if (!idEntidad.equals(idEntidadOriginal)){
					sql= "select id, name, nombrecompleto from iuseruserhdr where id_entidad = '"+idEntidad+"' or id_entidad='"+idEntidadOriginal+"'";
				}
			}
		

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();
			VersionEiel versionEiel;
			while (rs.next()) {

				Usuario user= new Usuario ();

				user.setId(rs.getString("id"));
				user.setName(rs.getString("name"));
				user.setNombreCompleto(rs.getString("nombrecompleto"));
				
				
				lstDatos.add(user);

			}

		} catch (Exception ex) {

			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);

		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
	}
	
	/**
     * Retorna los nodos debajo de un subnodo
     * @param oos
     * @param path
     * @throws Exception
     */
    public void returnNumElementosPendientes(ObjectOutputStream oos, String nodo,Integer idMunicipio,String locale) throws Exception{
           try{
               for (Iterator it=getNumElementosPendientes(nodo,idMunicipio,locale).iterator();it.hasNext();){
                   oos.writeObject(it.next());
               }
           }catch(Exception e){
               logger.error("returnEIELNodos: "+ e.getMessage());
               oos.writeObject(new ACException(e));
               throw e;
           }
    }
    
    public void returnUpdateConfiguracionPadron(ObjectOutputStream oos,String añoEncuesta) throws Exception{
        try{
        	updateConfiguracionPadron(añoEncuesta);

        }catch(Exception e){
            logger.error("returnUpdateConfiguracionPadron: "+ e.getMessage());
            oos.writeObject(new ACException(e));
            throw e;
        }
    }
    private void updateConfiguracionPadron(String añoEncuesta) throws Exception {


		String sSQL = "update eiel_configuracion_shp set fase=? ";

		PreparedStatement ps = null;
		Connection conn = null;
		try {
			conn = CPoolDatabase.getConnection();
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sSQL);
			ps.setString(1, añoEncuesta);
			ps.execute();
			conn.commit();			

		} catch (Exception e) {
			throw e;
		}
		finally{			
			safeClose(null, ps, conn);
		}
	}
    
    
	 /**
	  * 
	  * @param nodo
	  * @return
	  * @throws Exception
	  */
	    private Collection getNumElementosPendientes(String nodo,Integer idMunicipio,String locale) throws Exception{

        Connection connection = null;
		PreparedStatement statement=null,statement2 = null;
		ResultSet rs=null,rs2 = null;
		ArrayList lstDatos = new ArrayList();

		try {

			connection = CPoolDatabase.getConnection();
			if (connection == null) {
				return null;
			}

			//Primero obtenemos las tabla asociada al patron
			
			String sql="select clave,categoria,nodo,lcg_nodos_capas.tag_traduccion,traduccion,tabla,nombre_filtro,bean from lcg_nodos_capas" +
					" left  join lcg_nodos_capas_traducciones on lcg_nodos_capas.tag_traduccion=" +
					"lcg_nodos_capas_traducciones.tag_traduccion	where activo=true and (locale='"+locale+"' or locale is null) " +
							"and (nodo like '%"+nodo+"%' or categoria='"+nodo+"')";	
		

			statement = connection.prepareStatement(sql);
			rs = statement.executeQuery();

			while (rs.next()) {

				 LCGNodoEIEL nodoEIEL=new LCGNodoEIEL();
				 nodoEIEL.setClave(rs.getString("clave"));
				 nodoEIEL.setCategoria(rs.getString("categoria"));
				 nodoEIEL.setNodo(rs.getString("nodo"));
				 nodoEIEL.setTagTraduccion(rs.getString("tag_traduccion"));
				 nodoEIEL.setTraduccion(rs.getString("traduccion"));
				 nodoEIEL.setTabla(rs.getString("tabla"));
				 nodoEIEL.setNombreFiltro(rs.getString("nombre_filtro"));
				 nodoEIEL.setBean(rs.getString("bean"));

				 try {
					if (nodoEIEL.getTabla()!=null){
						if (nodoEIEL.getTabla().equals("eiel_t_carreteras"))
							sql="select (select count(revision_actual) from "+nodoEIEL.getTabla()+" where revision_expirada="+ConstantesLocalGISEIEL.REVISION_TEMPORAL+" and id_municipio='"+idMunicipio+"' group by revision_expirada) as temporales,"+
								 "(select count(revision_actual) from "+nodoEIEL.getTabla()+" where revision_expirada="+ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" and id_municipio='"+idMunicipio+"' group by revision_expirada) as publicables,"+
								 "(select count(revision_actual) from "+nodoEIEL.getTabla()+" where revision_expirada="+ConstantesLocalGISEIEL.REVISION_BORRABLE+" and id_municipio='"+idMunicipio+"' group by revision_expirada) as borrables,"+
						 		 "(select count(revision_actual) from "+nodoEIEL.getTabla()+" where revision_expirada="+ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD+" and id_municipio='"+idMunicipio+"' group by revision_expirada) as externos";
						else
							sql="select (select count(revision_actual) from "+nodoEIEL.getTabla()+" where revision_expirada="+ConstantesLocalGISEIEL.REVISION_TEMPORAL+" and codmunic='"+idMunicipio.toString().substring(2,5)+"' group by revision_expirada) as temporales,"+
									 "(select count(revision_actual) from "+nodoEIEL.getTabla()+" where revision_expirada="+ConstantesLocalGISEIEL.REVISION_PUBLICABLE+" and codmunic='"+idMunicipio.toString().substring(2,5)+"' group by revision_expirada) as publicables,"+
									 "(select count(revision_actual) from "+nodoEIEL.getTabla()+" where revision_expirada="+ConstantesLocalGISEIEL.REVISION_BORRABLE+" and codmunic='"+idMunicipio.toString().substring(2,5)+"' group by revision_expirada) as borrables,"+									
									 "(select count(revision_actual) from "+nodoEIEL.getTabla()+" where revision_expirada="+ConstantesLocalGISEIEL.REVISION_PUBLICABLE_MOVILIDAD+" and codmunic='"+idMunicipio.toString().substring(2,5)+"' group by revision_expirada) as externos";

						 statement = connection.prepareStatement(sql);
						 rs2 = statement.executeQuery();
						 if (rs2.next()){
							 String temporales=rs2.getString("temporales");
							 String publicables=rs2.getString("publicables");
							 String borrables=rs2.getString("borrables");							 
							 String externos=rs2.getString("externos");
							 if (temporales!=null)
								 nodoEIEL.setElementosTemporales(Integer.parseInt(temporales));
							 else
								 nodoEIEL.setElementosTemporales(0);
							 if (publicables!=null)
								 nodoEIEL.setElementosPublicables(Integer.parseInt(publicables));
							 else
								 nodoEIEL.setElementosPublicables(0);
							 if (externos!=null)
								 nodoEIEL.setElementosExternos(Integer.parseInt(externos));
							 else
								 nodoEIEL.setElementosExternos(0);
							 if (borrables!=null)
								 nodoEIEL.setElementosBorrables(Integer.parseInt(borrables));
							 else
								 nodoEIEL.setElementosBorrables(0);
						 }
					}
				} catch (Exception e) {
					logger.error("Exception al recuperar la informacion de version de la tabla:"+nodoEIEL.getTabla()+" ("+nodoEIEL.getClave()+") Error:"+e.toString());
				}
				finally{
					try{if (rs2!=null)rs2.close();}catch (Exception e){}
					try{if (statement2!=null)statement2.close();}catch (Exception e){}					
				}
	
				lstDatos.add(nodoEIEL);

			}
			
		} catch (Exception ex) {
			logger.error("Exception",ex);
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			ex.printStackTrace(pw);
		}
		finally{
			safeClose(rs, statement, connection);
		}

		return lstDatos;
  
    }
	
	    
	
	
    /**
     * Borra los datos previos de indicadores (nuevo modelo)
     */
	public void initIndicadoresCleanData(String idMunicipio) throws Exception {
		/*
		String sSQLUpdate="";
		Connection conn;
		PreparedStatement ps = null;
		conn = CPoolDatabase.getConnection();
		ps = conn.prepareStatement(sSQLUpdate);
		
        logger.info("EIEL_Indicadores. Eliminando datos previos eiel_indicadores_d_poblacion");
		sSQLUpdate = "delete from eiel_indicadores_d_poblacion";

		ps.execute();

		
		ps.close();
		conn.commit();
		*/
		logger.info("EIEL_Indicadores. Eliminando datos previos eiel_indicadores_d_*");
		String sSQLUpdate="";

		String[] sqlKey= {
				"eiel_indicadores_i_cleandata"
		};
		for (String s : sqlKey) {
			logger.debug("key="+s);
			initIndicadoresExecuteQuery(s,idMunicipio);
		}	
				
	}
	
	/**
	 * Ejecuta una consulta del fichero de propiedades XML eiel_indicdadores_sql para eliminación de registros
	 * o carga de datos en las tablas de indicadores
	 * @param key Clave de la consulta
	 * @param idMunicipio Código de municipio (5díg PPMMM) para parametrizar la consulta
	 */
	private void initIndicadoresExecuteQuery(String key, String idMunicipio){
		try {
			java.io.FileInputStream  propFile=new java.io.FileInputStream ("config" + File.separator+"eiel_indicadores_sql.xml"); 
			Properties properties = new Properties();
			String sSQLUpdate="";

			properties.loadFromXML(propFile);
			logger.debug("Leído fichero de propiedades eiel_indicadores_sql.xml");

			sSQLUpdate=properties.getProperty(key);

			if (sSQLUpdate != null) {
				Connection conn = null;
				PreparedStatement ps = null;
				try {

					logger.info("EIEL_Indicadores. Cargando datos "+key);
					long startMils=Calendar.getInstance().getTimeInMillis();

					conn = CPoolDatabase.getConnection();
					//Reemplazo manual del parámetro en lugar de setParameter para permitir
					//cambiar el id_municipio en múltiples lugares
					sSQLUpdate=sSQLUpdate.replaceAll("\\?M", idMunicipio);
					sSQLUpdate=sSQLUpdate.replaceAll("\\?p", idMunicipio.substring(0, 2));
					sSQLUpdate=sSQLUpdate.replaceAll("\\?m", idMunicipio.substring(2,5));
					
					
					
					ps = conn.prepareStatement(sSQLUpdate);
					//logger.info("Sentencia SQL Execute Indicador:"+sSQLUpdate);
					logger.info("Sentencia SQL Execute Indicador:"+sSQLUpdate.replaceAll("(\\r|\\n)", ""));

					ps.execute();

					conn.commit();
					
					long endMils=Calendar.getInstance().getTimeInMillis();
        			logger.info("Tiempo Total carga key"+key+" :"+(endMils-startMils)+" mils"+" IdMunicipio:"+idMunicipio);


				}catch (SQLException e){
					logger.error("Error cargando datos indicadores. Excepción "+e.getMessage());
					e.printStackTrace();
				}
				finally{
					safeClose(null, ps, conn);
				}
			}else {
				logger.error("No se encuentra la clave " + key + "en eiel_indicadores_sql.xml");
			}

		} catch (IOException e) {
			logger.error("No se pudo leer fichero de propiedades eiel_indicadores_sql.xml "+e.getMessage());
		}     		
	}
	
	public void initIndicadoresLoadPoblacionViviendaPlaneamiento(String idMunicipio) throws Exception {
		String sSQLUpdate="";
		String[] sqlKey= {
				"eiel_indicadores_i_poblacion_mun","eiel_indicadores_i_poblacion_nuc"
				,"eiel_indicadores_i_vivienda_mun","eiel_indicadores_i_vivienda_nuc"
				,"eiel_indicadores_i_planeamiento_mun","eiel_indicadores_i_planeamiento_nuc"
		};
		for (String s : sqlKey) {
			logger.debug("key="+s);
			initIndicadoresExecuteQuery(s,idMunicipio);
		}	     
	}	
	
	public void initIndicadoresLoadCicloAgua(String idMunicipio) throws Exception {
		String sSQLUpdate="";
		String[] sqlKey= {
				"eiel_indicadores_ii_captaciones_pre",
				"eiel_indicadores_ii_captaciones_mun","eiel_indicadores_ii_captaciones_nuc",
				
				"eiel_indicadores_ii_depositos_pre",
				"eiel_indicadores_ii_depositos_mun","eiel_indicadores_ii_depositos_nuc",
				
				"eiel_indicadores_ii_potabilizadoras_mun","eiel_indicadores_ii_potabilizadoras_nuc",

				"eiel_indicadores_ii_rdistribucion_pre",
				"eiel_indicadores_ii_rdistribucion_mun","eiel_indicadores_ii_rdistribucion_nuc",				

				"eiel_indicadores_ii_rsaneamiento_pre",
				"eiel_indicadores_ii_rsaneamiento_mun","eiel_indicadores_ii_rsaneamiento_nuc",
				
				"eiel_indicadores_ii_vertidos_mun","eiel_indicadores_ii_vertidos_nuc"

				
		};
		for (String s : sqlKey) {
			logger.debug("key="+s);
			initIndicadoresExecuteQuery(s,idMunicipio);
		}	     
	}	
	
	public void initIndicadoresLoadInfraestructuras(String idMunicipio) throws Exception {
		String sSQLUpdate="";
		String[] sqlKey= {
				"eiel_indicadores_iii_accesibilidad_mun","eiel_indicadores_iii_accesibilidad_nuc",
				"eiel_indicadores_iii_pavimentacion_mun","eiel_indicadores_iii_pavimentacion_nuc",
				"eiel_indicadores_iii_alumbrado_mun","eiel_indicadores_iii_alumbrado_nuc",
				
				"eiel_indicadores_iii_comunicaciones_pre",
				"eiel_indicadores_iii_comunicaciones_mun","eiel_indicadores_iii_comunicaciones_nuc",
				"eiel_indicadores_iii_suministros_mun","eiel_indicadores_iii_suministros_nuc"
		};
		for (String s : sqlKey) {
			logger.debug("key="+s);
			initIndicadoresExecuteQuery(s,idMunicipio);
		}	     
	}		
	
	public void initIndicadoresLoadResiduosUrbanos(String idMunicipio) throws Exception {
		String sSQLUpdate="";
		String[] sqlKey= {
				"eiel_indicadores_iv_rblimpieza_pre",
				"eiel_indicadores_iv_rblimpieza_mun","eiel_indicadores_iv_rblimpieza_nuc",
				
				"eiel_indicadores_iv_tratamresiduos_mun","eiel_indicadores_iv_tratamresiduos_nuc"
		};
		for (String s : sqlKey) {
			logger.debug("key="+s);
			initIndicadoresExecuteQuery(s,idMunicipio);
		}	     
	}		
	
	public void initIndicadoresLoadEducacionCultura(String idMunicipio) throws Exception {
		String sSQLUpdate="";
		String[] sqlKey= {
				"eiel_indicadores_v_centrosen_mun","eiel_indicadores_v_centrosen_nuc",
				"eiel_indicadores_v_ideporte_mun","eiel_indicadores_v_ideporte_nuc",
				"eiel_indicadores_v_ccultura_mun","eiel_indicadores_v_ccultura_nuc",
				"eiel_indicadores_v_zverde_mun","eiel_indicadores_v_zverde_nuc"
		};
		for (String s : sqlKey) {
			logger.debug("key="+s);
			initIndicadoresExecuteQuery(s,idMunicipio);
		}	     
	}		
	
	public void initIndicadoresLoadSanitarioAsistencial(String idMunicipio) throws Exception {
		String sSQLUpdate="";
		String[] sqlKey= {
				"eiel_indicadores_vi_csanitario_mun","eiel_indicadores_vi_csanitario_nuc",
				"eiel_indicadores_vi_casistencial_mun","eiel_indicadores_vi_casistencial_nuc"
		};
		for (String s : sqlKey) {
			logger.debug("key="+s);
			initIndicadoresExecuteQuery(s,idMunicipio);
		}	     
	}	
	
	public void initIndicadoresLoadOtros(String idMunicipio) throws Exception {
		String sSQLUpdate="";
		String[] sqlKey= {
				"eiel_indicadores_vii_otroserv_mun","eiel_indicadores_vii_otroserv_nuc"
		};
		for (String s : sqlKey) {
			logger.debug("key="+s);
			initIndicadoresExecuteQuery(s,idMunicipio);
		}	     
	}			
	  
	
    class MatchJRXMLFilter implements FilenameFilter 
    {
        private String filter;
        
        public MatchJRXMLFilter( String filter ) 
        {           
            this.filter = filter;
            
        }
        public boolean accept(File dir, String name) 
        {              	
        	 return (name.endsWith(".jrxml") && (name.contains(filter)));           
        }
    }
    
    class MatchJRXMLFilterPatrones implements FilenameFilter 
    {
        private String patron;
        private ArrayList patrones;
        
        public MatchJRXMLFilterPatrones(String patron,ArrayList patrones) 
        {           
            this.patron = patron;
            this.patrones = patrones;
            
        }
        public boolean accept(File dir, String name) 
        {              	
        	boolean encontrado=false;
        	Iterator it=patrones.iterator();
        	while (it.hasNext()){
        		LCGNodoEIEL nodoEIEL=(LCGNodoEIEL)it.next();
        		String clave=nodoEIEL.getClave();
        		String categoria=nodoEIEL.getCategoria();
        		if (name!=null && name.contains(clave) && (name.endsWith(".jrxml")))
        			return true;
        		if (name!=null && name.contains(categoria) && (name.endsWith(".jrxml")))
        			return true;
        	}
        	
        	 return (name.endsWith(".jrxml") && (name.contains(patron)));           
        }
    }
    /**
     * 
     * @param cadena 
     * @param longitud 
     * @return 
     */
	public static String completarConCeros(String cadena, int longitud){

		while (cadena.length()< longitud){
			cadena = '0' + cadena;
		}
		return cadena;
	}  
}
