/**
 * InsertUpdateFilterRemovedPanel.java
 * © MINETUR, Government of Spain
 * This program is part of LocalGIS
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * InsertUpdateFilterPanel.java
 *
 * Created on 21 de septiembre de 2004, 13:13
 */
package com.geopista.style.filtereditor.ui.impl.panels;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

import com.geopista.style.filtereditor.model.OperatorIdentifiers;
import com.geopista.style.filtereditor.ui.impl.PopUpManager;
import com.geopista.style.filtereditor.ui.impl.actions.AddBBOXOpAction;
import com.geopista.style.filtereditor.ui.impl.actions.AddDistanceBufferOpAction;
import com.geopista.style.filtereditor.ui.impl.actions.AddLiteralChildAction;
import com.geopista.style.filtereditor.ui.impl.actions.AddOperatorChildAction;
import com.geopista.style.filtereditor.ui.impl.actions.AddPropertyNameChildAction;
import com.geopista.style.filtereditor.ui.impl.actions.ChangeBBOXOpAction;
import com.geopista.style.filtereditor.ui.impl.actions.ChangeDistanceBufferOpAction;
import com.geopista.style.filtereditor.ui.impl.actions.ChangeLiteralAction;
import com.geopista.style.filtereditor.ui.impl.actions.ChangeOperatorTypeAction;
import com.geopista.style.filtereditor.ui.impl.actions.ChangeOperatorTypeToBBOXOpAction;
import com.geopista.style.filtereditor.ui.impl.actions.ChangeOperatorTypeToDistanceBufferOpAction;
import com.geopista.style.filtereditor.ui.impl.actions.ChangePropertyNameAction;
import com.geopista.style.filtereditor.ui.impl.actions.DeleteNodeAction;

import es.enxenio.util.controller.Action;
import es.enxenio.util.controller.ActionForward;
import es.enxenio.util.controller.FrontController;
import es.enxenio.util.controller.FrontControllerFactory;
import es.enxenio.util.controller.Request;
import es.enxenio.util.controller.Session;
import es.enxenio.util.ui.impl.AbstractPanel;

/**
 *
 * @author enxenio s.l.
 */
public class InsertUpdateFilterRemovedPanel extends AbstractPanel implements ActionListener {
    
   	private DefaultTreeModel _filterTree;
	
	public void configure(Request request) {

		Session session = FrontControllerFactory.getSession();
		_filterTree = (DefaultTreeModel)session.getAttribute("FilterTree");
		filterTree.setModel(_filterTree);
		DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
		renderer.setLeafIcon(null);
		renderer.setOpenIcon(null);
		renderer.setClosedIcon(null);
		filterTree.setCellRenderer(renderer);
		int row = 0;
		while (row<filterTree.getRowCount()) {
			filterTree.expandRow(row);
			row++;
		}
		filterTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		//configureFilterButtons();
	}

	public boolean windowClosing() {
		Request theRequest = FrontControllerFactory.createRequest();
		FrontController fc =  FrontControllerFactory.getFrontController();
		Action theAction = fc.getAction("GetBack"); 
		ActionForward theActionForward = theAction.doExecute(theRequest);
		_container.forward(theActionForward, theRequest);
		return false;
	}

	public String getTitle() {
		return "OpenGIS Filter Manager";		
	}

    /** Creates new form InsertUpdateFilterPanel */
        public InsertUpdateFilterRemovedPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        actionPanel = new javax.swing.JPanel();
        filterScr = new javax.swing.JScrollPane();
        filterTree = new javax.swing.JTree();
        buttonsPanel = new javax.swing.JPanel();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setPreferredSize(new java.awt.Dimension(400, 260));
        actionPanel.setLayout(new java.awt.GridBagLayout());

        actionPanel.setBorder(new javax.swing.border.TitledBorder(""));
        filterTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                filterTreeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                filterTreeMouseReleased(evt);
            }
        });

        filterScr.setViewportView(filterTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        actionPanel.add(filterScr, gridBagConstraints);

        add(actionPanel, java.awt.BorderLayout.CENTER);

        okBtn.setText("Aceptar");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        buttonsPanel.add(okBtn);

        cancelBtn.setText("Cancelar");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        buttonsPanel.add(cancelBtn);

        add(buttonsPanel, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void filterTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterTreeMouseReleased
		showPopUp(evt);
    }//GEN-LAST:event_filterTreeMouseReleased

    private void filterTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterTreeMousePressed
		showPopUp(evt);
    }//GEN-LAST:event_filterTreeMousePressed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed

		Request theRequest = FrontControllerFactory.createRequest();
		FrontController fc =  FrontControllerFactory.getFrontController();
		Action theAction = fc.getAction("GetBack"); 
		ActionForward theActionForward = theAction.doExecute(theRequest);
		_container.forward(theActionForward, theRequest);

    }//GEN-LAST:event_cancelBtnActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed

		Request theRequest = FrontControllerFactory.createRequest();
		FrontController fc =  FrontControllerFactory.getFrontController();
		Action theAction = fc.getAction("UpdateFilter"); 
		ActionForward theActionForward = theAction.doExecute(theRequest);
		_container.forward(theActionForward, theRequest);
        
    }//GEN-LAST:event_okBtnActionPerformed
    
	private void showPopUp(java.awt.event.MouseEvent evt) {
		
		if (evt.isPopupTrigger()) {
			MutableTreeNode node = (MutableTreeNode)filterTree.getLastSelectedPathComponent();
			if (node != null) {
				JPopupMenu popUp = PopUpManager.getPopUp(node, this);
				popUp.show(evt.getComponent(),evt.getX(),evt.getY());
			} 	    
		}
	}

	public void actionPerformed(ActionEvent evt) {
		javax.swing.Action actionSource;
		
		Request theRequest = FrontControllerFactory.createRequest();
		FrontController fc =  FrontControllerFactory.getFrontController();
		Action theAction = null;
		actionSource = ((JMenuItem)evt.getSource()).getAction();
		if(actionSource instanceof DeleteNodeAction) {
			theRequest.setAttribute("Node", filterTree.getLastSelectedPathComponent());
			theAction = fc.getAction("DeleteNode"); 
		}
		else if (actionSource instanceof ChangeOperatorTypeAction) {
			theRequest.setAttribute("Node", filterTree.getLastSelectedPathComponent());
			theRequest.setAttribute("OperatorID", new Integer(((ChangeOperatorTypeAction)actionSource).getTargetOperatorType()));
			theAction = fc.getAction("ChangeOperatorType"); 			
		}
		else if (actionSource instanceof ChangeOperatorTypeToDistanceBufferOpAction) {
			theRequest.setAttribute("OldNode", filterTree.getLastSelectedPathComponent());
			theRequest.setAttribute("OperatorID", new Integer(((ChangeOperatorTypeToDistanceBufferOpAction)actionSource).getTargetOperatorType()));
			theAction = fc.getAction("ChangeOperatorTypeToDistanceBufferOp"); 			
		}
		else if (actionSource instanceof ChangeOperatorTypeToBBOXOpAction) {
			theRequest.setAttribute("OldNode", filterTree.getLastSelectedPathComponent());
			theRequest.setAttribute("OperatorID", new Integer(OperatorIdentifiers.BBOX));
			theAction = fc.getAction("ChangeOperatorTypeToBBOXOp"); 			
		}
		else if (actionSource instanceof ChangePropertyNameAction) {
			theRequest.setAttribute("Node", filterTree.getLastSelectedPathComponent());
			theAction = fc.getAction("ChangePropertyName"); 			
		}
		else if (actionSource instanceof ChangeLiteralAction) {
			theRequest.setAttribute("Node", filterTree.getLastSelectedPathComponent());
			theAction = fc.getAction("ChangeLiteral"); 			
		}
		else if (actionSource instanceof ChangeDistanceBufferOpAction) {
			theRequest.setAttribute("Node", filterTree.getLastSelectedPathComponent());
			theAction = fc.getAction("ChangeDistanceBufferOp"); 			
		}
		else if (actionSource instanceof ChangeBBOXOpAction) {
			theRequest.setAttribute("Node", filterTree.getLastSelectedPathComponent());
			theAction = fc.getAction("ChangeBBOXOp"); 			
		}
		else if (actionSource instanceof AddPropertyNameChildAction) {
			theRequest.setAttribute("ParentNode", filterTree.getLastSelectedPathComponent());
			theAction = fc.getAction("AddPropertyNameChild"); 			
		}
		else if (actionSource instanceof AddOperatorChildAction) {
			theRequest.setAttribute("ParentNode", filterTree.getLastSelectedPathComponent());
			theRequest.setAttribute("OperatorID", new Integer(((AddOperatorChildAction)actionSource).getTargetOperatorType()));
			theAction = fc.getAction("AddOperatorChild"); 			
		}
		else if (actionSource instanceof AddLiteralChildAction) {
			theRequest.setAttribute("ParentNode", filterTree.getLastSelectedPathComponent());
			theAction = fc.getAction("AddLiteralChild"); 			
		}
		else if (actionSource instanceof AddDistanceBufferOpAction) {
			theRequest.setAttribute("ParentNode", filterTree.getLastSelectedPathComponent());
			theRequest.setAttribute("OperatorID", new Integer(((AddDistanceBufferOpAction)actionSource).getTargetOperatorType()));
			theAction = fc.getAction("AddDistanceBufferOp"); 			
		}
		else if (actionSource instanceof AddBBOXOpAction) {
			theRequest.setAttribute("ParentNode", filterTree.getLastSelectedPathComponent());
			theRequest.setAttribute("OperatorID", new Integer(((AddBBOXOpAction)actionSource).getTargetOperatorType()));
			theAction = fc.getAction("AddBBOXOp"); 			
		}
		else {
			JOptionPane.showMessageDialog(this, evt);
		}
		if (theAction != null) {
			ActionForward theActionForward = theAction.doExecute(theRequest);
			_container.forward(theActionForward, theRequest);
		}
	}
	
    // Variables declaration - do not modify
    private javax.swing.JPanel actionPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JScrollPane filterScr;
    private javax.swing.JTree filterTree;
    private javax.swing.JButton okBtn;
    // End of variables declaration
}
