/**
 * InsertUpdateGMLBoxPanel.java
 * © MINETUR, Government of Spain
 * This program is part of LocalGIS
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * InsertUpdateGMLBoxPanel.java
 *
 * Created on 21 de septiembre de 2004, 18:59
 */
package com.geopista.style.filtereditor.ui.impl.panels;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

import org.deegree.gml.GMLBox;
import org.deegree.gml.GMLCoord;

import es.enxenio.util.controller.Action;
import es.enxenio.util.controller.ActionForward;
import es.enxenio.util.controller.FrontController;
import es.enxenio.util.controller.FrontControllerFactory;
import es.enxenio.util.controller.Request;
import es.enxenio.util.controller.Session;
import es.enxenio.util.ui.impl.AbstractPanel;

/**
 *
 * @author enxenio s.l.
 */
public class InsertUpdateGMLBoxPanel extends AbstractPanel {
    
	private DefaultComboBoxModel _srsCmbModel;
	private static final String[] _srsValues = { "EPSG:4258", "EPSG:25828", "EPSG:25829", "EPSG:25830"};

	public void configure(Request request) {

		Session session = FrontControllerFactory.getSession();
		_srsCmbModel = new DefaultComboBoxModel(_srsValues);	
		srsCmb.setModel(_srsCmbModel);
		if (session.getAttribute("GMLBox") != null) {
			GMLBox gmlBox = (GMLBox)session.getAttribute("GMLBox");	
			srsCmb.setSelectedItem(gmlBox.getSrs());
			GMLCoord minCoord = gmlBox.getMin();
			GMLCoord maxCoord = gmlBox.getMax();
			minxTxt.setText(new Double(minCoord.getX()).toString());	
			minyTxt.setText(new Double(minCoord.getY()).toString());
			maxxTxt.setText(new Double(maxCoord.getX()).toString());
			maxyTxt.setText(new Double(maxCoord.getY()).toString());
		}
	}

	public boolean windowClosing() {
		Request theRequest = FrontControllerFactory.createRequest();
		FrontController fc =  FrontControllerFactory.getFrontController();
		Action theAction = fc.getAction("GetBack"); 
		ActionForward theActionForward = theAction.doExecute(theRequest);
		_container.forward(theActionForward, theRequest);
		return false;
	}

	public String getTitle() {
		return "GMLBox Parameters";		
	}
        
    /** Creates new form InsertUpdateGMLBoxPanel */
    public InsertUpdateGMLBoxPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        actionPanel = new javax.swing.JPanel();
        srsPanel = new javax.swing.JPanel();
        srsLbl = new javax.swing.JLabel();
        srsCmb = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        coordsPanel = new javax.swing.JPanel();
        minxLbl = new javax.swing.JLabel();
        minxTxt = new javax.swing.JTextField();
        minyLbl = new javax.swing.JLabel();
        minyTxt = new javax.swing.JTextField();
        maxxLbl = new javax.swing.JLabel();
        maxxTxt = new javax.swing.JTextField();
        maxyLbl = new javax.swing.JLabel();
        maxyTxt = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setPreferredSize(new java.awt.Dimension(400, 225));
        actionPanel.setLayout(new java.awt.GridBagLayout());

        actionPanel.setBorder(new javax.swing.border.TitledBorder(""));
        srsPanel.setLayout(new java.awt.GridBagLayout());

        srsPanel.setBorder(new javax.swing.border.TitledBorder("Sistema de referencia espacial"));
        srsLbl.setText("SRS:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        srsPanel.add(srsLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        srsPanel.add(srsCmb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        srsPanel.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        actionPanel.add(srsPanel, gridBagConstraints);

        coordsPanel.setLayout(new java.awt.GridBagLayout());

        coordsPanel.setBorder(new javax.swing.border.TitledBorder("Coordenadas GMLBox"));
        minxLbl.setText("MinX:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        coordsPanel.add(minxLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        coordsPanel.add(minxTxt, gridBagConstraints);

        minyLbl.setText("MinY:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        coordsPanel.add(minyLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        coordsPanel.add(minyTxt, gridBagConstraints);

        maxxLbl.setText("MaxX:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        coordsPanel.add(maxxLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        coordsPanel.add(maxxTxt, gridBagConstraints);

        maxyLbl.setText("MaxY:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        coordsPanel.add(maxyLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        coordsPanel.add(maxyTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        actionPanel.add(coordsPanel, gridBagConstraints);

        add(actionPanel, java.awt.BorderLayout.CENTER);

        okBtn.setText("Aceptar");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        buttonPanel.add(okBtn);

        cancelBtn.setText("Cancelar");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelBtn);

        add(buttonPanel, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed

		Request theRequest = FrontControllerFactory.createRequest();
		FrontController fc =  FrontControllerFactory.getFrontController();
		Action theAction = fc.getAction("GetBack"); 
		ActionForward theActionForward = theAction.doExecute(theRequest);
		_container.forward(theActionForward, theRequest);

    }//GEN-LAST:event_cancelBtnActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed

		if (checkValues()) {
			Session session = FrontControllerFactory.getSession();
			Request theRequest = FrontControllerFactory.createRequest();
			FrontController fc =  FrontControllerFactory.getFrontController();
			theRequest.setAttribute("MinX",new Double(minxTxt.getText()));
			theRequest.setAttribute("MinY",new Double(minyTxt.getText()));
			theRequest.setAttribute("MaxX",new Double(maxxTxt.getText()));
			theRequest.setAttribute("MaxY",new Double(maxyTxt.getText()));
			theRequest.setAttribute("SRS",(String)srsCmb.getSelectedItem());
			Action theAction = fc.getAction("UpdateGMLBox"); 
			ActionForward theActionForward = theAction.doExecute(theRequest);
			_container.forward(theActionForward, theRequest);        		
		}

    }//GEN-LAST:event_okBtnActionPerformed
 
	private boolean checkValues() {
		boolean valuesAreCorrect = true;
		StringBuffer errorMessage = new StringBuffer();
    	
		if (minxTxt.getText().equals("")) {
			errorMessage.append("El valor de X Min del GMLBox es obligatorio\n");
			valuesAreCorrect = false;
		} 
		else {
			try {
				Double.parseDouble(minxTxt.getText());			
			}
			catch (NumberFormatException e) {
				errorMessage.append("El valor de X Min del GMLBox debe ser numérico\n");
				valuesAreCorrect = false;
			}
		}
		if (maxxTxt.getText().equals("")) {
			errorMessage.append("El valor de X Max del GMLBox es obligatorio\n");
			valuesAreCorrect = false;
		}
		else {
			try {
				Double.parseDouble(maxxTxt.getText());			
			}
			catch (NumberFormatException e) {
				errorMessage.append("El valor de X Max del GMLBox debe ser numérico\n");
				valuesAreCorrect = false;
			}
		}
		if (minyTxt.getText().equals("")) {
			errorMessage.append("El valor de Y Min del GMLBox es obligatorio\n");
			valuesAreCorrect = false;
		}
		else {
			try {
				Double.parseDouble(minyTxt.getText());			
			}
			catch (NumberFormatException e) {
				errorMessage.append("El valor de Y Min del GMLBox debe ser numérico\n");
				valuesAreCorrect = false;
			}
		}
		if (maxyTxt.getText().equals("")) {
			errorMessage.append("El valor de Y Max del GMLBox es obligatorio\n");
			valuesAreCorrect = false;
		}
		else {
			try {
				Double.parseDouble(maxyTxt.getText());			
			}
			catch (NumberFormatException e) {
				errorMessage.append("El valor de Y Max del GMLBox debe ser numérico\n");
				valuesAreCorrect = false;
			}
		}
		if (!valuesAreCorrect) {
			JOptionPane.showMessageDialog(null, "Los siguientes valores son incorrectos:\n" + errorMessage.toString());
		}
		return valuesAreCorrect;	
	}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JPanel coordsPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel maxxLbl;
    private javax.swing.JTextField maxxTxt;
    private javax.swing.JLabel maxyLbl;
    private javax.swing.JTextField maxyTxt;
    private javax.swing.JLabel minxLbl;
    private javax.swing.JTextField minxTxt;
    private javax.swing.JLabel minyLbl;
    private javax.swing.JTextField minyTxt;
    private javax.swing.JButton okBtn;
    private javax.swing.JComboBox srsCmb;
    private javax.swing.JLabel srsLbl;
    private javax.swing.JPanel srsPanel;
    // End of variables declaration//GEN-END:variables
    
}
