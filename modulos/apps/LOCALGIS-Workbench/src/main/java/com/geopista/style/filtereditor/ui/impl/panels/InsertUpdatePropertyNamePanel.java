/**
 * InsertUpdatePropertyNamePanel.java
 * © MINETUR, Government of Spain
 * This program is part of LocalGIS
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * InsertUpdatePropertyNamePanel.java
 *
 * Created on 21 de septiembre de 2004, 17:00
 */
package com.geopista.style.filtereditor.ui.impl.panels;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

import es.enxenio.util.controller.Action;
import es.enxenio.util.controller.ActionForward;
import es.enxenio.util.controller.FrontController;
import es.enxenio.util.controller.FrontControllerFactory;
import es.enxenio.util.controller.Request;
import es.enxenio.util.controller.Session;
import es.enxenio.util.ui.impl.AbstractPanel;

/**
 *
 * @author enxenio s.l.
 */
public class InsertUpdatePropertyNamePanel extends AbstractPanel {
    
	private DefaultComboBoxModel _featuresCmbModel;
	private DefaultComboBoxModel _attributesCmbModel;
    
	public void configure(Request request) {

		Session session = FrontControllerFactory.getSession();
		_featuresCmbModel = new DefaultComboBoxModel();
		_featuresCmbModel.addElement("");
		_attributesCmbModel = new DefaultComboBoxModel();
		HashMap featureAttributesMap = (HashMap)session.getAttribute("FeatureAttributesMap");
		Set mapKeys = featureAttributesMap.keySet();
		Iterator keyIterator = mapKeys.iterator();
		while (keyIterator.hasNext()) {
			String featureName = (String)keyIterator.next();
			_featuresCmbModel.addElement(featureName);
		}
		featureCmb.setModel(_featuresCmbModel);
	}

	public String getTitle() {
		return "PropertyName parameters";		
	}

    /** Creates new form InsertUpdatePropertyNamePanel */
    public InsertUpdatePropertyNamePanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        actionPanel = new javax.swing.JPanel();
        featureLbl = new javax.swing.JLabel();
        featureCmb = new javax.swing.JComboBox();
        attributeLbl = new javax.swing.JLabel();
        attributeCmb = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setPreferredSize(new java.awt.Dimension(400, 164));
        actionPanel.setLayout(new java.awt.GridBagLayout());

        actionPanel.setBorder(new javax.swing.border.TitledBorder(""));
        featureLbl.setText("Features:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        actionPanel.add(featureLbl, gridBagConstraints);

        featureCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                featureCmbActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 100);
        actionPanel.add(featureCmb, gridBagConstraints);

        attributeLbl.setText("Attributes:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        actionPanel.add(attributeLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 100);
        actionPanel.add(attributeCmb, gridBagConstraints);

        add(actionPanel, java.awt.BorderLayout.CENTER);

        okBtn.setText("Aceptar");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        buttonPanel.add(okBtn);

        cancelBtn.setText("Cancelar");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelBtn);

        add(buttonPanel, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void featureCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_featureCmbActionPerformed
       	String featureName = (String)featureCmb.getSelectedItem();
	   	Session session = FrontControllerFactory.getSession();
	   	HashMap featureAttributesMap = (HashMap)session.getAttribute("FeatureAttributesMap");
	   	List attributeList = (List)featureAttributesMap.get(featureName);
	   	Iterator attributeIterator = attributeList.iterator();
	   	while (attributeIterator.hasNext()) {
	   		String attribute = (String)attributeIterator.next();
	  		_attributesCmbModel.addElement(attribute); 	
	   	}
	   	attributeCmb.setModel(_attributesCmbModel);
    }//GEN-LAST:event_featureCmbActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed

		Request theRequest = FrontControllerFactory.createRequest();
		FrontController fc =  FrontControllerFactory.getFrontController();
		Action theAction = fc.getAction("GetBack"); 
		ActionForward theActionForward = theAction.doExecute(theRequest);
		_container.forward(theActionForward, theRequest);

    }//GEN-LAST:event_cancelBtnActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
		if (checkValues()) {
			Request theRequest = FrontControllerFactory.createRequest();
			FrontController fc =  FrontControllerFactory.getFrontController();
			theRequest.setAttribute("PropertyNameValue",(String)attributeCmb.getSelectedItem());
			Action theAction = fc.getAction("UpdatePropertyName"); 
			ActionForward theActionForward = theAction.doExecute(theRequest);
			_container.forward(theActionForward, theRequest);
		}
    }//GEN-LAST:event_okBtnActionPerformed
    
    private boolean checkValues() {
		boolean valuesAreCorrect = true;
		StringBuffer errorMessage = new StringBuffer();
    	
		if (attributeCmb.getSelectedIndex() == -1) {
			errorMessage.append("Debe seleccionar un atributo del feature\n");
			valuesAreCorrect = false;
		} 
		if (!valuesAreCorrect) {
			JOptionPane.showMessageDialog(null, "Los siguientes valores son incorrectos:\n" + errorMessage.toString());
		}
		return valuesAreCorrect;	

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JComboBox attributeCmb;
    private javax.swing.JLabel attributeLbl;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JComboBox featureCmb;
    private javax.swing.JLabel featureLbl;
    private javax.swing.JButton okBtn;
    // End of variables declaration//GEN-END:variables
    
}
