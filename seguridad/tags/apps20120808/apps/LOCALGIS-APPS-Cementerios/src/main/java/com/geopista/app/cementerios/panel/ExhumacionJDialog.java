package com.geopista.app.cementerios.panel;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableColumn;


import com.geopista.app.AppContext;
import com.geopista.app.cementerios.Constantes;
import com.geopista.app.cementerios.ElemJTableModel;
import com.geopista.app.cementerios.Estructuras;
import com.geopista.app.utilidades.TableSorted;
import com.geopista.protocol.administrador.dominios.DomainNode;
import com.geopista.protocol.cementerios.ConcesionBean;
import com.geopista.protocol.cementerios.Const;
import com.geopista.protocol.cementerios.DatosFallecimientoBean;
import com.geopista.protocol.cementerios.DifuntoBean;
import com.geopista.protocol.cementerios.ExhumacionBean;
import com.geopista.protocol.cementerios.InhumacionBean;
import com.geopista.protocol.cementerios.PersonaBean;
import com.geopista.protocol.cementerios.TarifaBean;
import com.geopista.protocol.cementerios.UnidadEnterramientoBean;
import com.geopista.protocol.cementerios.UnidadSimple;
import com.geopista.util.ApplicationContext;


/**
 *
 * @author yraton
 */
public class ExhumacionJDialog extends javax.swing.JDialog {
	
	private org.apache.log4j.Logger logger= org.apache.log4j.Logger.getLogger(ExhumacionJDialog.class);

	private static final long serialVersionUID = 1L;

	private  int patronExhumacion = 1;

	private String operacion;
	private String tipo;
    private ApplicationContext aplicacion;
    private javax.swing.JFrame desktop;
    private ExhumacionBean exhumacion;
	private UnidadEnterramientoBean unidadSelected;
	private BotoneraAceptarCancelarJPanel botoneraAceptarCancelarJPanel;
	
	/**Tarifas**/
    private ArrayList listaTarifas;
    private ArrayList<TarifaBean> listaTarifasTabla;
    private ElemJTableModel tarifasJTableModel;
    private TableSorted tableSorted;
    private int selectedRow= -1;
	public static final String DOBLE_CLICK="DOBLE_CLICK";
	private TarifaBean tarifaSelected;
	private boolean tarifaDeselected = true;

	/**Difuntos**/
	private ArrayList listaDifuntos;
    private ArrayList<DifuntoBean> listaDifuntosTabla;
    private ElemJTableModel difuntosJTableModel;
    private TableSorted tableDifuntosSorted;
    private int selectedDifuntosRow= -1;
	private DifuntoBean difuntoSelected;
	private boolean difuntoDeselected=true;

	private Vector vDomainTipoContenedor;
	private Vector vDomainTipoExhumacion;
	
	private int patronContenedor = 1;
	private ArrayList actionListeners= new ArrayList();
    private String locale;

    /** Creates new form InhumacionJDialog */
    public ExhumacionJDialog (JFrame desktop, String locale, String operacion,String tipo, UnidadEnterramientoBean unidadSelected, ArrayList listaDifuntos,  ArrayList listaTarifas) throws Exception{
    	super(desktop);
        this.desktop= desktop;
        this.locale= locale;
        this.operacion= operacion;
        this.tipo=tipo;
        this.listaTarifas = listaTarifas;
        this.listaDifuntos = listaDifuntos;
        this.unidadSelected = unidadSelected;
        inicializar();
    }

    /** Creates new form BloqueJDialog */
    public ExhumacionJDialog(JFrame desktop, String locale) throws Exception{
        super(desktop);
        this.desktop= desktop;
        this.locale= locale;
        inicializar();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
 
    private void inicializar() {

    	this.aplicacion = (AppContext) AppContext.getApplicationContext();
        getContentPane().setLayout(new BorderLayout());
        renombrarComponentes();
        setModal(true);

        desktop = new javax.swing.JFrame();

        InhumacionJPanel = new javax.swing.JPanel();
        DatosGeneralesComunesJPanel = new javax.swing.JPanel();
        entidadJLabel = new javax.swing.JLabel();
        cementerioJLabel = new javax.swing.JLabel();
        entidadJTextField = new javax.swing.JTextField();
        cementerioJTextField = new javax.swing.JTextField();
        DatosDefuncionJPanel = new javax.swing.JPanel();
        contenedorJLabel = new javax.swing.JLabel();
        contendorJComboBox = new javax.swing.JComboBox();
        medicoJLabel = new javax.swing.JLabel();
        medicoJTextField = new javax.swing.JTextField();
        numColegiadoJLabel = new javax.swing.JLabel();
        numColegiadoJTextField = new javax.swing.JTextField();
        regCivilJTextField = new javax.swing.JTextField();
        regiCivilJLabel = new javax.swing.JLabel();
        codigoJLabel = new javax.swing.JLabel();
        codigoJTextField = new javax.swing.JTextField();
        lugarDefuncionJLabel = new javax.swing.JLabel();
        lugarDefuncionJTextField = new javax.swing.JTextField();
        fechaFallecimientoJLabel = new javax.swing.JLabel();
        fFallecimientoJTextField = new javax.swing.JTextField();
        RefFallecimientoJLabel = new javax.swing.JLabel();
        RefFallecimientoJTextField = new javax.swing.JTextField();
        JSeparator1 = new javax.swing.JSeparator();
        
        tipoInhumacionJLabel = new javax.swing.JLabel();
        fechaInhumacionJLabel = new javax.swing.JLabel();
        
        fechaInhumacionJTextField = new JDateChooser(new Date());
        fechaInhumacionJTextField.setDateFormatString("dd/MM/yyyy");

        tipoExhumacionJComboBox = new javax.swing.JComboBox();
        JSeparator2 = new javax.swing.JSeparator();
        
        causaFundamentalJLabel = new javax.swing.JLabel();
        causaInmediataJLabel = new javax.swing.JLabel();
        causaFundamentalJTextField = new javax.swing.JTextField();
        causaInmediataJTextField = new javax.swing.JTextField();
        informeJScrollPane = new javax.swing.JScrollPane();
        informeJTextArea = new javax.swing.JTextArea();
        informeInhumacionJLabel = new javax.swing.JLabel();
        
        
        redRestosJCheckBox = new javax.swing.JCheckBox();
        trasladoJCheckBox = new javax.swing.JCheckBox();
        
        //datos de tarifa
        datostarifaJPanel = new javax.swing.JPanel();
        bonificacionJLabel = new javax.swing.JLabel();
        bonificaionJTextField = new javax.swing.JTextField();
        precioJLabel = new javax.swing.JLabel();
        precioJTextField = new javax.swing.JTextField();
        
        tarifasJPanel = new javax.swing.JPanel();
        tarifasJScrollPane = new javax.swing.JScrollPane();
        tarifasJTable = new javax.swing.JTable();
        
        difuntosJPanel = new javax.swing.JPanel();
        difuntosJScrollPane = new javax.swing.JScrollPane();
        difuntosJTable = new javax.swing.JTable();
        
        //botonera, tamaño por defecto y 
        
        botoneraAceptarCancelarJPanel= new BotoneraAceptarCancelarJPanel();
        botoneraAceptarCancelarJPanel.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(ActionEvent e){
  				botoneraAceptarCancelarJPanel_actionPerformed();
  			}
  		});

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
          //800x 500
        setSize(820, 820);
//        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        InhumacionJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DatosGeneralesComunesJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        DatosGeneralesComunesJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        entidadJLabel.setText("Entidad");
        DatosGeneralesComunesJPanel.add(entidadJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        cementerioJLabel.setText("Cementerio");
        DatosGeneralesComunesJPanel.add(cementerioJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        entidadJTextField.setText("");

        DatosGeneralesComunesJPanel.add(entidadJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 780, -1));

        cementerioJTextField.setText("");
        DatosGeneralesComunesJPanel.add(cementerioJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 780, -1));

        InhumacionJPanel.add(DatosGeneralesComunesJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 870, 70));

        DatosDefuncionJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        DatosDefuncionJPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        DatosDefuncionJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        contenedorJLabel.setText("Contenedor");
        DatosDefuncionJPanel.add(contenedorJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(634, 11, -1, -1));

        //Dominios tipo unidad enterramiento
        
        //cargarmos las estructuras..
        while (!Estructuras.isCargada()){
            if (!Estructuras.isIniciada()) Estructuras.cargarEstructuras();
            try {Thread.sleep(500);}catch(Exception e){}
        }

        vDomainTipoContenedor = Estructuras.getListaComboContenedores(locale);
        contendorJComboBox = new JComboBox(vDomainTipoContenedor);
        for (int i = 0; i < vDomainTipoContenedor.size(); i++) {
  		DomainNode node = (DomainNode) vDomainTipoContenedor.get(i);
  		if (node.getPatron().equalsIgnoreCase(String.valueOf(getPatronContenedor()))){
  			contendorJComboBox.setSelectedIndex(i);
  		}
  	}
        
        
        contendorJComboBox.addActionListener(new java.awt.event.ActionListener(){
  		public void actionPerformed(ActionEvent e){
  			JComboBox cb = (JComboBox)e.getSource();
  			DomainNode dNode= (DomainNode) cb.getSelectedItem();
  			 int patron = Integer.parseInt(dNode.getPatron());
  			 if (patron != 0){
  				 setPatronContenedor(patron);
  			 }
  		}
  	});
        
        
        DatosDefuncionJPanel.add(contendorJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(701, 8, 151, -1));

        medicoJLabel.setText("Médico Forense");
        DatosDefuncionJPanel.add(medicoJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 34, 80, -1));
        DatosDefuncionJPanel.add(medicoJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 34, 245, -1));

        numColegiadoJLabel.setText("Num Colegiado");
        DatosDefuncionJPanel.add(numColegiadoJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 37, -1, -1));
        
        DatosDefuncionJPanel.add(numColegiadoJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 34, 146, -1));
        
        DatosDefuncionJPanel.add(codigoJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 34, 150, -1));

        regiCivilJLabel.setText("Registro Civil");
        DatosDefuncionJPanel.add(regiCivilJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 11, -1, -1)); //(623, 37, 68, -1)

        codigoJLabel.setText("codigo");
        DatosDefuncionJPanel.add(codigoJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(656, 37, 68, -1)); //(403, 11, 40, -1));

        codigoJTextField.setText("");
        DatosDefuncionJPanel.add(regCivilJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(453, 8, 145, -1));

        lugarDefuncionJLabel.setText("Lugar Defunción");
        DatosDefuncionJPanel.add(lugarDefuncionJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 11, 80, -1));

        lugarDefuncionJTextField.setText("");
        DatosDefuncionJPanel.add(lugarDefuncionJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 8, 245, -1));

        fechaFallecimientoJLabel.setText("Fecha Fallecimiento");
        DatosDefuncionJPanel.add(fechaFallecimientoJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 65, -1, -1));

        DatosDefuncionJPanel.add(fFallecimientoJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 65, 130, -1));

        RefFallecimientoJLabel.setText("Ref. Fallecimiento");
        DatosDefuncionJPanel.add(RefFallecimientoJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 91, -1, 25));

        DatosDefuncionJPanel.add(RefFallecimientoJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 91, 130, -1));

        JSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        DatosDefuncionJPanel.add(JSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(273, 68, 12, 42));

        
        //Dominios tipo unidad enterramiento
        
        //cargarmos las estructuras..
        while (!Estructuras.isCargada()){
            if (!Estructuras.isIniciada()) Estructuras.cargarEstructuras();
            try {Thread.sleep(500);}catch(Exception e){}
        }

        vDomainTipoExhumacion = Estructuras.getListaCombosTipoExhumacionesSorted(locale);
        tipoExhumacionJComboBox = new JComboBox(vDomainTipoExhumacion);
        for (int i = 0; i < vDomainTipoExhumacion.size(); i++) {
  		DomainNode node = (DomainNode) vDomainTipoExhumacion.get(i);
  		if (node.getPatron().equalsIgnoreCase(String.valueOf(getPatronExhumacion()))){
  			tipoExhumacionJComboBox.setSelectedIndex(i);
  		}
  	}
        
        
        tipoExhumacionJComboBox.addActionListener(new java.awt.event.ActionListener(){
  		public void actionPerformed(ActionEvent e){
  			JComboBox cb = (JComboBox)e.getSource();
  			DomainNode dNode= (DomainNode) cb.getSelectedItem();
  			 int patron = Integer.parseInt(dNode.getPatron());
  			 if (patron != 0){
  				 setPatronExhumacion(patron);
  			 }
  		}
  	});
        
        
        
        tipoInhumacionJLabel.setText("Tipo Exhumacion"); //(301, 68, -1, -1));
        DatosDefuncionJPanel.add(tipoInhumacionJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 68, -1, -1));
        DatosDefuncionJPanel.add(tipoExhumacionJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 65, 150, -1)); //(389, 65, 153, -1)

        fechaInhumacionJLabel.setText("Fecha Exhumacion"); // (301, 94, -1, -1)
        DatosDefuncionJPanel.add(fechaInhumacionJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 94, -1, -1));
        DatosDefuncionJPanel.add(fechaInhumacionJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 91, 150, -1)); //(392, 91, 150, -1)

        JSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        DatosDefuncionJPanel.add(JSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(584, 68, 21, 44)); //(564, 68, 21, 44)

        causaFundamentalJLabel.setText("Causa Fundamental"); //(589, 68, -1, -1)
        DatosDefuncionJPanel.add(causaFundamentalJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 68, -1, -1));
        DatosDefuncionJPanel.add(causaFundamentalJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints (407, 65, 150, -1)); //(702, 65, 150, -1)

        causaInmediataJLabel.setText("Causa Inmediata"); //(589, 94, -1, -1)
        DatosDefuncionJPanel.add(causaInmediataJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 94, -1, -1));
        DatosDefuncionJPanel.add(causaInmediataJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(407, 91, 150, -1)); //(702, 91, 150, -1)

        informeJTextArea.setColumns(15); //20
        informeJTextArea.setRows(5);
        informeJScrollPane.setViewportView(informeJTextArea);

        DatosDefuncionJPanel.add(informeJScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 143, 534, 38)); //(18, 143, 834, 38));
        
        informeInhumacionJLabel.setText("Informe de Exhumacion:");
        DatosDefuncionJPanel.add(informeInhumacionJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 123, -1, -1));

        redRestosJCheckBox.setText("Red. Restos");
        redRestosJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	redRestosJCheckBoxActionPerformed(evt);
            }
        });

        trasladoJCheckBox.setText("Traslado");
        trasladoJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	trasladoJCheckBoxActionPerformed(evt);
            }
        });

        DatosDefuncionJPanel.add(redRestosJCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 143, -1, -1)); //(18, 143, 834, 38));
        DatosDefuncionJPanel.add(trasladoJCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 143, -1, -1)); //(18, 143, 834, 38));
        
        InhumacionJPanel.add(DatosDefuncionJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 870, 200));
        

        //PANEL Difuntos
        listaDifuntosTabla = new ArrayList<DifuntoBean>();
        
        difuntosJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Difuntos"));
        difuntosJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        difuntosJTable = new ElemTableRender(6); 
        difuntosJTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        
        initHeadersDifuntoJTable();
        
        /* Ordenacion de la tabla */
        tableDifuntosSorted= new TableSorted(difuntosJTableModel);
        difuntosJTableModel.setTableSorted(tableDifuntosSorted);
        tableDifuntosSorted.setTableHeader(difuntosJTable.getTableHeader());
        difuntosJTable.setModel(tableDifuntosSorted);
        difuntosJTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        difuntosJTable.setCellSelectionEnabled(false);
        difuntosJTable.setColumnSelectionAllowed(false);
        difuntosJTable.setRowSelectionAllowed(true);
        difuntosJTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        difuntosJTable.getTableHeader().setReorderingAllowed(false);
        
        setInvisible(difuntosJTableModel.getColumnCount()-1,difuntosJTable);
        difuntosJTableModel.setTable(difuntosJTable);
        
        //ArrayList listadifuntos = getTarifasByConcesionAndUnidad();
        if (listaDifuntos != null){
        	difuntosJTableModel.setModelData(listaDifuntos);      	
  	  	}
        
        difuntosJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
            	elemDifuntosJTableMouseReleased();
            }
            public void mouseClicked(java.awt.event.MouseEvent evt){
            	if(evt.getClickCount() == 2) {
            		getDifuntoSeleccionado();
            		for (Iterator <ActionListener>i = actionListeners.iterator(); i.hasNext();) {
                        ActionListener l = (ActionListener) i.next();
                        l.actionPerformed(new ActionEvent(this, 0, DOBLE_CLICK));
                    }
                }
            }
        });

        difuntosJScrollPane.setViewportView(difuntosJTable);
        
        
        difuntosJScrollPane.setViewportView(difuntosJTable);
        difuntosJPanel.add(difuntosJScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 860, 90)); //(10, 10, 860, 100)
        
        InhumacionJPanel.add(difuntosJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 880, 120));       
        
        
        //PANEL TARIFAS
        listaTarifasTabla = new ArrayList<TarifaBean>();
        
        tarifasJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tarifas"));
        tarifasJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tarifasJTable = new ElemTableRender(6); 
        tarifasJTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        
        initHeadersTarifaJTable();
        
        /* Ordenacion de la tabla */
        tableSorted= new TableSorted(tarifasJTableModel);
        tarifasJTableModel.setTableSorted(tableSorted);
        tableSorted.setTableHeader(tarifasJTable.getTableHeader());
        tarifasJTable.setModel(tableSorted);
        tarifasJTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tarifasJTable.setCellSelectionEnabled(false);
        tarifasJTable.setColumnSelectionAllowed(false);
        tarifasJTable.setRowSelectionAllowed(true);
        tarifasJTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        tarifasJTable.getTableHeader().setReorderingAllowed(false);
        
        setInvisible(tarifasJTableModel.getColumnCount()-1,tarifasJTable);
        tarifasJTableModel.setTable(tarifasJTable);
        
        ArrayList lista = getTarifasByServicioAndUnidad();
        if (lista != null){
        	tarifasJTableModel.setModelData(lista);      	
  	  	}
        
        tarifasJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
            	elemTarifaJTableMouseReleased();
            }
            public void mouseClicked(java.awt.event.MouseEvent evt){
            	if(evt.getClickCount() == 2) {
            		getTarifaSeleccionado();
            		for (Iterator <ActionListener>i = actionListeners.iterator(); i.hasNext();) {
                        ActionListener l = (ActionListener) i.next();
                        l.actionPerformed(new ActionEvent(this, 0, DOBLE_CLICK));
                    }
                }
            }
        });

        tarifasJScrollPane.setViewportView(tarifasJTable);
        
        
        tarifasJScrollPane.setViewportView(tarifasJTable);
        tarifasJPanel.add(tarifasJScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 860, 90)); //(10, 10, 860, 100));
        
        //(10, 410, 880, 120));       
        InhumacionJPanel.add(tarifasJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 430, 880, 120));       
        
        /**datos de tarifa propios**/
        datostarifaJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(aplicacion.getI18nString("cementerio.datosTarifa.tag1")));
        datostarifaJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bonificacionJLabel.setText("Bonificacion");
        bonificaionJTextField.setText("0");
        datostarifaJPanel.add(bonificacionJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 22, -1, -1));
        datostarifaJPanel.add(bonificaionJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 22, 160, -1));

        precioJLabel.setText("Precio");
        precioJTextField.setText("0");
        datostarifaJPanel.add(precioJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 22, -1, -1));
        datostarifaJPanel.add(precioJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 22, 160, -1));
        //(9, 535, 880, 60));
        InhumacionJPanel.add(datostarifaJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 555, 880, 60));

        getContentPane().add(InhumacionJPanel, java.awt.BorderLayout.CENTER);
        getContentPane().add(botoneraAceptarCancelarJPanel, java.awt.BorderLayout.SOUTH);        


        getContentPane().add(InhumacionJPanel, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void redRestosJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        if (redRestosJCheckBox.isSelected()){
        	if (exhumacion == null) exhumacion = new ExhumacionBean();
        	exhumacion.setRed_restos(true);
        }else{
        	exhumacion.setRed_restos(false);
        }
    }

    private void trasladoJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        if (trasladoJCheckBox.isSelected()){
        	if (exhumacion == null) exhumacion = new ExhumacionBean();
        		exhumacion.setTraslado(true);
        }else{
        	exhumacion.setTraslado(false);
        }
    }

    
    
    /**
     * Método que hace un columna de la tabla no visible
     */
    private void setInvisible(int column, JTable jTable){
        /** columna hidden no visible */
        TableColumn col= jTable.getColumnModel().getColumn(column);
        col.setResizable(false);
        col.setWidth(0);
        col.setMaxWidth(0);
        col.setMinWidth(0);
        col.setPreferredWidth(0);
    }
    
    public Vector listUnidadSimpleToString(Vector listaSimpleUnidad){
    	
    	Vector listaFinal = new Vector();
    	
    	for (int i = 0; i < listaSimpleUnidad.size(); i++) {
			UnidadSimple unidadSimple = (UnidadSimple) listaSimpleUnidad.get(i);
	    	listaFinal.add(unidadSimple.getDescripcion());
		}
    	return listaFinal;
    }
    
    private void elemTarifaJTableMouseReleased() {
        Object obj = getTarifaSeleccionado();
        if (obj instanceof TarifaBean){
        	setTarifaSelected((TarifaBean) getTarifaSeleccionado());
        }
    }
    
    private void elemDifuntosJTableMouseReleased() {
    	
    	if (difuntoDeselected){
	        Object obj = getDifuntoSeleccionado();
	        if (obj instanceof DifuntoBean){
	        	setDifuntoSelected((DifuntoBean) getDifuntoSeleccionado());
	        	load(exhumacion, true);
	        	difuntoDeselected=false;
	        }
    	}else{
    		difuntoDeselected=true;
    		this.difuntosJTable.clearSelection();
    		DatosFallecimientoBean datosFallecimiento = new DatosFallecimientoBean();
    		DifuntoBean difuntoBean = new DifuntoBean();
    		difuntoBean.setDatosFallecimiento(datosFallecimiento);
    		setDifuntoSelected(difuntoBean);
    		load(exhumacion, true);
    	}
    }
    
    private void initHeadersTarifaJTable(){
	   	this.tarifasJTableModel= new ElemJTableModel(new String[]{"Categoria", "Tipo calculo", "Concepto", "Precio", "Estado", "HIDDEN"},
	   																	new boolean[]{false, false, false, false, false, false}, locale);		
	   }

    private void initHeadersDifuntoJTable(){
	   	this.difuntosJTableModel= new ElemJTableModel(new String[]{"DNI/NIF", "Nombre ","Fecha Defunción", "Grupo", "Causa Fundamental", "HIDDEN"},
	   																	new boolean[]{false, false, false, false, false, false}, locale);		
	   }

    public Object getTarifaSeleccionado(){
        
    	selectedRow= tarifasJTable.getSelectedRow();
	    if (selectedRow == -1){ 
	        	return null;
        }else{
        	tarifasJTableModel.setTableSorted(tarifasJTableModel.getTableSorted());
        	tarifasJTableModel.setRows(tarifasJTableModel.getRows());
        	return tarifasJTableModel.getObjetAt(selectedRow);
        }
    }
    
    public Object getDifuntoSeleccionado(){
        
    	selectedDifuntosRow= difuntosJTable.getSelectedRow();
	    if (selectedDifuntosRow == -1){ 
	        	return null;
        }else{
        	difuntosJTableModel.setTableSorted(difuntosJTableModel.getTableSorted());
        	difuntosJTableModel.setRows(difuntosJTableModel.getRows());
        	return difuntosJTableModel.getObjetAt(selectedDifuntosRow);
        }
    }


    public void renombrarComponentes(){
//      try{datosGeneralesComunesJPanel.setBorder(new javax.swing.border.TitledBorder(aplicacion.getI18nString("cementerio.datosGenerales.tag1")));}catch(Exception e){}
  }

  
  public void addActionListener(ActionListener l) {
      this.actionListeners.add(l);
  }

  public void removeActionListener(ActionListener l) {
      this.actionListeners.remove(l);
  }

  
  private void fireActionPerformed() {
      for (Iterator i = actionListeners.iterator(); i.hasNext();) {
          ActionListener l = (ActionListener) i.next();
          l.actionPerformed(new ActionEvent(this, 0, null));
      }
  }

  
  /* Método que abre una ventana de confirmacion sobre la operacion que se esta llevando a cabo
  */
 private boolean confirmOption(){
     int ok= -1;
     ok= JOptionPane.showConfirmDialog(this, aplicacion.getI18nString("cementerio.optionpane.tag1"), aplicacion.getI18nString("cementerio.optionpane.tag2"), JOptionPane.YES_NO_OPTION);
     if (ok == JOptionPane.NO_OPTION){
         return false;
     }
     return true;
 }

 private void exitForm(java.awt.event.WindowEvent evt) {
	   setExhumacion(null);
     fireActionPerformed();
 }

  
  
  public void botoneraAceptarCancelarJPanel_actionPerformed(){
	
//	if (!operacion.equalsIgnoreCase(Constantes.OPERACION_MODIFICAR)){  
	  	if (((botoneraAceptarCancelarJPanel.aceptarPressed() && getDifuntoSeleccionado() == null)) && (listaDifuntos.size() == 0)){
			String message = "No hay ningun difunto dado de alta en la unidad de enterramiento seleccionada.";
			JOptionPane.showMessageDialog(desktop, message, "Información.." ,JOptionPane.WARNING_MESSAGE);
		}else if ((botoneraAceptarCancelarJPanel.aceptarPressed() && getDifuntoSeleccionado() == null)){
			String message = "Debe seleccionar un difunto";
			JOptionPane.showMessageDialog(desktop, message);
		}  
		else if (((botoneraAceptarCancelarJPanel.aceptarPressed() && getTarifaSelected() == null)) && (getTarifasByServicioAndUnidad().size() == 0)){
			String message = "No hay ninguna tarifa en el sistema para esta categoría y este tipo de calculo.";
			JOptionPane.showMessageDialog(desktop, message, "Información.." ,JOptionPane.WARNING_MESSAGE);
		}else if ((botoneraAceptarCancelarJPanel.aceptarPressed() && getTarifaSelected() == null)){
			String message = "Debe seleccionar una Tarifa";
			JOptionPane.showMessageDialog(desktop, message);
		}
//	} 
	else if((!botoneraAceptarCancelarJPanel.aceptarPressed()) ||
        (botoneraAceptarCancelarJPanel.aceptarPressed() && operacion.equalsIgnoreCase(Constantes.OPERACION_MODIFICAR)?!confirmOption():false)){
    	exhumacion= null;
    }
    else{
    		actualizarDatosExhumacion(exhumacion);
      }
      fireActionPerformed();
  }
  
  
  public void actualizarDatosExhumacion(ExhumacionBean exhumacion){
      
	  	if (exhumacion==null || exhumacion.getTipo() == null) return;
	      
	  	exhumacion.setEntidad(entidadJTextField.getText().trim());
	  	exhumacion.setNombreCementerio(cementerioJTextField.getText().trim());
	  	
	  	exhumacion.setTipo_contenedor(getPatronContenedor());
	  	exhumacion.setTipo_exhumacion(getPatronExhumacion());
	  	exhumacion.setFecha_exhumacion(fechaInhumacionJTextField.getDate());
	  	exhumacion.setCodigo(codigoJTextField.getText().trim());
	  	exhumacion.setInforme_exhumacion(informeJTextArea.getText().trim());
	  	
	  	DifuntoBean difunto = null;
	  	if (getDifuntoSeleccionado()!= null){
	  		difunto = getDifuntoSelected();
	  	}else if (exhumacion.getDifunto() != null){
	  		difunto = exhumacion.getDifunto();
	  	}
	  	exhumacion.setDifunto(difunto);
	  	
	    //2.tarifa
	  	TarifaBean tarifa = null;
	  	if (getTarifaSeleccionado()!= null){
	  		tarifa = getTarifaSelected();
	  	}else if (exhumacion.getTarifa() != null){
	  		tarifa = exhumacion.getTarifa();
	  	}else{
	  		tarifa = new TarifaBean();
	  	}
	    tarifa.setTipo_tarifa(Constantes.TARIFA_GDIFUNTOS);
	
	    exhumacion.setTarifa(getTarifaSelected());
	  	
	    exhumacion.setBonificacion(bonificaionJTextField.getText().trim());
	    exhumacion.setPrecio_final(precioJTextField.getText().trim());
	    exhumacion.setTraslado(getExhumacion().isTraslado());
	    exhumacion.setRed_restos(getExhumacion().isRed_restos());
	    
	  	//Por ultimo hago el set
		setExhumacion(exhumacion);
		
  }
 
	/**
	 * Método que carga en el panel los datos generales del bloque
	 * @param bloque a cargar en el panel
	 */
  public void load(ExhumacionBean exhumacionnElem, boolean editable) {
	if (exhumacionnElem == null)
			return;
		
	cementerioJTextField.setText(exhumacionnElem.getNombreCementerio() != null ?  exhumacionnElem.getNombreCementerio() : "");
	cementerioJTextField.setEditable(false);
	entidadJTextField.setText(exhumacionnElem.getEntidad() != null ?  exhumacionnElem.getEntidad() : "");
	entidadJTextField.setEditable(false);
		
	setExhumacion(exhumacionnElem);
      if(operacion == null) return;
		        
      DatosGeneralesComunesJPanel.setEnabled(editable);
      DatosDefuncionJPanel.setEnabled(false);
      
      DatosFallecimientoBean datosFallecimiento = null;
      if (getDifuntoSelected()!= null){
    	 datosFallecimiento = getDifuntoSelected().getDatosFallecimiento();
      }else if (exhumacionnElem.getDifunto()!= null){
    	  datosFallecimiento = exhumacionnElem.getDifunto().getDatosFallecimiento();
      }
      
      if (datosFallecimiento!= null){
      
    	  medicoJTextField.setText(datosFallecimiento.getMedico()!= null ? datosFallecimiento.getMedico(): "");
    	  medicoJTextField.setEditable(false);
    	  
	      numColegiadoJTextField.setText(datosFallecimiento.getNumColegiado()!= null ? datosFallecimiento.getNumColegiado() : "");
	      numColegiadoJTextField.setEditable(false);
	      
	      regCivilJTextField.setText(datosFallecimiento.getRegistro_civil()!= null ? datosFallecimiento.getRegistro_civil() : "");
	      regCivilJTextField.setEditable(false);
	      
	      lugarDefuncionJTextField.setText(datosFallecimiento.getLugar()!= null ? datosFallecimiento.getLugar(): "");
	      lugarDefuncionJTextField.setEditable(false);
	      
	      
	      fFallecimientoJTextField.setText(datosFallecimiento.getFecha()!= null ? Const.df.format(datosFallecimiento.getFecha()) : "");
	      fFallecimientoJTextField.setEnabled(false);
	      
	      RefFallecimientoJTextField.setText(datosFallecimiento.getReferencia_fallecimiento()!= null ? datosFallecimiento.getReferencia_fallecimiento() : "");
	      RefFallecimientoJTextField.setEditable(false);
	      
	      causaFundamentalJTextField.setText(datosFallecimiento.getCausa_fundamental()!= null ? datosFallecimiento.getCausa_fundamental() : "");
	      causaFundamentalJTextField.setEditable(false);
	      
	      causaInmediataJTextField.setText(datosFallecimiento.getCausa_inmediata()!= null ? datosFallecimiento.getCausa_inmediata() : "");
	      causaInmediataJTextField.setEditable(false);
	      
      }
      
      if ((operacion.equalsIgnoreCase(Constantes.OPERACION_MODIFICAR) || 
      		(operacion.equalsIgnoreCase(Constantes.OPERACION_CONSULTAR)))){
      	
      	loadExhumacion(exhumacionnElem, editable);

      }
	
	}

  
  public void loadExhumacion (ExhumacionBean exhumacionElem, boolean editable){
  	
		if (exhumacionElem == null)
			return;

	    //cargarmos las estructuras..para obtener el tipo de concesion 
	      while (!Estructuras.isCargada()){
	          if (!Estructuras.isIniciada()) Estructuras.cargarEstructuras();
	          try {Thread.sleep(500);}catch(Exception e){}
	      }

	      Vector vDomainTipoContenedor = Estructuras.getListaComboContenedores(locale);
	      for (int i = 0; i < vDomainTipoContenedor.size(); i++) {
			DomainNode node = (DomainNode) vDomainTipoContenedor.get(i);
			if (node.getPatron().equalsIgnoreCase(String.valueOf(exhumacionElem.getTipo_contenedor()))){
				contendorJComboBox.setSelectedIndex(i);
			}
	      }

	    contendorJComboBox.setEnabled(editable);
	    
	    
	    vDomainTipoExhumacion = Estructuras.getListaCombosTipoExhumacionesSorted(locale);
	      for (int i = 0; i < vDomainTipoExhumacion.size(); i++) {
			DomainNode node = (DomainNode) vDomainTipoExhumacion.get(i);
			if (node.getPatron().equalsIgnoreCase(String.valueOf(exhumacionElem.getTipo_exhumacion()))){
				tipoExhumacionJComboBox.setSelectedIndex(i);
			}
	      }

	      tipoExhumacionJComboBox.setEnabled(editable);

		fechaInhumacionJTextField.setDate(exhumacionElem.getFecha_exhumacion() != null ? exhumacionElem.getFecha_exhumacion() : new Date());
		fechaInhumacionJTextField.setEnabled(editable);

		codigoJTextField.setText(exhumacionElem.getCodigo()!= null ? exhumacionElem.getCodigo() : "");
		codigoJTextField.setEditable(editable);

		informeJTextArea.setText(exhumacionElem.getInforme_exhumacion()!= null ? exhumacionElem.getInforme_exhumacion() : "");
		informeJTextArea.setEditable(editable);
		informeJTextArea.setEnabled(editable);
		
	    try {
		    clearTable();
			loadListaTarifas(getTarifasByServicioAndUnidad());
			} catch (Exception e) {
				 logger.error("loadListaTarifas : "+ e.getMessage());
				e.printStackTrace();
			}
		
		TarifaBean tarifa = exhumacionElem.getTarifa();
		if (tarifa != null) loadDatosTarifa (tarifa, editable);

      bonificaionJTextField.setText(exhumacionElem.getBonificacion()!= null ? exhumacionElem.getBonificacion() : "0");
      bonificaionJTextField.setEditable(editable);
      
      precioJTextField.setText(exhumacionElem.getPrecio_final()!= null ? exhumacionElem.getPrecio_final() : "0");
      precioJTextField.setEditable(editable);
      
		if (exhumacionElem.isRed_restos()){
			redRestosJCheckBox.setSelected(true);			
		}else{
			redRestosJCheckBox.setSelected(false);
		}
		redRestosJCheckBox.setEnabled(editable);
		
		if (exhumacionElem.isTraslado()){
			trasladoJCheckBox.setSelected(true);			
		}else{
			trasladoJCheckBox.setSelected(false);
		}
		trasladoJCheckBox.setEnabled(editable);
		
  }
  
  
  public void clearTable(){
	  	tarifasJTableModel.setModelData(new ArrayList());    	
	  	tarifasJTableModel.getTableSorted().sortingStatusChanged();    	
  }
  
  public void loadDatosTarifa (TarifaBean tarifa, boolean editable){

	  setTarifaSelected(tarifa);
	  
	}


    
	public ExhumacionBean getExhumacion() {
		return exhumacion;
	}

public void setExhumacion(ExhumacionBean exhumacion) {
	this.exhumacion = exhumacion;
}

	public TarifaBean getTarifaSelected() {
		return tarifaSelected;
	}

	public void setTarifaSelected(TarifaBean tarifaSelected) {
		this.tarifaSelected = tarifaSelected;
	}
	
	public UnidadEnterramientoBean getUnidadSelected() {
		return unidadSelected;
	}

	public DifuntoBean getDifuntoSelected() {
		return difuntoSelected;
	}

	public void setDifuntoSelected(DifuntoBean difuntoSelected) {
		this.difuntoSelected = difuntoSelected;
	}
	
    public ArrayList getListaTarifas() {
		return listaTarifas;
	}

	public void setListaTarifas(ArrayList listaTarifas) {
		this.listaTarifas = listaTarifas;
	}
    
   private ArrayList getTarifasByServicioAndUnidad (){
	   
	   ArrayList<TarifaBean> listaTarifasWithFilter = new ArrayList<TarifaBean>();
	   
	   for (int i = 0; i < listaTarifas.size(); i++) {
		TarifaBean tarifa = (TarifaBean) listaTarifas.get(i);
		if ((tarifa.getTipo_calculo() == getPatronExhumacion()) && (tarifa.getTipo_unidad() == getUnidadSelected().getTipo_unidad())){
			listaTarifasWithFilter.add(tarifa);
		}
		
	}
	   return listaTarifasWithFilter;
	   
   }
   
	public void loadListaTarifas(Collection c) throws Exception{
    	int numElementos=0;
        Collection cRet= new ArrayList();
        if (c != null){
	    	Object[] arrayElems = c.toArray();
	    	int n = arrayElems.length;
	    	if (n>0){
	    		//primer eleme
	    		Object obj = arrayElems[0];
	    		if (obj instanceof TarifaBean){
	    	    	for (int i=0;i<n;i++){
	    	    		TarifaBean elem = (TarifaBean)arrayElems[i];
		    		cRet.add(elem);
		    		numElementos++;
	    	    	}
	    		}
	    }
        }
        tarifasJTableModel.setModelData(cRet);
    }
	
	public void loadListaDifuntos(Collection c) throws Exception{
    	int numElementos=0;
        Collection cRet= new ArrayList();
        if (c != null){
	    	Object[] arrayElems = c.toArray();
	    	int n = arrayElems.length;
	    	if (n>0){
	    		//primer eleme
	    		Object obj = arrayElems[0];
	    		if (obj instanceof DifuntoBean){
	    	    	for (int i=0;i<n;i++){
	    	    		DifuntoBean elem = (DifuntoBean)arrayElems[i];
		    		cRet.add(elem);
		    		numElementos++;
	    	    	}
	    		}
	    }
        }
        difuntosJTableModel.setModelData(cRet);
    }

    public int getPatronContenedor() {
		return patronContenedor;
	}

	public void setPatronContenedor(int patronContenedor) {
		this.patronContenedor = patronContenedor;
	}
	
	public int getPatronExhumacion() {
		return patronExhumacion;
	}

	public void setPatronExhumacion(int patronExhumacion) {
		this.patronExhumacion = patronExhumacion;
	}
	
    // Variables declaration - do not modify
    private javax.swing.JPanel DatosDefuncionJPanel;
    private javax.swing.JPanel DatosGeneralesComunesJPanel;
    private javax.swing.JPanel InhumacionJPanel;
    private javax.swing.JSeparator JSeparator1;
    private javax.swing.JSeparator JSeparator2;
    private javax.swing.JLabel RefFallecimientoJLabel;
    private javax.swing.JTextField RefFallecimientoJTextField;
    private javax.swing.JLabel causaFundamentalJLabel;
    private javax.swing.JTextField causaFundamentalJTextField;
    private javax.swing.JLabel causaInmediataJLabel;
    private javax.swing.JTextField causaInmediataJTextField;
    private javax.swing.JLabel cementerioJLabel;
    private javax.swing.JTextField cementerioJTextField;
    private javax.swing.JLabel codigoJLabel;
    private javax.swing.JTextField codigoJTextField;
    private javax.swing.JComboBox contendorJComboBox;
    private javax.swing.JLabel contenedorJLabel;
    private javax.swing.JLabel entidadJLabel;
    private javax.swing.JTextField entidadJTextField;
    private javax.swing.JTextField fFallecimientoJTextField;
    private javax.swing.JLabel fechaFallecimientoJLabel;
    private javax.swing.JLabel fechaInhumacionJLabel;
    private JDateChooser fechaInhumacionJTextField;
    private javax.swing.JLabel informeInhumacionJLabel;
    private javax.swing.JScrollPane informeJScrollPane;
    private javax.swing.JTextArea informeJTextArea;
    private javax.swing.JLabel lugarDefuncionJLabel;
    private javax.swing.JTextField lugarDefuncionJTextField;
    private javax.swing.JLabel medicoJLabel;
    private javax.swing.JTextField medicoJTextField;
    private javax.swing.JLabel numColegiadoJLabel;
    private javax.swing.JTextField numColegiadoJTextField;
    private javax.swing.JTextField regCivilJTextField;
    private javax.swing.JLabel regiCivilJLabel;
    private javax.swing.JLabel tipoInhumacionJLabel;
    private  javax.swing.JComboBox tipoExhumacionJComboBox;
    
    private javax.swing.JScrollPane tarifasJScrollPane;
    private javax.swing.JTable tarifasJTable;
    private javax.swing.JPanel tarifasJPanel;

    private javax.swing.JScrollPane difuntosJScrollPane;
    private javax.swing.JTable difuntosJTable;
    private javax.swing.JPanel difuntosJPanel;
    
    private javax.swing.JPanel datostarifaJPanel;
    private javax.swing.JLabel precioJLabel;
    private javax.swing.JTextField precioJTextField;
    private javax.swing.JLabel bonificacionJLabel;
    private javax.swing.JTextField bonificaionJTextField;
    
    private javax.swing.JCheckBox redRestosJCheckBox;
    private javax.swing.JCheckBox trasladoJCheckBox;
    
    // End of variables declaration

}
