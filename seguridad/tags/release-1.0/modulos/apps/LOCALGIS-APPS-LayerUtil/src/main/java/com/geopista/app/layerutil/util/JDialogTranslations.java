package com.geopista.app.layerutil.util;


import com.geopista.app.AppContext;
import com.geopista.app.administrador.estructuras.Estructuras;
import com.geopista.app.utilidades.estructuras.ComboBoxEstructuras;
import com.geopista.protocol.ListaEstructuras;
import com.geopista.app.utilidades.TextPane;
import com.vividsolutions.jump.I18N;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Hashtable;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.WindowConstants;
import javax.swing.border.LineBorder;

import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;



/**
 * Diálogo en el que se introducen las traducciones de los diferentes elementos 
 * para cada idioma dado de alta en el sistema
 *
 * @author  COTESA
 */
public class JDialogTranslations extends JDialog {
    
    private boolean bAceptar=false;
    private ListaEstructuras idiomas;
    private Vector vCombos=new Vector();
    private Vector vTextArea = new Vector();
    AppContext aplicacion = (AppContext) AppContext.getApplicationContext();
    
    private JButton jButtonAceptar;
    private JButton jButtonCancelar;
    private JPanel jPanelTerminos;
    private JPanel jPanelBotonera;
    
    /** Creates new form JDialogTraducciones */
    public JDialogTranslations(Frame parent, boolean modal,
            Hashtable hDic, boolean bEnabled)
    {
        super(parent, modal);        
        initComponents(hDic);
        enabled(bEnabled);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents(Hashtable hDic)
    {
        this.setTitle(I18N.get("GestorCapas","JDialogTraducciones.titulo"));
        jPanelTerminos = new JPanel();
        idiomas=Estructuras.getListaLanguage();
        jButtonAceptar = new JButton();
        jButtonCancelar = new JButton();
        jPanelBotonera = new JPanel();
        
        
        jButtonAceptar.setText(I18N.get("GestorCapas","general.boton.aceptar"));
        jButtonCancelar.setText(I18N.get("GestorCapas","general.boton.cancelar"));
        
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        if (idiomas!=null && idiomas.size()>0)
        {
            jPanelTerminos.setLayout(new GridLayout(idiomas.size(),1));
            int i=0;
            for (Enumeration e=idiomas.getLista().elements();e.hasMoreElements();)
            {
                e.nextElement();
                ComboBoxEstructuras jComboBoxEstructura = new ComboBoxEstructuras(idiomas,new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        comprobarOtrosCombos(evt);
                    }
                }, com.geopista.app.administrador.init.Constantes.Locale);
                jComboBoxEstructura.setName(new Integer(i).toString());
                i++;
                TextPane auxTextArea= new TextPane(256);
                auxTextArea.setLineWrap(true);
                auxTextArea.setMinimumSize(new Dimension(380,60));
                auxTextArea.setBorder(new LineBorder(new Color(0, 0, 0)));
                vTextArea.add(auxTextArea);
                vCombos.add(jComboBoxEstructura);
                JPanel auxPanel= new JPanel();
                auxPanel.setLayout(new AbsoluteLayout());
                auxPanel.add(jComboBoxEstructura, new AbsoluteConstraints(20, 20, 100, -1));
                JScrollPane auxScroll= new JScrollPane(auxTextArea);
                auxPanel.add(auxScroll, new AbsoluteConstraints(150, 20, 380, 60));
                jPanelTerminos.add(auxPanel);
                
            }
        }
        jButtonAceptar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonAceptar();
            }
        });
        
        jPanelBotonera.add(jButtonAceptar);
        
        jButtonCancelar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonCancelar();
            }
        });
        
        jPanelBotonera.add(jButtonCancelar);
        
        JScrollPane  scroll= new JScrollPane(jPanelTerminos);
        getContentPane().add(scroll, BorderLayout.CENTER);
        getContentPane().add(jPanelBotonera,  BorderLayout.SOUTH);
        
        int i=0;
        for (Enumeration e=hDic.keys();e.hasMoreElements();)
        {
            String sLocale= (String)e.nextElement();
            if ((idiomas.getDomainNode(sLocale)!=null)&& i<vCombos.size())
            {
                ComboBoxEstructuras auxCombo=(ComboBoxEstructuras)vCombos.elementAt(i);
                auxCombo.setSelectedPatron(sLocale);
                TextPane auxTextArea =(TextPane)vTextArea.elementAt(i);
                auxTextArea.setText((String)hDic.get(sLocale));
                i++;
            }
        }
    }
    
    private void enabled(boolean bEnabled)
    {
        for (int i=0; i<vCombos.size();i++)
        {
            ((JComponent)vCombos.elementAt(i)).setEnabled(bEnabled);
            ((TextPane)vTextArea.elementAt(i)).setEnabled(bEnabled);
        }
    }
    
    private void jButtonCancelar() {
        bAceptar=false;
        dispose();
    }
    
    public Hashtable getDiccionario() {
        if (bAceptar)
        {
            Hashtable auxDict= new Hashtable();
            for (int i=0; i<vCombos.size();i++)
            {
                String sPatron=((ComboBoxEstructuras)vCombos.elementAt(i)).getSelectedPatron();
                String sTexto=((TextPane)vTextArea.elementAt(i)).getText();
                if (sPatron!=null&&sPatron.length()>0&&sTexto!=null&&sTexto.length()>0)
                {
                    auxDict.put(sPatron,sTexto);
                }
            }
            return auxDict;
        }
        else
            return null;
    }
    
    
    private  boolean comprobarDatos()
    {
        for (int i=0; i<vCombos.size();i++)
        {
            String sPatron=((ComboBoxEstructuras)vCombos.elementAt(i)).getSelectedPatron();
            String sTexto=((TextPane)vTextArea.elementAt(i)).getText();
            if (sTexto!=null&&sTexto.length()>0)
            {
                if (sPatron==null || sPatron.length()<=0)
                    return false;
            }
        }
        return true;
    }
    
    
    private void jButtonAceptar() {
        
        if (!comprobarDatos())
        {
            int n = JOptionPane.showOptionDialog(this,
                    I18N.get("GestorCapas","JDialogTraducciones.mensaje.nocompleto"),
                    "",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,null,null,null);
            if (n==JOptionPane.NO_OPTION) return;
        }
        bAceptar=true;
        dispose();
    }
    
    
    private void comprobarOtrosCombos(ActionEvent evt)
    {
        if (!(evt.getSource() instanceof ComboBoxEstructuras)) return;
        ComboBoxEstructuras selectedCombo=(ComboBoxEstructuras) evt.getSource();
        String patronSelect=selectedCombo.getSelectedPatron();
        if (patronSelect==null) return;
        for (Enumeration e= vCombos.elements();e.hasMoreElements();)
        {
            ComboBoxEstructuras otro=(ComboBoxEstructuras)e.nextElement();
            if (otro.getName()!=null&&
                    !(otro.getName().equals(selectedCombo.getName())) &&
                    patronSelect.equalsIgnoreCase(otro.getSelectedPatron()))
            {
                selectedCombo.setSelectedIndex(0);
                return;
            }
        }
    }   
}
