/*
 * MapImagePropertiesPanel.java
 *
 * Created on 13 de noviembre de 2007, 17:27
 */
package com.geopista.reports.gui;

import it.businesslogic.ireport.Report;
import it.businesslogic.ireport.gui.JReportFrame;
import it.businesslogic.ireport.gui.MainFrame;
import it.businesslogic.ireport.gui.event.ReportElementChangedEvent;

import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import com.geopista.app.reports.maps.MapImageConstants;
import com.geopista.app.reports.maps.MapImageExpressionManager;
import com.geopista.app.reports.maps.MapImageSettings;
import com.geopista.reports.parameters.IReportParameterManager;

/**
 * IMPORTANTE: La clase Java ya no esta sincronizada con el fichero .form asociado.
 * @author  jpolo
 */
public class MapImagePropertiesPanel extends javax.swing.JPanel {
    
    private static final int INTERACTIVE_SELECTION = 0;
    private static final int PARAMETRIC_SELECTION = 1;
    
    private static final String MAP_TYPE_INTERACTIVE_KEY = "interactive";    
    private static final String MAP_TYPE_PARAMETRIC_KEY = "parametric";
    
    private MapImageReportElement mire;
    private boolean refreshing = false;

    /** Creates new form MapImagePropertiesPanel */
    public MapImagePropertiesPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelMainContainer = new javax.swing.JPanel();
        jPanelSelectionType = new javax.swing.JPanel();
        jLabelSelectionType = new javax.swing.JLabel();
        jComboBoxSelectionType = new javax.swing.JComboBox();
        jButtonHelp = new javax.swing.JButton();
        jPanelSelectedMapProperties = new javax.swing.JPanel();
        mapImageInteractivePropertiesPanel = new com.geopista.reports.gui.MapImageInteractivePropertiesPanel(this);
        mapImageParametricPropertiesPanel = new com.geopista.reports.gui.MapImageParametricPropertiesPanel(this);

        setLayout(new java.awt.BorderLayout());

        jPanelMainContainer.setLayout(new java.awt.GridBagLayout());

        jPanelSelectionType.setPreferredSize(new java.awt.Dimension(310, 44));
        jPanelSelectionType.setLayout(new java.awt.GridBagLayout());

        jLabelSelectionType.setText("Tipo de Selección");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 1, 1);
        jPanelSelectionType.add(jLabelSelectionType, gridBagConstraints);

        jComboBoxSelectionType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Interactiva", "Parametrica" }));
        jComboBoxSelectionType.setMinimumSize(new java.awt.Dimension(100, 20));
        jComboBoxSelectionType.setPreferredSize(new java.awt.Dimension(295, 22));
        jComboBoxSelectionType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
            	Report report=MainFrame.getMainInstance().getActiveReportFrame().getReport();
            	 IReportParameterManager.addDefaultGeopistaParameters(report);
                jComboBoxSelectionTypeItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 1, 1);
        jPanelSelectionType.add(jComboBoxSelectionType, gridBagConstraints);
        
        //jButtonHelp.setText("Help");
        javax.swing.ImageIcon helpIcon = new javax.swing.ImageIcon(MapImagePropertiesPanel.class.getResource("/ireport/icons/question.png"));
        jButtonHelp.setIcon(helpIcon);
        jButtonHelp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showHelp();
			}
		});
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 1, 1);
        jPanelSelectionType.add(jButtonHelp, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanelMainContainer.add(jPanelSelectionType, gridBagConstraints);

        jPanelSelectedMapProperties.setLayout(new java.awt.CardLayout());
        jPanelSelectedMapProperties.add(mapImageInteractivePropertiesPanel, MAP_TYPE_INTERACTIVE_KEY);
        jPanelSelectedMapProperties.add(mapImageParametricPropertiesPanel, MAP_TYPE_PARAMETRIC_KEY);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMainContainer.add(jPanelSelectedMapProperties, gridBagConstraints);

        add(jPanelMainContainer, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents
    private void jComboBoxSelectionTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxSelectionTypeItemStateChanged
        if (refreshing){
            return;
        }
        
        int selectedItem = jComboBoxSelectionType.getSelectedIndex();
        changePanel(selectedItem);
        markUnsavedChanges();
    }//GEN-LAST:event_jComboBoxSelectionTypeItemStateChanged

    public void loadMapImagePropertiesData(MapImageReportElement mire) {        
        this.mire = mire;
        String expression = mire.getImageExpression();
        MapImageSettings mapImageSettings = MapImageExpressionManager.parseExpression(expression);
                
        if (mapImageSettings == null || mapImageSettings.getMapSelectionType() == -1){
            changePanel(INTERACTIVE_SELECTION);
        }
        else if (mapImageSettings.getMapSelectionType() ==
        		MapImageConstants.MAP_SELECTION_TYPE_INTERACTIVE){
            changePanel(INTERACTIVE_SELECTION);
        }
        else if (mapImageSettings.getMapSelectionType() ==
        		MapImageConstants.MAP_SELECTION_TYPE_PARAMETRIC){
            changePanel(PARAMETRIC_SELECTION);
        }        
    }
    
    private void changePanel(int panel) {
        refreshing = true;
        try {
        	CardLayout propertiesCardLayout = (CardLayout) jPanelSelectedMapProperties.getLayout();
        	if (panel == INTERACTIVE_SELECTION) {
        		mapImageInteractivePropertiesPanel.setMapImageReportElement(mire);
        		propertiesCardLayout.show(jPanelSelectedMapProperties, MAP_TYPE_INTERACTIVE_KEY);
        	} else if (panel == PARAMETRIC_SELECTION ) {
        		propertiesCardLayout.show(jPanelSelectedMapProperties, MAP_TYPE_PARAMETRIC_KEY);
        		mapImageParametricPropertiesPanel.setMapImageReportElement(mire);
        	}
        	
        	jComboBoxSelectionType.setSelectedIndex(panel);

        	this.revalidate();
        	this.setVisible(false);
        	this.setVisible(true);
        } catch (Exception e){
        	e.printStackTrace();
        }
        
        refreshing = false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxSelectionType;
    private javax.swing.JLabel jLabelSelectionType;
    private javax.swing.JPanel jPanelMainContainer;
    private javax.swing.JPanel jPanelSelectedMapProperties;
    private javax.swing.JPanel jPanelSelectionType;
    private javax.swing.JButton jButtonHelp;
    private com.geopista.reports.gui.MapImageInteractivePropertiesPanel mapImageInteractivePropertiesPanel;
    private com.geopista.reports.gui.MapImageParametricPropertiesPanel mapImageParametricPropertiesPanel;
    // End of variables declaration//GEN-END:variables
    
    /*
     * Metodo para marcar que hay cambios sin salvar
     */
    public void markUnsavedChanges() {
        JReportFrame jrf = MainFrame.getMainInstance().getActiveReportFrame();
        ReportElementChangedEvent changedEvent = new ReportElementChangedEvent(jrf, this.mire, ReportElementChangedEvent.CHANGED);
        changedEvent.setEventSource(this);
        changedEvent.setPropertyChanged("map");
        changedEvent.setNewValue("generic");
        jrf.fireReportListenerReportElementsChanged(changedEvent);
    }
    
    /**
     * Muestra un dialogo de ayuda
     */
    private void showHelp() {
    	int sel = jComboBoxSelectionType.getSelectedIndex();
    	if (sel == INTERACTIVE_SELECTION) {
   			javax.swing.JDialog jDialogHelp = new MapImageInteractiveHelpDialog();
   			jDialogHelp.setVisible(true);
    	}
    	else if (sel == PARAMETRIC_SELECTION) {
    		javax.swing.JDialog jDialogHelp = new MapImageParametricHelpDialog();
   			jDialogHelp.setVisible(true);
    	}
    }
    
    public boolean validateFields() {
    	int sel = jComboBoxSelectionType.getSelectedIndex();
    	if (sel == INTERACTIVE_SELECTION) {
   			return mapImageInteractivePropertiesPanel.validateFields();
    	}
    	else if (sel == PARAMETRIC_SELECTION) {
   			return mapImageParametricPropertiesPanel.validateFields();
    	}
    	return true;
    }
}
